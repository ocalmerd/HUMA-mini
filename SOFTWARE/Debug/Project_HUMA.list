
Project_HUMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b0  080095b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080095b0  080095b0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095b0  080095b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b0  080095b0  000195b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080095b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000010  080095c8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080095c8  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c76  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003433  00000000  00000000  00039cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  0003d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  0003e308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdf2  00000000  00000000  0003f388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a9d  00000000  00000000  0005c17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f096  00000000  00000000  0006dc17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ccad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  0010cd28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ef4 	.word	0x08008ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008ef4 	.word	0x08008ef4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ESC_Calibration>:
//
extern uint8_t eeprom_data[32];


void ESC_Calibration ( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	PWM_Output_Start();
 8000a08:	f000 fda6 	bl	8001558 <PWM_Output_Start>

	while ( true )
	{
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f811 	bl	8000a34 <Convert_Receiver_Channel>
 8000a12:	4602      	mov	r2, r0
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <ESC_Calibration+0x28>)
 8000a16:	601a      	str	r2, [r3, #0]

		esc_3 = receiver_input_channel_3;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <ESC_Calibration+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a1e:	6013      	str	r3, [r2, #0]

		PWM_Output_ESC_Calibration( esc_3 );
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fdcb 	bl	80015c0 <PWM_Output_ESC_Calibration>
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a2a:	e7ef      	b.n	8000a0c <ESC_Calibration+0x8>
 8000a2c:	200000a0 	.word	0x200000a0
 8000a30:	20000100 	.word	0x20000100

08000a34 <Convert_Receiver_Channel>:
	}
}

int Convert_Receiver_Channel( uint8_t function )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       	//First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           		//What channel corresponds with the specific function
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3317      	adds	r3, #23
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000 )	{	reverse = 1;	}               //Reverse channel when most significant bit is set
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3317      	adds	r3, #23
 8000a50:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da03      	bge.n	8000a62 <Convert_Receiver_Channel+0x2e>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a60:	e002      	b.n	8000a68 <Convert_Receiver_Channel+0x34>
	else	{	reverse = 0;	}                                                       //If the most significant is not set there is no reverse
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            		//Read the actual receiver value for the corresponding function
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	4a3e      	ldr	r2, [pc, #248]	; (8000b64 <Convert_Receiver_Channel+0x130>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	623b      	str	r3, [r7, #32]
	low	   = ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14];  	//Store the low value for the specific receiver input channel
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	330f      	adds	r3, #15
 8000a78:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	7ffa      	ldrb	r2, [r7, #31]
 8000a80:	3207      	adds	r2, #7
 8000a82:	0052      	lsls	r2, r2, #1
 8000a84:	4936      	ldr	r1, [pc, #216]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a86:	5c8a      	ldrb	r2, [r1, r2]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
	center = ( eeprom_data[channel * 2 - 1]  << 8 ) | eeprom_data[channel * 2 - 2 ]; 	//Store the center value for the specific receiver input channel
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a33      	ldr	r2, [pc, #204]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	7ffa      	ldrb	r2, [r7, #31]
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	4930      	ldr	r1, [pc, #192]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aa0:	5c8a      	ldrb	r2, [r1, r2]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	617b      	str	r3, [r7, #20]
	high   = ( eeprom_data[channel * 2 + 7]  << 8 ) | eeprom_data[channel * 2 + 6 ];  	//Store the high value for the specific receiver input channel
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3307      	adds	r3, #7
 8000aac:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	7ffa      	ldrb	r2, [r7, #31]
 8000ab4:	3203      	adds	r2, #3
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	4929      	ldr	r1, [pc, #164]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aba:	5c8a      	ldrb	r2, [r1, r2]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000ac0:	6a3a      	ldr	r2, [r7, #32]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	da1f      	bge.n	8000b08 <Convert_Receiver_Channel+0xd4>
	{                                                         							//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                                       //Limit the lowest value to the value that was detected during setup
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	da01      	bge.n	8000ad4 <Convert_Receiver_Channel+0xa0>
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);       	//Calculate and scale the actual value to a 1000 - 2000us value
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ade:	fb02 f203 	mul.w	r2, r2, r3
 8000ae2:	6979      	ldr	r1, [r7, #20]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aec:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                           //If the channel is reversed
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <Convert_Receiver_Channel+0xca>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000afc:	e02a      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else 	 {	return 1500 - difference;	}                                       //If the channel is not reversed
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b04:	3304      	adds	r3, #4
 8000b06:	e025      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else if( actual > center )
 8000b08:	6a3a      	ldr	r2, [r7, #32]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dd1f      	ble.n	8000b50 <Convert_Receiver_Channel+0x11c>
	{                                                                        			//The actual receiver value is higher than the center value
		if( actual > high )	{	actual = high;	}                                       //Limit the lowest value to the value that was detected during setup
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dd01      	ble.n	8000b1c <Convert_Receiver_Channel+0xe8>
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center);      	//Calculate and scale the actual value to a 1000 - 2000us value
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b26:	fb02 f203 	mul.w	r2, r2, r3
 8000b2a:	6939      	ldr	r1, [r7, #16]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                           //If the channel is reversed
 8000b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <Convert_Receiver_Channel+0x114>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b44:	3304      	adds	r3, #4
 8000b46:	e005      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else	{	return 1500 + difference;	}                                       //If the channel is not reversed
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000b4e:	e001      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else	{	return 1500;	}
 8000b50:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	372c      	adds	r7, #44	; 0x2c
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	20000080 	.word	0x20000080
 8000b64:	200000a8 	.word	0x200000a8

08000b68 <Flash_ErasePage>:

uint32_t PageError;


void Flash_ErasePage( uint32_t pageaddress )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b70:	f002 ff56 	bl	8003a20 <HAL_FLASH_Unlock>

//	HAL_FLASHEx_Erase( (FLASH_EraseInitTypeDef *) FLASH_TYPEERASE_MASSERASE, (uint32_t *) PageError);
	FLASH_PageErase( pageaddress );
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f003 f817 	bl	8003ba8 <FLASH_PageErase>

	HAL_FLASH_Lock();
 8000b7a:	f002 ff77 	bl	8003a6c <HAL_FLASH_Lock>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Flash_EEPROM_Data_Write>:

void Flash_EEPROM_Data_Write( uint8_t page, uint32_t address, uint32_t index, void *writeBuffer )
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b087      	sub	sp, #28
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + index;
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]

	//Unlock Flash
	HAL_FLASH_Unlock();
 8000b9e:	f002 ff3f 	bl	8003a20 <HAL_FLASH_Unlock>

	//Write to Flash
	for( uint32_t i = 0; i < 1; i++ )
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	e013      	b.n	8000bd0 <Flash_EEPROM_Data_Write+0x4a>
	{
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ( (uint16_t *)writeBuffer )[i] );
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f04f 0400 	mov.w	r4, #0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4623      	mov	r3, r4
 8000bbc:	6979      	ldr	r1, [r7, #20]
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f002 febe 	bl	8003940 <HAL_FLASH_Program>
		flashAddress+=2;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
	for( uint32_t i = 0; i < 1; i++ )
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0e8      	beq.n	8000ba8 <Flash_EEPROM_Data_Write+0x22>
	}

	//Lock the Flash space
	HAL_FLASH_Lock();
 8000bd6:	f002 ff49 	bl	8003a6c <HAL_FLASH_Lock>
}
 8000bda:	bf00      	nop
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}

08000be2 <Flash_EEPROM_Data_Read>:

void Flash_EEPROM_Data_Read( uint8_t sector, uint32_t address, uint32_t index, void *readBuffer )
{
 8000be2:	b480      	push	{r7}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4603      	mov	r3, r0
 8000bf0:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + index;
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	617b      	str	r3, [r7, #20]

	for( uint32_t i = 0; i < 1; i++ )
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	e00d      	b.n	8000c1c <Flash_EEPROM_Data_Read+0x3a>
	{
		*((uint16_t *)readBuffer + i) = *(uint8_t *)flashAddress;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	7819      	ldrb	r1, [r3, #0]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b28a      	uxth	r2, r1
 8000c0e:	801a      	strh	r2, [r3, #0]
		flashAddress+=2;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3302      	adds	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
	for( uint32_t i = 0; i < 1; i++ )
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0ee      	beq.n	8000c00 <Flash_EEPROM_Data_Read+0x1e>
	}
}
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <Flight_Control_Setup>:
//
extern uint8_t eeprom_data[32];


void Flight_Control_Setup( void )
{
 8000c30:	b598      	push	{r3, r4, r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	HAL_Delay( 3000 );
 8000c34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c38:	f002 fd04 	bl	8003644 <HAL_Delay>

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <Flight_Control_Setup+0x10c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e033      	b.n	8000cac <Flight_Control_Setup+0x7c>
	{
		Flight_Gyro_Signalen();                                           //Read the gyro output.
 8000c44:	f000 f888 	bl	8000d58 <Flight_Gyro_Signalen>

		gyro_axis_cal[1] += gyro_axis[1];                          //Ad roll value to gyro_roll_cal.
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000c4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <Flight_Control_Setup+0x114>)
 8000c50:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4623      	mov	r3, r4
 8000c58:	f7ff fabc 	bl	80001d4 <__adddf3>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000c62:	e9c2 3402 	strd	r3, r4, [r2, #8]
		gyro_axis_cal[2] += gyro_axis[2];                          //Ad pitch value to gyro_pitch_cal.
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000c68:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <Flight_Control_Setup+0x114>)
 8000c6e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4623      	mov	r3, r4
 8000c76:	f7ff faad 	bl	80001d4 <__adddf3>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000c80:	e9c2 3404 	strd	r3, r4, [r2, #16]
		gyro_axis_cal[3] += gyro_axis[3];                          //Ad yaw value to gyro_yaw_cal.                                               //Wait 3 milliseconds before the next loop.
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000c86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <Flight_Control_Setup+0x114>)
 8000c8c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	f7ff fa9e 	bl	80001d4 <__adddf3>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000c9e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <Flight_Control_Setup+0x10c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a24      	ldr	r2, [pc, #144]	; (8000d3c <Flight_Control_Setup+0x10c>)
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <Flight_Control_Setup+0x10c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cb4:	dbc6      	blt.n	8000c44 <Flight_Control_Setup+0x14>
	}

	//Now that we have 2000 measures, we need to divide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                    //Divide the roll total by 2000.
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000cb8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <Flight_Control_Setup+0x118>)
 8000cc2:	f7ff fd67 	bl	8000794 <__aeabi_ddiv>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460c      	mov	r4, r1
 8000cca:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000ccc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	gyro_axis_cal[2] /= 2000;                                    //Divide the pitch total by 2000.
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000cd2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <Flight_Control_Setup+0x118>)
 8000cdc:	f7ff fd5a 	bl	8000794 <__aeabi_ddiv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000ce6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	gyro_axis_cal[3] /= 2000;                                    //Divide the yaw total by 2000.
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000cec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <Flight_Control_Setup+0x118>)
 8000cf6:	f7ff fd4d 	bl	8000794 <__aeabi_ddiv>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460c      	mov	r4, r1
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <Flight_Control_Setup+0x110>)
 8000d00:	e9c2 3406 	strd	r3, r4, [r2, #24]

	//Wait until the receiver is active and the throttle is set to the lower position.
	while( receiver_input_channel_3 > 1100 )
 8000d04:	e00b      	b.n	8000d1e <Flight_Control_Setup+0xee>
	{
		receiver_input_channel_3 = Convert_Receiver_Channels(3);    //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 f8de 	bl	8000ec8 <Convert_Receiver_Channels>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <Flight_Control_Setup+0x11c>)
 8000d10:	601a      	str	r2, [r3, #0]
		receiver_input_channel_4 = Convert_Receiver_Channels(4);    //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
 8000d12:	2004      	movs	r0, #4
 8000d14:	f000 f8d8 	bl	8000ec8 <Convert_Receiver_Channels>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <Flight_Control_Setup+0x120>)
 8000d1c:	601a      	str	r2, [r3, #0]
	while( receiver_input_channel_3 > 1100 )
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <Flight_Control_Setup+0x11c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f240 424c 	movw	r2, #1100	; 0x44c
 8000d26:	4293      	cmp	r3, r2
 8000d28:	dced      	bgt.n	8000d06 <Flight_Control_Setup+0xd6>
	}

	PWM_Output_Start();
 8000d2a:	f000 fc15 	bl	8001558 <PWM_Output_Start>
	PWM_Output_Idle();
 8000d2e:	f000 fc29 	bl	8001584 <PWM_Output_Idle>

	start = 0;           //Set start back to 0.
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <Flight_Control_Setup+0x124>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	bd98      	pop	{r3, r4, r7, pc}
 8000d3c:	2000002c 	.word	0x2000002c
 8000d40:	200001c8 	.word	0x200001c8
 8000d44:	200001a0 	.word	0x200001a0
 8000d48:	409f4000 	.word	0x409f4000
 8000d4c:	200000a0 	.word	0x200000a0
 8000d50:	20000388 	.word	0x20000388
 8000d54:	20000290 	.word	0x20000290

08000d58 <Flight_Gyro_Signalen>:
		PWM_Output_Idle();
	}
}

void Flight_Gyro_Signalen( void )
{
 8000d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d5c:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8000d5e:	f000 f9c9 	bl	80010f4 <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_axis[1] = gX_Raw;
 8000d62:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <Flight_Gyro_Signalen+0x148>)
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fb7f 	bl	800046c <__aeabi_i2d>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	494c      	ldr	r1, [pc, #304]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000d74:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_axis[2] = gY_Raw;
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <Flight_Gyro_Signalen+0x150>)
 8000d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fb74 	bl	800046c <__aeabi_i2d>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4946      	ldr	r1, [pc, #280]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000d8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gyro_axis[3] = gZ_Raw;
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <Flight_Gyro_Signalen+0x154>)
 8000d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb69 	bl	800046c <__aeabi_i2d>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4941      	ldr	r1, [pc, #260]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000da0:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(cal_int == 2000)
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <Flight_Gyro_Signalen+0x158>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dac:	d126      	bne.n	8000dfc <Flight_Gyro_Signalen+0xa4>
	{
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000db0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000db4:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <Flight_Gyro_Signalen+0x15c>)
 8000db6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000dba:	f7ff fa09 	bl	80001d0 <__aeabi_dsub>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4938      	ldr	r1, [pc, #224]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000dc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000dca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <Flight_Gyro_Signalen+0x15c>)
 8000dd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000dd4:	f7ff f9fc 	bl	80001d0 <__aeabi_dsub>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4931      	ldr	r1, [pc, #196]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000dde:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration
 8000de2:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000de4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <Flight_Gyro_Signalen+0x15c>)
 8000dea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000dee:	f7ff f9ef 	bl	80001d0 <__aeabi_dsub>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	492b      	ldr	r1, [pc, #172]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000df8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	gyro_roll  = gyro_axis[eeprom_data[28] & 0b00000011];
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <Flight_Gyro_Signalen+0x160>)
 8000dfe:	7f1b      	ldrb	r3, [r3, #28]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0e:	492b      	ldr	r1, [pc, #172]	; (8000ebc <Flight_Gyro_Signalen+0x164>)
 8000e10:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[28] & 0b10000000 )	{	gyro_roll *= -1;	}
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <Flight_Gyro_Signalen+0x160>)
 8000e16:	7f1b      	ldrb	r3, [r3, #28]
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da08      	bge.n	8000e30 <Flight_Gyro_Signalen+0xd8>
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <Flight_Gyro_Signalen+0x164>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	4692      	mov	sl, r2
 8000e26:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <Flight_Gyro_Signalen+0x164>)
 8000e2c:	e9c3 ab00 	strd	sl, fp, [r3]

	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <Flight_Gyro_Signalen+0x160>)
 8000e32:	7f5b      	ldrb	r3, [r3, #29]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	491f      	ldr	r1, [pc, #124]	; (8000ec0 <Flight_Gyro_Signalen+0x168>)
 8000e44:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[29] & 0b10000000 )	{	gyro_pitch *= -1;	}
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <Flight_Gyro_Signalen+0x160>)
 8000e4a:	7f5b      	ldrb	r3, [r3, #29]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da08      	bge.n	8000e64 <Flight_Gyro_Signalen+0x10c>
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <Flight_Gyro_Signalen+0x168>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	4690      	mov	r8, r2
 8000e5a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <Flight_Gyro_Signalen+0x168>)
 8000e60:	e9c3 8900 	strd	r8, r9, [r3]

	gyro_yaw   = gyro_axis[eeprom_data[30] & 0b00000011];
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <Flight_Gyro_Signalen+0x160>)
 8000e66:	7f9b      	ldrb	r3, [r3, #30]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <Flight_Gyro_Signalen+0x14c>)
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4413      	add	r3, r2
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	4913      	ldr	r1, [pc, #76]	; (8000ec4 <Flight_Gyro_Signalen+0x16c>)
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[30] & 0b10000000 )	{	gyro_yaw *= -1;		}
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <Flight_Gyro_Signalen+0x160>)
 8000e7e:	7f9b      	ldrb	r3, [r3, #30]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da08      	bge.n	8000e98 <Flight_Gyro_Signalen+0x140>
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <Flight_Gyro_Signalen+0x16c>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	4614      	mov	r4, r2
 8000e8e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <Flight_Gyro_Signalen+0x16c>)
 8000e94:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000e98:	bf00      	nop
 8000e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000386 	.word	0x20000386
 8000ea4:	200001a0 	.word	0x200001a0
 8000ea8:	20000384 	.word	0x20000384
 8000eac:	20000368 	.word	0x20000368
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	200001c8 	.word	0x200001c8
 8000eb8:	20000080 	.word	0x20000080
 8000ebc:	20000390 	.word	0x20000390
 8000ec0:	20000370 	.word	0x20000370
 8000ec4:	20000378 	.word	0x20000378

08000ec8 <Convert_Receiver_Channels>:

	pid_last_yaw_d_error = pid_error_temp;
}

int Convert_Receiver_Channels( uint8_t function )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           //What channel corresponds with the specific function
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3317      	adds	r3, #23
 8000ed6:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000  )	{	reverse = 1;	}            //Reverse channel when most significant bit is set
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	3317      	adds	r3, #23
 8000ee4:	4a43      	ldr	r2, [pc, #268]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da03      	bge.n	8000ef6 <Convert_Receiver_Channels+0x2e>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef4:	e002      	b.n	8000efc <Convert_Receiver_Channels+0x34>
	else	{	reverse = 0;	}                                                            //If the most significant is not set there is no reverse
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            //Read the actual receiver value for the corresponding function
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <Convert_Receiver_Channels+0x130>)
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	623b      	str	r3, [r7, #32]
	low 	= ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14]; 	//Store the low value for the specific receiver input channel
 8000f06:	7ffb      	ldrb	r3, [r7, #31]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	330f      	adds	r3, #15
 8000f0c:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	7ffa      	ldrb	r2, [r7, #31]
 8000f14:	3207      	adds	r2, #7
 8000f16:	0052      	lsls	r2, r2, #1
 8000f18:	4936      	ldr	r1, [pc, #216]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000f1a:	5c8a      	ldrb	r2, [r1, r2]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
	center 	= ( eeprom_data[channel * 2 - 1] << 8 )  | eeprom_data[channel * 2 - 2];	//Store the center value for the specific receiver input channel
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4a33      	ldr	r2, [pc, #204]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	7ffa      	ldrb	r2, [r7, #31]
 8000f2e:	3a01      	subs	r2, #1
 8000f30:	0052      	lsls	r2, r2, #1
 8000f32:	4930      	ldr	r1, [pc, #192]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000f34:	5c8a      	ldrb	r2, [r1, r2]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
	high 	= ( eeprom_data[channel * 2 + 7] << 8 )  | eeprom_data[channel * 2 + 6];   	//Store the high value for the specific receiver input channel
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	3307      	adds	r3, #7
 8000f40:	4a2c      	ldr	r2, [pc, #176]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	7ffa      	ldrb	r2, [r7, #31]
 8000f48:	3203      	adds	r2, #3
 8000f4a:	0052      	lsls	r2, r2, #1
 8000f4c:	4929      	ldr	r1, [pc, #164]	; (8000ff4 <Convert_Receiver_Channels+0x12c>)
 8000f4e:	5c8a      	ldrb	r2, [r1, r2]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000f54:	6a3a      	ldr	r2, [r7, #32]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	da1f      	bge.n	8000f9c <Convert_Receiver_Channels+0xd4>
	{                                             	//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                              	//Limit the lowest value to the value that was detected during setup
 8000f5c:	6a3a      	ldr	r2, [r7, #32]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	da01      	bge.n	8000f68 <Convert_Receiver_Channels+0xa0>
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);  //Calculate and scale the actual value to a 1000 - 2000us value
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f72:	fb02 f203 	mul.w	r2, r2, r3
 8000f76:	6979      	ldr	r1, [r7, #20]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	1acb      	subs	r3, r1, r3
 8000f7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f80:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                   //If the channel is reversed
 8000f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d103      	bne.n	8000f92 <Convert_Receiver_Channels+0xca>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000f90:	e02a      	b.n	8000fe8 <Convert_Receiver_Channels+0x120>
		else	{	return 1500 - difference;	}                               //If the channel is not reversed
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000f98:	3304      	adds	r3, #4
 8000f9a:	e025      	b.n	8000fe8 <Convert_Receiver_Channels+0x120>
	}
	else if(actual > center)
 8000f9c:	6a3a      	ldr	r2, [r7, #32]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dd1f      	ble.n	8000fe4 <Convert_Receiver_Channels+0x11c>
	{                                           	//The actual receiver value is higher than the center value
		if(actual > high)	{	actual = high;	}                               //Limit the lowest value to the value that was detected during setup
 8000fa4:	6a3a      	ldr	r2, [r7, #32]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dd01      	ble.n	8000fb0 <Convert_Receiver_Channels+0xe8>
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center); //Calculate and scale the actual value to a 1000 - 2000us value
 8000fb0:	6a3a      	ldr	r2, [r7, #32]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fba:	fb02 f203 	mul.w	r2, r2, r3
 8000fbe:	6939      	ldr	r1, [r7, #16]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	1acb      	subs	r3, r1, r3
 8000fc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc8:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                  	//If the channel is reversed
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <Convert_Receiver_Channels+0x114>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000fd8:	3304      	adds	r3, #4
 8000fda:	e005      	b.n	8000fe8 <Convert_Receiver_Channels+0x120>
		else	{	return 1500 + difference;	}                               //If the channel is not reversed
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000fe2:	e001      	b.n	8000fe8 <Convert_Receiver_Channels+0x120>
	}
	else	{	return 1500;	}
 8000fe4:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	372c      	adds	r7, #44	; 0x2c
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000080 	.word	0x20000080
 8000ff8:	200000a8 	.word	0x200000a8

08000ffc <L3GD20H_Init>:
//
extern bool gyro_error;


void L3GD20H_Init( void )
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af04      	add	r7, sp, #16
	uint8_t L3GD20H_WHO_AM_I_Check = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD , L3GD20H_REG_WHO_AM_I, 1, &L3GD20H_WHO_AM_I_Check, 1, 100 );
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	220f      	movs	r2, #15
 8001016:	21d7      	movs	r1, #215	; 0xd7
 8001018:	482d      	ldr	r0, [pc, #180]	; (80010d0 <L3GD20H_Init+0xd4>)
 800101a:	f003 f933 	bl	8004284 <HAL_I2C_Mem_Read>

	if ( L3GD20H_WHO_AM_I_Check == L3GD20H_WHO_AM_I )
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2bd4      	cmp	r3, #212	; 0xd4
 8001022:	d134      	bne.n	800108e <L3GD20H_Init+0x92>
	{
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL1, 1, &L3GD20H_SET_CTRL1,	1, 10 );
 8001024:	230a      	movs	r3, #10
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <L3GD20H_Init+0xd8>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2220      	movs	r2, #32
 8001034:	21d6      	movs	r1, #214	; 0xd6
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <L3GD20H_Init+0xd4>)
 8001038:	f003 f810 	bl	800405c <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL4, 1, &L3GD20H_SET_CTRL4, 1, 10 );
 800103c:	230a      	movs	r3, #10
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <L3GD20H_Init+0xdc>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2223      	movs	r2, #35	; 0x23
 800104c:	21d6      	movs	r1, #214	; 0xd6
 800104e:	4820      	ldr	r0, [pc, #128]	; (80010d0 <L3GD20H_Init+0xd4>)
 8001050:	f003 f804 	bl	800405c <HAL_I2C_Mem_Write>

		sprintf(uartTX, "                                                                                                    ");
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <L3GD20H_Init+0xe0>)
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <L3GD20H_Init+0xe4>)
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	2365      	movs	r3, #101	; 0x65
 800105e:	461a      	mov	r2, r3
 8001060:	f007 ff34 	bl	8008ecc <memcpy>
		sprintf(uartTX, "\nL3GD20H is found and settled!\n");
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <L3GD20H_Init+0xe0>)
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <L3GD20H_Init+0xe8>)
 8001068:	4614      	mov	r4, r2
 800106a:	461d      	mov	r5, r3
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	6020      	str	r0, [r4, #0]
 8001070:	6061      	str	r1, [r4, #4]
 8001072:	60a2      	str	r2, [r4, #8]
 8001074:	60e3      	str	r3, [r4, #12]
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	6120      	str	r0, [r4, #16]
 800107a:	6161      	str	r1, [r4, #20]
 800107c:	61a2      	str	r2, [r4, #24]
 800107e:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2265      	movs	r2, #101	; 0x65
 8001084:	4915      	ldr	r1, [pc, #84]	; (80010dc <L3GD20H_Init+0xe0>)
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <L3GD20H_Init+0xec>)
 8001088:	f007 f938 	bl	80082fc <HAL_UART_Transmit>
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );

		gyro_error = true;
	}
}
 800108c:	e01c      	b.n	80010c8 <L3GD20H_Init+0xcc>
		sprintf(uartTX, "                                                                                                    ");
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <L3GD20H_Init+0xe0>)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <L3GD20H_Init+0xe4>)
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	2365      	movs	r3, #101	; 0x65
 8001098:	461a      	mov	r2, r3
 800109a:	f007 ff17 	bl	8008ecc <memcpy>
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <L3GD20H_Init+0xe0>)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <L3GD20H_Init+0xf0>)
 80010a2:	4615      	mov	r5, r2
 80010a4:	461c      	mov	r4, r3
 80010a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a8:	6028      	str	r0, [r5, #0]
 80010aa:	6069      	str	r1, [r5, #4]
 80010ac:	60aa      	str	r2, [r5, #8]
 80010ae:	60eb      	str	r3, [r5, #12]
 80010b0:	cc03      	ldmia	r4!, {r0, r1}
 80010b2:	6128      	str	r0, [r5, #16]
 80010b4:	6169      	str	r1, [r5, #20]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2265      	movs	r2, #101	; 0x65
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <L3GD20H_Init+0xe0>)
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <L3GD20H_Init+0xec>)
 80010be:	f007 f91d 	bl	80082fc <HAL_UART_Transmit>
		gyro_error = true;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <L3GD20H_Init+0xf4>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	20000150 	.word	0x20000150
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000001 	.word	0x20000001
 80010dc:	200002a4 	.word	0x200002a4
 80010e0:	08008f0c 	.word	0x08008f0c
 80010e4:	08008f74 	.word	0x08008f74
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	08008f94 	.word	0x08008f94
 80010f0:	2000007c 	.word	0x2000007c

080010f4 <L3GD20H_Read_Gyro_RAW_Outputs>:

void L3GD20H_Read_Gyro_RAW_Outputs( void )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_L, 1,  &L3GD20H_OUT_X_L, 1, 100);
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	2228      	movs	r2, #40	; 0x28
 800110a:	21d7      	movs	r1, #215	; 0xd7
 800110c:	4832      	ldr	r0, [pc, #200]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800110e:	f003 f8b9 	bl	8004284 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_H, 1, 	&L3GD20H_OUT_X_H, 1, 100);
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	2229      	movs	r2, #41	; 0x29
 8001122:	21d7      	movs	r1, #215	; 0xd7
 8001124:	482c      	ldr	r0, [pc, #176]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001126:	f003 f8ad 	bl	8004284 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_L, 1,  &L3GD20H_OUT_Y_L, 1, 100);
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	222a      	movs	r2, #42	; 0x2a
 800113a:	21d7      	movs	r1, #215	; 0xd7
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800113e:	f003 f8a1 	bl	8004284 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_H, 1,  &L3GD20H_OUT_Y_H, 1, 100);
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	222b      	movs	r2, #43	; 0x2b
 8001152:	21d7      	movs	r1, #215	; 0xd7
 8001154:	4820      	ldr	r0, [pc, #128]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001156:	f003 f895 	bl	8004284 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_L, 1,  &L3GD20H_OUT_Z_L, 1, 100);
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2301      	movs	r3, #1
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	222c      	movs	r2, #44	; 0x2c
 800116a:	21d7      	movs	r1, #215	; 0xd7
 800116c:	481a      	ldr	r0, [pc, #104]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800116e:	f003 f889 	bl	8004284 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_H, 1,  &L3GD20H_OUT_Z_H, 1, 100);
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	222d      	movs	r2, #45	; 0x2d
 8001182:	21d7      	movs	r1, #215	; 0xd7
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001186:	f003 f87d 	bl	8004284 <HAL_I2C_Mem_Read>

	gX_Raw = (int16_t) (L3GD20H_OUT_X_H << 8 | L3GD20H_OUT_X_L);
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <L3GD20H_Read_Gyro_RAW_Outputs+0xfc>)
 800119e:	801a      	strh	r2, [r3, #0]
	gY_Raw = (int16_t) (L3GD20H_OUT_Y_H << 8 | L3GD20H_OUT_Y_L);
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <L3GD20H_Read_Gyro_RAW_Outputs+0x100>)
 80011b4:	801a      	strh	r2, [r3, #0]
	gZ_Raw = (int16_t) (L3GD20H_OUT_Z_H << 8 | L3GD20H_OUT_Z_L);
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <L3GD20H_Read_Gyro_RAW_Outputs+0x104>)
 80011ca:	801a      	strh	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000030 	.word	0x20000030
 80011d8:	20000150 	.word	0x20000150
 80011dc:	20000031 	.word	0x20000031
 80011e0:	20000032 	.word	0x20000032
 80011e4:	20000033 	.word	0x20000033
 80011e8:	20000034 	.word	0x20000034
 80011ec:	20000035 	.word	0x20000035
 80011f0:	20000386 	.word	0x20000386
 80011f4:	20000384 	.word	0x20000384
 80011f8:	20000368 	.word	0x20000368

080011fc <PWM_IC_Start>:
extern int receiver_input_channel_1, receiver_input_channel_2, receiver_input_channel_3, receiver_input_channel_4;
extern int receiver_input[5];


void PWM_IC_Start( void )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 8001200:	2100      	movs	r1, #0
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <PWM_IC_Start+0x10>)
 8001204:	f005 fd72 	bl	8006cec <HAL_TIM_IC_Start_IT>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000104 	.word	0x20000104

08001210 <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3);
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4);
}

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 )   // if the interrupt source is channel1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7f1b      	ldrb	r3, [r3, #28]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d158      	bne.n	80012d2 <HAL_TIM_IC_CaptureCallback+0xc2>
	{
		if ( First_Captured == false ) 												// if the first value is not captured
 8001220:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d11a      	bne.n	800125e <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			Roll_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 ); 	// read the first value
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f006 f9ca 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 8001230:	4602      	mov	r2, r0
 8001232:	4b69      	ldr	r3, [pc, #420]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001234:	601a      	str	r2, [r3, #0]
			First_Captured = true;  											// set the first captured as true
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a1a      	ldr	r2, [r3, #32]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 020a 	bic.w	r2, r2, #10
 800124a:	621a      	str	r2, [r3, #32]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a1a      	ldr	r2, [r3, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0202 	orr.w	r2, r2, #2
 800125a:	621a      	str	r2, [r3, #32]
 800125c:	e039      	b.n	80012d2 <HAL_TIM_IC_CaptureCallback+0xc2>
		}

		else if ( First_Captured == true )   // if the first is already captured
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d135      	bne.n	80012d2 <HAL_TIM_IC_CaptureCallback+0xc2>
		{
			Roll_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 );  // read second value
 8001266:	2100      	movs	r1, #0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f006 f9ab 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 800126e:	4602      	mov	r2, r0
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001272:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Roll_IC_Val2 > Roll_IC_Val1 )
 800127c:	4b57      	ldr	r3, [pc, #348]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d90b      	bls.n	80012a0 <HAL_TIM_IC_CaptureCallback+0x90>
			{
				receiver_input_channel_1 = Roll_IC_Val2 - Roll_IC_Val1;
 8001288:	4b54      	ldr	r3, [pc, #336]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001296:	601a      	str	r2, [r3, #0]
				receiver_input[1] = receiver_input_channel_1;
 8001298:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800129e:	6053      	str	r3, [r2, #4]
			}

			First_Captured = false;	// set it back to false
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING );	// set polarity to rising edge
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020a 	bic.w	r2, r2, #10
 80012b4:	621a      	str	r2, [r3, #32]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a12      	ldr	r2, [r2, #32]
 80012c0:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_1 );
 80012c2:	2100      	movs	r1, #0
 80012c4:	4848      	ldr	r0, [pc, #288]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012c6:	f005 fd7f 	bl	8006dc8 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_2 );
 80012ca:	2104      	movs	r1, #4
 80012cc:	4846      	ldr	r0, [pc, #280]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012ce:	f005 fd0d 	bl	8006cec <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2 )   // if the interrupt source is channel2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7f1b      	ldrb	r3, [r3, #28]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d158      	bne.n	800138c <HAL_TIM_IC_CaptureCallback+0x17c>
	{
		if ( First_Captured == false ) // if the first value is not captured
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11a      	bne.n	8001318 <HAL_TIM_IC_CaptureCallback+0x108>
		{
			Pitch_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 ); 	// read the first value
 80012e2:	2104      	movs	r1, #4
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f006 f96d 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80012ee:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80012f0:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a1a      	ldr	r2, [r3, #32]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001304:	621a      	str	r2, [r3, #32]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e039      	b.n	800138c <HAL_TIM_IC_CaptureCallback+0x17c>
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d135      	bne.n	800138c <HAL_TIM_IC_CaptureCallback+0x17c>
		{
			Pitch_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 );  // read second value
 8001320:	2104      	movs	r1, #4
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f006 f94e 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 8001328:	4602      	mov	r2, r0
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800132c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Pitch_IC_Val2 > Pitch_IC_Val1 )
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90b      	bls.n	800135a <HAL_TIM_IC_CaptureCallback+0x14a>
			{
				receiver_input_channel_2 = Pitch_IC_Val2 - Pitch_IC_Val1;
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	461a      	mov	r2, r3
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001350:	601a      	str	r2, [r3, #0]
				receiver_input[2] = receiver_input_channel_2;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001358:	6093      	str	r3, [r2, #8]
			}

			First_Captured = false; // set it back to false
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a12      	ldr	r2, [r2, #32]
 800137a:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_2 );
 800137c:	2104      	movs	r1, #4
 800137e:	481a      	ldr	r0, [pc, #104]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001380:	f005 fd22 	bl	8006dc8 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_3 );
 8001384:	2108      	movs	r1, #8
 8001386:	4818      	ldr	r0, [pc, #96]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001388:	f005 fcb0 	bl	8006cec <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3 )   // if the interrupt source is channel2
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7f1b      	ldrb	r3, [r3, #28]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d16d      	bne.n	8001470 <HAL_TIM_IC_CaptureCallback+0x260>
	{
		if ( First_Captured == false ) // if the first value is not captured
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12f      	bne.n	80013fc <HAL_TIM_IC_CaptureCallback+0x1ec>
		{
			Throttle_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 ); 	// read the first value
 800139c:	2108      	movs	r1, #8
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f006 f910 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80013a8:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80013be:	621a      	str	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ce:	621a      	str	r2, [r3, #32]
 80013d0:	e04e      	b.n	8001470 <HAL_TIM_IC_CaptureCallback+0x260>
 80013d2:	bf00      	nop
 80013d4:	20000036 	.word	0x20000036
 80013d8:	20000038 	.word	0x20000038
 80013dc:	2000003c 	.word	0x2000003c
 80013e0:	2000038c 	.word	0x2000038c
 80013e4:	200000a8 	.word	0x200000a8
 80013e8:	20000104 	.word	0x20000104
 80013ec:	20000040 	.word	0x20000040
 80013f0:	20000044 	.word	0x20000044
 80013f4:	20000380 	.word	0x20000380
 80013f8:	20000048 	.word	0x20000048
		}

		else if ( First_Captured == true )   // if the first is already captured
 80013fc:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x324>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d135      	bne.n	8001470 <HAL_TIM_IC_CaptureCallback+0x260>
		{
			Throttle_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 );  // read second value
 8001404:	2108      	movs	r1, #8
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f006 f8dc 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 800140c:	4602      	mov	r2, r0
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001410:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Throttle_IC_Val2 > Throttle_IC_Val1 )
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_TIM_IC_CaptureCallback+0x328>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d90b      	bls.n	800143e <HAL_TIM_IC_CaptureCallback+0x22e>
			{
				receiver_input_channel_3 = Throttle_IC_Val2 - Throttle_IC_Val1;
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_TIM_IC_CaptureCallback+0x32c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001434:	601a      	str	r2, [r3, #0]
				receiver_input[3] = receiver_input_channel_3;
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a42      	ldr	r2, [pc, #264]	; (8001544 <HAL_TIM_IC_CaptureCallback+0x334>)
 800143c:	60d3      	str	r3, [r2, #12]
			}

			First_Captured = false; // set it back to false
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001452:	621a      	str	r2, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a12      	ldr	r2, [r2, #32]
 800145e:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3 );
 8001460:	2108      	movs	r1, #8
 8001462:	4839      	ldr	r0, [pc, #228]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001464:	f005 fcb0 	bl	8006dc8 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_4 );
 8001468:	210c      	movs	r1, #12
 800146a:	4837      	ldr	r0, [pc, #220]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x338>)
 800146c:	f005 fc3e 	bl	8006cec <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_4 )   // if the interrupt source is channel2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7f1b      	ldrb	r3, [r3, #28]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d158      	bne.n	800152a <HAL_TIM_IC_CaptureCallback+0x31a>
	{
		if ( First_Captured == false ) // if the first value is not captured
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x324>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11a      	bne.n	80014b6 <HAL_TIM_IC_CaptureCallback+0x2a6>
		{
			Yaw_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_4 ); 	// read the first value
 8001480:	210c      	movs	r1, #12
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f006 f89e 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 8001488:	4602      	mov	r2, r0
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_TIM_IC_CaptureCallback+0x33c>)
 800148c:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80014a2:	621a      	str	r2, [r3, #32]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014b2:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
		}
	}
}
 80014b4:	e039      	b.n	800152a <HAL_TIM_IC_CaptureCallback+0x31a>
		else if ( First_Captured == true )   // if the first is already captured
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x324>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d135      	bne.n	800152a <HAL_TIM_IC_CaptureCallback+0x31a>
			Yaw_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80014be:	210c      	movs	r1, #12
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f006 f87f 	bl	80075c4 <HAL_TIM_ReadCapturedValue>
 80014c6:	4602      	mov	r2, r0
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x340>)
 80014ca:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
			if ( Yaw_IC_Val2 > Yaw_IC_Val1 )
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x340>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d90b      	bls.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x2e8>
				receiver_input_channel_4 = Yaw_IC_Val2 - Yaw_IC_Val1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x340>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x344>)
 80014ee:	601a      	str	r2, [r3, #0]
				receiver_input[4] = receiver_input_channel_4;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x344>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_TIM_IC_CaptureCallback+0x334>)
 80014f6:	6113      	str	r3, [r2, #16]
			First_Captured = false; // set it back to false
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x324>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800150c:	621a      	str	r2, [r3, #32]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a12      	ldr	r2, [r2, #32]
 8001518:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
 800151a:	210c      	movs	r1, #12
 800151c:	480a      	ldr	r0, [pc, #40]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x338>)
 800151e:	f005 fc53 	bl	8006dc8 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 8001522:	2100      	movs	r1, #0
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001526:	f005 fbe1 	bl	8006cec <HAL_TIM_IC_Start_IT>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000036 	.word	0x20000036
 8001538:	2000004c 	.word	0x2000004c
 800153c:	20000048 	.word	0x20000048
 8001540:	200000a0 	.word	0x200000a0
 8001544:	200000a8 	.word	0x200000a8
 8001548:	20000104 	.word	0x20000104
 800154c:	20000050 	.word	0x20000050
 8001550:	20000054 	.word	0x20000054
 8001554:	20000388 	.word	0x20000388

08001558 <PWM_Output_Start>:

#include "PWM_Output.h"


void PWM_Output_Start( void )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1);
 800155c:	2100      	movs	r1, #0
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <PWM_Output_Start+0x28>)
 8001560:	f005 fb40 	bl	8006be4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2);
 8001564:	2104      	movs	r1, #4
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <PWM_Output_Start+0x28>)
 8001568:	f005 fb3c 	bl	8006be4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_3);
 800156c:	2108      	movs	r1, #8
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <PWM_Output_Start+0x28>)
 8001570:	f005 fb38 	bl	8006be4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_4);
 8001574:	210c      	movs	r1, #12
 8001576:	4802      	ldr	r0, [pc, #8]	; (8001580 <PWM_Output_Start+0x28>)
 8001578:	f005 fb34 	bl	8006be4 <HAL_TIM_PWM_Start>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000bc 	.word	0x200000bc

08001584 <PWM_Output_Idle>:

void PWM_Output_Idle( void )
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = 1000;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <PWM_Output_Idle+0x38>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 1000;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <PWM_Output_Idle+0x38>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 1000;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <PWM_Output_Idle+0x38>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 1000;
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <PWM_Output_Idle+0x38>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200000bc 	.word	0x200000bc

080015c0 <PWM_Output_ESC_Calibration>:

void PWM_Output_ESC_Calibration( int esc_3 )
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = esc_3;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <PWM_Output_ESC_Calibration+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = esc_3;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <PWM_Output_ESC_Calibration+0x34>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = esc_3;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <PWM_Output_ESC_Calibration+0x34>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = esc_3;
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <PWM_Output_ESC_Calibration+0x34>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	200000bc 	.word	0x200000bc

080015f8 <Main_Setup>:
extern float gyro_pitch, gyro_roll, gyro_yaw;
extern int16_t gX_Raw, gY_Raw, gZ_Raw;


void Main_Setup( void )
{
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    sprintf(uartTX, "                                                                                                    ");
 80015fc:	4a8f      	ldr	r2, [pc, #572]	; (800183c <Main_Setup+0x244>)
 80015fe:	4b90      	ldr	r3, [pc, #576]	; (8001840 <Main_Setup+0x248>)
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	2365      	movs	r3, #101	; 0x65
 8001606:	461a      	mov	r2, r3
 8001608:	f007 fc60 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nMove the sticks to the center position within 10 seconds!\n");
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <Main_Setup+0x244>)
 800160e:	4a8d      	ldr	r2, [pc, #564]	; (8001844 <Main_Setup+0x24c>)
 8001610:	4614      	mov	r4, r2
 8001612:	469c      	mov	ip, r3
 8001614:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001618:	4665      	mov	r5, ip
 800161a:	4626      	mov	r6, r4
 800161c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800161e:	6028      	str	r0, [r5, #0]
 8001620:	6069      	str	r1, [r5, #4]
 8001622:	60aa      	str	r2, [r5, #8]
 8001624:	60eb      	str	r3, [r5, #12]
 8001626:	3410      	adds	r4, #16
 8001628:	f10c 0c10 	add.w	ip, ip, #16
 800162c:	4574      	cmp	r4, lr
 800162e:	d1f3      	bne.n	8001618 <Main_Setup+0x20>
 8001630:	4665      	mov	r5, ip
 8001632:	4623      	mov	r3, r4
 8001634:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001636:	6028      	str	r0, [r5, #0]
 8001638:	6069      	str	r1, [r5, #4]
 800163a:	60aa      	str	r2, [r5, #8]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	2265      	movs	r2, #101	; 0x65
 8001640:	497e      	ldr	r1, [pc, #504]	; (800183c <Main_Setup+0x244>)
 8001642:	4881      	ldr	r0, [pc, #516]	; (8001848 <Main_Setup+0x250>)
 8001644:	f006 fe5a 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001648:	f242 7010 	movw	r0, #10000	; 0x2710
 800164c:	f001 fffa 	bl	8003644 <HAL_Delay>

    //Store the central stick positions
    center_channel_1 = receiver_input_channel_1;
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <Main_Setup+0x254>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a7e      	ldr	r2, [pc, #504]	; (8001850 <Main_Setup+0x258>)
 8001656:	6013      	str	r3, [r2, #0]
    center_channel_2 = receiver_input_channel_2;
 8001658:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <Main_Setup+0x25c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <Main_Setup+0x260>)
 800165e:	6013      	str	r3, [r2, #0]
    center_channel_3 = receiver_input_channel_3;
 8001660:	4b7e      	ldr	r3, [pc, #504]	; (800185c <Main_Setup+0x264>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7e      	ldr	r2, [pc, #504]	; (8001860 <Main_Setup+0x268>)
 8001666:	6013      	str	r3, [r2, #0]
    center_channel_4 = receiver_input_channel_4;
 8001668:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <Main_Setup+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <Main_Setup+0x270>)
 800166e:	6013      	str	r3, [r2, #0]


    sprintf(uartTX, "                                                                                                    ");
 8001670:	4a72      	ldr	r2, [pc, #456]	; (800183c <Main_Setup+0x244>)
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <Main_Setup+0x248>)
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	2365      	movs	r3, #101	; 0x65
 800167a:	461a      	mov	r2, r3
 800167c:	f007 fc26 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nMove the sticks to min & max positions then back to center within 10 seconds!\n");
 8001680:	4a6e      	ldr	r2, [pc, #440]	; (800183c <Main_Setup+0x244>)
 8001682:	4b7a      	ldr	r3, [pc, #488]	; (800186c <Main_Setup+0x274>)
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	2350      	movs	r3, #80	; 0x50
 800168a:	461a      	mov	r2, r3
 800168c:	f007 fc1e 	bl	8008ecc <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	2265      	movs	r2, #101	; 0x65
 8001694:	4969      	ldr	r1, [pc, #420]	; (800183c <Main_Setup+0x244>)
 8001696:	486c      	ldr	r0, [pc, #432]	; (8001848 <Main_Setup+0x250>)
 8001698:	f006 fe30 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 1000 );
 800169c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a0:	f001 ffd0 	bl	8003644 <HAL_Delay>
    //Register the min and max values of the receiver channels
    Register_Min_Max();
 80016a4:	f000 fe5c 	bl	8002360 <Register_Min_Max>


    sprintf(uartTX, "                                                                                                    ");
 80016a8:	4a64      	ldr	r2, [pc, #400]	; (800183c <Main_Setup+0x244>)
 80016aa:	4b65      	ldr	r3, [pc, #404]	; (8001840 <Main_Setup+0x248>)
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	2365      	movs	r3, #101	; 0x65
 80016b2:	461a      	mov	r2, r3
 80016b4:	f007 fc0a 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nMove the throttle stick to full throttle within 10 seconds!\n");
 80016b8:	4b60      	ldr	r3, [pc, #384]	; (800183c <Main_Setup+0x244>)
 80016ba:	4a6d      	ldr	r2, [pc, #436]	; (8001870 <Main_Setup+0x278>)
 80016bc:	4614      	mov	r4, r2
 80016be:	469c      	mov	ip, r3
 80016c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80016c4:	4665      	mov	r5, ip
 80016c6:	4626      	mov	r6, r4
 80016c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016ca:	6028      	str	r0, [r5, #0]
 80016cc:	6069      	str	r1, [r5, #4]
 80016ce:	60aa      	str	r2, [r5, #8]
 80016d0:	60eb      	str	r3, [r5, #12]
 80016d2:	3410      	adds	r4, #16
 80016d4:	f10c 0c10 	add.w	ip, ip, #16
 80016d8:	4574      	cmp	r4, lr
 80016da:	d1f3      	bne.n	80016c4 <Main_Setup+0xcc>
 80016dc:	4665      	mov	r5, ip
 80016de:	4623      	mov	r3, r4
 80016e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80016e2:	6028      	str	r0, [r5, #0]
 80016e4:	6069      	str	r1, [r5, #4]
 80016e6:	60aa      	str	r2, [r5, #8]
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	2265      	movs	r2, #101	; 0x65
 80016f0:	4952      	ldr	r1, [pc, #328]	; (800183c <Main_Setup+0x244>)
 80016f2:	4855      	ldr	r0, [pc, #340]	; (8001848 <Main_Setup+0x250>)
 80016f4:	f006 fe02 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 80016f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80016fc:	f001 ffa2 	bl	8003644 <HAL_Delay>
    Check_Receiver_Inputs( 1 );			//	Move the throttle stick to full throttle and back to center within 10 seconds
 8001700:	2001      	movs	r0, #1
 8001702:	f000 ff33 	bl	800256c <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 8001706:	4a4d      	ldr	r2, [pc, #308]	; (800183c <Main_Setup+0x244>)
 8001708:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <Main_Setup+0x248>)
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	2365      	movs	r3, #101	; 0x65
 8001710:	461a      	mov	r2, r3
 8001712:	f007 fbdb 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nMove the roll stick to simulate left wing up within 10 seconds!\n");
 8001716:	4a49      	ldr	r2, [pc, #292]	; (800183c <Main_Setup+0x244>)
 8001718:	4b56      	ldr	r3, [pc, #344]	; (8001874 <Main_Setup+0x27c>)
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	2342      	movs	r3, #66	; 0x42
 8001720:	461a      	mov	r2, r3
 8001722:	f007 fbd3 	bl	8008ecc <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	2265      	movs	r2, #101	; 0x65
 800172a:	4944      	ldr	r1, [pc, #272]	; (800183c <Main_Setup+0x244>)
 800172c:	4846      	ldr	r0, [pc, #280]	; (8001848 <Main_Setup+0x250>)
 800172e:	f006 fde5 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001732:	f242 7010 	movw	r0, #10000	; 0x2710
 8001736:	f001 ff85 	bl	8003644 <HAL_Delay>
    Check_Receiver_Inputs( 2 );			//	Move the roll stick to simulate left wing up and back to center within 10 seconds
 800173a:	2002      	movs	r0, #2
 800173c:	f000 ff16 	bl	800256c <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 8001740:	4a3e      	ldr	r2, [pc, #248]	; (800183c <Main_Setup+0x244>)
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <Main_Setup+0x248>)
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	2365      	movs	r3, #101	; 0x65
 800174a:	461a      	mov	r2, r3
 800174c:	f007 fbbe 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nMove the pitch stick to simulate nose up within 10 seconds!\n");
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <Main_Setup+0x244>)
 8001752:	4a49      	ldr	r2, [pc, #292]	; (8001878 <Main_Setup+0x280>)
 8001754:	4614      	mov	r4, r2
 8001756:	469c      	mov	ip, r3
 8001758:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800175c:	4665      	mov	r5, ip
 800175e:	4626      	mov	r6, r4
 8001760:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001762:	6028      	str	r0, [r5, #0]
 8001764:	6069      	str	r1, [r5, #4]
 8001766:	60aa      	str	r2, [r5, #8]
 8001768:	60eb      	str	r3, [r5, #12]
 800176a:	3410      	adds	r4, #16
 800176c:	f10c 0c10 	add.w	ip, ip, #16
 8001770:	4574      	cmp	r4, lr
 8001772:	d1f3      	bne.n	800175c <Main_Setup+0x164>
 8001774:	4665      	mov	r5, ip
 8001776:	4623      	mov	r3, r4
 8001778:	cb07      	ldmia	r3!, {r0, r1, r2}
 800177a:	6028      	str	r0, [r5, #0]
 800177c:	6069      	str	r1, [r5, #4]
 800177e:	60aa      	str	r2, [r5, #8]
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	2265      	movs	r2, #101	; 0x65
 8001788:	492c      	ldr	r1, [pc, #176]	; (800183c <Main_Setup+0x244>)
 800178a:	482f      	ldr	r0, [pc, #188]	; (8001848 <Main_Setup+0x250>)
 800178c:	f006 fdb6 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001790:	f242 7010 	movw	r0, #10000	; 0x2710
 8001794:	f001 ff56 	bl	8003644 <HAL_Delay>
    Check_Receiver_Inputs( 3 );			//	Move the pitch stick to simulate left wing up and back to center within 10 seconds
 8001798:	2003      	movs	r0, #3
 800179a:	f000 fee7 	bl	800256c <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 800179e:	4a27      	ldr	r2, [pc, #156]	; (800183c <Main_Setup+0x244>)
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <Main_Setup+0x248>)
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	2365      	movs	r3, #101	; 0x65
 80017a8:	461a      	mov	r2, r3
 80017aa:	f007 fb8f 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nMove the yaw stick to simulate nose right within 10 seconds!\n");
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <Main_Setup+0x244>)
 80017b0:	4a32      	ldr	r2, [pc, #200]	; (800187c <Main_Setup+0x284>)
 80017b2:	4615      	mov	r5, r2
 80017b4:	469c      	mov	ip, r3
 80017b6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80017ba:	4664      	mov	r4, ip
 80017bc:	462e      	mov	r6, r5
 80017be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017c0:	6020      	str	r0, [r4, #0]
 80017c2:	6061      	str	r1, [r4, #4]
 80017c4:	60a2      	str	r2, [r4, #8]
 80017c6:	60e3      	str	r3, [r4, #12]
 80017c8:	3510      	adds	r5, #16
 80017ca:	f10c 0c10 	add.w	ip, ip, #16
 80017ce:	4575      	cmp	r5, lr
 80017d0:	d1f3      	bne.n	80017ba <Main_Setup+0x1c2>
 80017d2:	4664      	mov	r4, ip
 80017d4:	462b      	mov	r3, r5
 80017d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017d8:	6020      	str	r0, [r4, #0]
 80017da:	6061      	str	r1, [r4, #4]
 80017dc:	60a2      	str	r2, [r4, #8]
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	789b      	ldrb	r3, [r3, #2]
 80017e2:	81a2      	strh	r2, [r4, #12]
 80017e4:	73a3      	strb	r3, [r4, #14]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	2265      	movs	r2, #101	; 0x65
 80017ea:	4914      	ldr	r1, [pc, #80]	; (800183c <Main_Setup+0x244>)
 80017ec:	4816      	ldr	r0, [pc, #88]	; (8001848 <Main_Setup+0x250>)
 80017ee:	f006 fd85 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 80017f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80017f6:	f001 ff25 	bl	8003644 <HAL_Delay>
    Check_Receiver_Inputs( 4 );			//	Move the yaw stick to simulate nose right and back to center within 10 seconds
 80017fa:	2004      	movs	r0, #4
 80017fc:	f000 feb6 	bl	800256c <Check_Receiver_Inputs>


    sprintf(uartTX, "                                                                                                    ");
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <Main_Setup+0x244>)
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <Main_Setup+0x248>)
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	2365      	movs	r3, #101	; 0x65
 800180a:	461a      	mov	r2, r3
 800180c:	f007 fb5e 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nTaking multiple gyro data samples (calibration) during ~8 seconds!\n");
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <Main_Setup+0x244>)
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <Main_Setup+0x288>)
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	2345      	movs	r3, #69	; 0x45
 800181a:	461a      	mov	r2, r3
 800181c:	f007 fb56 	bl	8008ecc <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	2265      	movs	r2, #101	; 0x65
 8001824:	4905      	ldr	r1, [pc, #20]	; (800183c <Main_Setup+0x244>)
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <Main_Setup+0x250>)
 8001828:	f006 fd68 	bl	80082fc <HAL_UART_Transmit>
    HAL_Delay( 5000 );
 800182c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001830:	f001 ff08 	bl	8003644 <HAL_Delay>
	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <Main_Setup+0x28c>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e04d      	b.n	80018d8 <Main_Setup+0x2e0>
 800183c:	200002a4 	.word	0x200002a4
 8001840:	08008fac 	.word	0x08008fac
 8001844:	08009014 	.word	0x08009014
 8001848:	200001f8 	.word	0x200001f8
 800184c:	2000038c 	.word	0x2000038c
 8001850:	2000035c 	.word	0x2000035c
 8001854:	20000380 	.word	0x20000380
 8001858:	20000328 	.word	0x20000328
 800185c:	200000a0 	.word	0x200000a0
 8001860:	2000034c 	.word	0x2000034c
 8001864:	20000388 	.word	0x20000388
 8001868:	20000314 	.word	0x20000314
 800186c:	08009050 	.word	0x08009050
 8001870:	080090a0 	.word	0x080090a0
 8001874:	080090e0 	.word	0x080090e0
 8001878:	08009124 	.word	0x08009124
 800187c:	08009164 	.word	0x08009164
 8001880:	080091a4 	.word	0x080091a4
 8001884:	2000002c 	.word	0x2000002c
	{              													//Take 2000 readings for calibration.
		Setup_Gyro_Signalen();                          	//Read the gyro output.
 8001888:	f000 fb52 	bl	8001f30 <Setup_Gyro_Signalen>

		gyro_roll_cal += gyro_roll;                               	//Ad roll value to gyro_roll_cal.
 800188c:	4bab      	ldr	r3, [pc, #684]	; (8001b3c <Main_Setup+0x544>)
 800188e:	ed93 7a00 	vldr	s14, [r3]
 8001892:	4bab      	ldr	r3, [pc, #684]	; (8001b40 <Main_Setup+0x548>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	4ba7      	ldr	r3, [pc, #668]	; (8001b3c <Main_Setup+0x544>)
 800189e:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch_cal += gyro_pitch;                              	//Ad pitch value to gyro_pitch_cal.
 80018a2:	4ba8      	ldr	r3, [pc, #672]	; (8001b44 <Main_Setup+0x54c>)
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	4ba7      	ldr	r3, [pc, #668]	; (8001b48 <Main_Setup+0x550>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	4ba4      	ldr	r3, [pc, #656]	; (8001b44 <Main_Setup+0x54c>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw_cal += gyro_yaw;                                  	//Ad yaw value to gyro_yaw_cal.
 80018b8:	4ba4      	ldr	r3, [pc, #656]	; (8001b4c <Main_Setup+0x554>)
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	4ba4      	ldr	r3, [pc, #656]	; (8001b50 <Main_Setup+0x558>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	4ba0      	ldr	r3, [pc, #640]	; (8001b4c <Main_Setup+0x554>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 80018ce:	4ba1      	ldr	r3, [pc, #644]	; (8001b54 <Main_Setup+0x55c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a9f      	ldr	r2, [pc, #636]	; (8001b54 <Main_Setup+0x55c>)
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b9e      	ldr	r3, [pc, #632]	; (8001b54 <Main_Setup+0x55c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018e0:	dbd2      	blt.n	8001888 <Main_Setup+0x290>
	}

	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_roll_cal /= 2000;                                       //Divide the roll total by 2000.
 80018e2:	4b96      	ldr	r3, [pc, #600]	; (8001b3c <Main_Setup+0x544>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8001b58 <Main_Setup+0x560>
 80018ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <Main_Setup+0x544>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch_cal /= 2000;                                      //Divide the pitch total by 2000.
 80018f6:	4b93      	ldr	r3, [pc, #588]	; (8001b44 <Main_Setup+0x54c>)
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001b58 <Main_Setup+0x560>
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <Main_Setup+0x54c>)
 8001906:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw_cal /= 2000;                                        //Divide the yaw total by 2000.
 800190a:	4b90      	ldr	r3, [pc, #576]	; (8001b4c <Main_Setup+0x554>)
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001b58 <Main_Setup+0x560>
 8001914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <Main_Setup+0x554>)
 800191a:	edc3 7a00 	vstr	s15, [r3]


    sprintf(uartTX, "                                                                                                    ");
 800191e:	4a8f      	ldr	r2, [pc, #572]	; (8001b5c <Main_Setup+0x564>)
 8001920:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <Main_Setup+0x568>)
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	2365      	movs	r3, #101	; 0x65
 8001928:	461a      	mov	r2, r3
 800192a:	f007 facf 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nLift the left side of the quadcopter to a 45 degree angle within 5 seconds!\n");
 800192e:	4a8b      	ldr	r2, [pc, #556]	; (8001b5c <Main_Setup+0x564>)
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <Main_Setup+0x56c>)
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	234e      	movs	r3, #78	; 0x4e
 8001938:	461a      	mov	r2, r3
 800193a:	f007 fac7 	bl	8008ecc <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	2265      	movs	r2, #101	; 0x65
 8001942:	4986      	ldr	r1, [pc, #536]	; (8001b5c <Main_Setup+0x564>)
 8001944:	4888      	ldr	r0, [pc, #544]	; (8001b68 <Main_Setup+0x570>)
 8001946:	f006 fcd9 	bl	80082fc <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 800194a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800194e:	f001 fe79 	bl	8003644 <HAL_Delay>
	Check_Gyro_Axes( 1 );		//	Lift the left side of the quadcopter to a 45 degree angle within 10 seconds
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fb4c 	bl	8001ff0 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 8001958:	4a80      	ldr	r2, [pc, #512]	; (8001b5c <Main_Setup+0x564>)
 800195a:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <Main_Setup+0x568>)
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	2365      	movs	r3, #101	; 0x65
 8001962:	461a      	mov	r2, r3
 8001964:	f007 fab2 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nLift the nose of the quadcopter to a 45 degree angle within 5 seconds!\n");
 8001968:	4a7c      	ldr	r2, [pc, #496]	; (8001b5c <Main_Setup+0x564>)
 800196a:	4b80      	ldr	r3, [pc, #512]	; (8001b6c <Main_Setup+0x574>)
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	2349      	movs	r3, #73	; 0x49
 8001972:	461a      	mov	r2, r3
 8001974:	f007 faaa 	bl	8008ecc <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001978:	2364      	movs	r3, #100	; 0x64
 800197a:	2265      	movs	r2, #101	; 0x65
 800197c:	4977      	ldr	r1, [pc, #476]	; (8001b5c <Main_Setup+0x564>)
 800197e:	487a      	ldr	r0, [pc, #488]	; (8001b68 <Main_Setup+0x570>)
 8001980:	f006 fcbc 	bl	80082fc <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 8001984:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001988:	f001 fe5c 	bl	8003644 <HAL_Delay>
	Check_Gyro_Axes( 2 );		//	Lift the nose of the quadcopter to a 45 degree angle within 10 seconds
 800198c:	2002      	movs	r0, #2
 800198e:	f000 fb2f 	bl	8001ff0 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 8001992:	4a72      	ldr	r2, [pc, #456]	; (8001b5c <Main_Setup+0x564>)
 8001994:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <Main_Setup+0x568>)
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	2365      	movs	r3, #101	; 0x65
 800199c:	461a      	mov	r2, r3
 800199e:	f007 fa95 	bl	8008ecc <memcpy>
    sprintf(uartTX, "\nRotate the nose of the quadcopter 45 degree to the right within 5 seconds!\n");
 80019a2:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <Main_Setup+0x564>)
 80019a4:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <Main_Setup+0x578>)
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	234d      	movs	r3, #77	; 0x4d
 80019ac:	461a      	mov	r2, r3
 80019ae:	f007 fa8d 	bl	8008ecc <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80019b2:	2364      	movs	r3, #100	; 0x64
 80019b4:	2265      	movs	r2, #101	; 0x65
 80019b6:	4969      	ldr	r1, [pc, #420]	; (8001b5c <Main_Setup+0x564>)
 80019b8:	486b      	ldr	r0, [pc, #428]	; (8001b68 <Main_Setup+0x570>)
 80019ba:	f006 fc9f 	bl	80082fc <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 80019be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019c2:	f001 fe3f 	bl	8003644 <HAL_Delay>
	Check_Gyro_Axes( 3 );		//	Rotate the nose of the quadcopter 45 degree to the right within 10 seconds
 80019c6:	2003      	movs	r0, #3
 80019c8:	f000 fb12 	bl	8001ff0 <Check_Gyro_Axes>

    eeprom_data[0]  = center_channel_1 & 0b11111111;
 80019cc:	4b69      	ldr	r3, [pc, #420]	; (8001b74 <Main_Setup+0x57c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <Main_Setup+0x580>)
 80019d4:	701a      	strb	r2, [r3, #0]
    eeprom_data[1]  = center_channel_1 >> 8;
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <Main_Setup+0x57c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	121b      	asrs	r3, r3, #8
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <Main_Setup+0x580>)
 80019e0:	705a      	strb	r2, [r3, #1]
    eeprom_data[2]  = center_channel_2 & 0b11111111;
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <Main_Setup+0x584>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <Main_Setup+0x580>)
 80019ea:	709a      	strb	r2, [r3, #2]
    eeprom_data[3]  = center_channel_2 >> 8;
 80019ec:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <Main_Setup+0x584>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	121b      	asrs	r3, r3, #8
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <Main_Setup+0x580>)
 80019f6:	70da      	strb	r2, [r3, #3]
    eeprom_data[4]  = center_channel_3 & 0b11111111;
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <Main_Setup+0x588>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <Main_Setup+0x580>)
 8001a00:	711a      	strb	r2, [r3, #4]
    eeprom_data[5]  = center_channel_3 >> 8;
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <Main_Setup+0x588>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	121b      	asrs	r3, r3, #8
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	; (8001b78 <Main_Setup+0x580>)
 8001a0c:	715a      	strb	r2, [r3, #5]
    eeprom_data[6]  = center_channel_4 & 0b11111111;
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <Main_Setup+0x58c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <Main_Setup+0x580>)
 8001a16:	719a      	strb	r2, [r3, #6]
    eeprom_data[7]  = center_channel_4 >> 8;
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <Main_Setup+0x58c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	121b      	asrs	r3, r3, #8
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <Main_Setup+0x580>)
 8001a22:	71da      	strb	r2, [r3, #7]
    eeprom_data[8]  = high_channel_1 & 0b11111111;
 8001a24:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <Main_Setup+0x590>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <Main_Setup+0x580>)
 8001a2c:	721a      	strb	r2, [r3, #8]
    eeprom_data[9]  = high_channel_1 >> 8;
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <Main_Setup+0x590>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	121b      	asrs	r3, r3, #8
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <Main_Setup+0x580>)
 8001a38:	725a      	strb	r2, [r3, #9]
    eeprom_data[10] = high_channel_2 & 0b11111111;
 8001a3a:	4b54      	ldr	r3, [pc, #336]	; (8001b8c <Main_Setup+0x594>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <Main_Setup+0x580>)
 8001a42:	729a      	strb	r2, [r3, #10]
    eeprom_data[11] = high_channel_2 >> 8;
 8001a44:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <Main_Setup+0x594>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	121b      	asrs	r3, r3, #8
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <Main_Setup+0x580>)
 8001a4e:	72da      	strb	r2, [r3, #11]
    eeprom_data[12] = high_channel_3 & 0b11111111;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <Main_Setup+0x598>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <Main_Setup+0x580>)
 8001a58:	731a      	strb	r2, [r3, #12]
    eeprom_data[13] = high_channel_3 >> 8;
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <Main_Setup+0x598>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	121b      	asrs	r3, r3, #8
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <Main_Setup+0x580>)
 8001a64:	735a      	strb	r2, [r3, #13]
    eeprom_data[14] = high_channel_4 & 0b11111111;
 8001a66:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <Main_Setup+0x59c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <Main_Setup+0x580>)
 8001a6e:	739a      	strb	r2, [r3, #14]
    eeprom_data[15] = high_channel_4 >> 8;
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <Main_Setup+0x59c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	121b      	asrs	r3, r3, #8
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <Main_Setup+0x580>)
 8001a7a:	73da      	strb	r2, [r3, #15]
    eeprom_data[16] = low_channel_1 & 0b11111111;
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <Main_Setup+0x5a0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <Main_Setup+0x580>)
 8001a84:	741a      	strb	r2, [r3, #16]
    eeprom_data[17] = low_channel_1 >> 8;
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <Main_Setup+0x5a0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	121b      	asrs	r3, r3, #8
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <Main_Setup+0x580>)
 8001a90:	745a      	strb	r2, [r3, #17]
    eeprom_data[18] = low_channel_2 & 0b11111111;
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <Main_Setup+0x5a4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <Main_Setup+0x580>)
 8001a9a:	749a      	strb	r2, [r3, #18]
    eeprom_data[19] = low_channel_2 >> 8;
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <Main_Setup+0x5a4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	121b      	asrs	r3, r3, #8
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <Main_Setup+0x580>)
 8001aa6:	74da      	strb	r2, [r3, #19]
    eeprom_data[20] = low_channel_3 & 0b11111111;
 8001aa8:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <Main_Setup+0x5a8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <Main_Setup+0x580>)
 8001ab0:	751a      	strb	r2, [r3, #20]
    eeprom_data[21] = low_channel_3 >> 8;
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <Main_Setup+0x5a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	121b      	asrs	r3, r3, #8
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <Main_Setup+0x580>)
 8001abc:	755a      	strb	r2, [r3, #21]
    eeprom_data[22] = low_channel_4 & 0b11111111;
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <Main_Setup+0x5ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <Main_Setup+0x580>)
 8001ac6:	759a      	strb	r2, [r3, #22]
    eeprom_data[23] = low_channel_4 >> 8;
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <Main_Setup+0x5ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	121b      	asrs	r3, r3, #8
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <Main_Setup+0x580>)
 8001ad2:	75da      	strb	r2, [r3, #23]
    eeprom_data[24] = channel_1_assign;
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <Main_Setup+0x5b0>)
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <Main_Setup+0x580>)
 8001ada:	761a      	strb	r2, [r3, #24]
    eeprom_data[25] = channel_2_assign;
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <Main_Setup+0x5b4>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <Main_Setup+0x580>)
 8001ae2:	765a      	strb	r2, [r3, #25]
    eeprom_data[26] = channel_3_assign;
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <Main_Setup+0x5b8>)
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <Main_Setup+0x580>)
 8001aea:	769a      	strb	r2, [r3, #26]
    eeprom_data[27] = channel_4_assign;
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <Main_Setup+0x5bc>)
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <Main_Setup+0x580>)
 8001af2:	76da      	strb	r2, [r3, #27]
    eeprom_data[28] = roll_axis;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <Main_Setup+0x5c0>)
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <Main_Setup+0x580>)
 8001afa:	771a      	strb	r2, [r3, #28]
    eeprom_data[29] = pitch_axis;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <Main_Setup+0x5c4>)
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <Main_Setup+0x580>)
 8001b02:	775a      	strb	r2, [r3, #29]
    eeprom_data[30] = yaw_axis;
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <Main_Setup+0x5c8>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <Main_Setup+0x580>)
 8001b0a:	779a      	strb	r2, [r3, #30]
	eeprom_data[31] = 92;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <Main_Setup+0x580>)
 8001b0e:	225c      	movs	r2, #92	; 0x5c
 8001b10:	77da      	strb	r2, [r3, #31]


	if( eeprom_data[31] == 92 /* && eeprom_data[28] == 2 && eeprom_data[29] == 1 && eeprom_data[30] == 131 */ )
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <Main_Setup+0x580>)
 8001b14:	7fdb      	ldrb	r3, [r3, #31]
 8001b16:	2b5c      	cmp	r3, #92	; 0x5c
 8001b18:	f040 814e 	bne.w	8001db8 <Main_Setup+0x7c0>
	{
	    sprintf(uartTX, "                                                                                                    ");
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <Main_Setup+0x564>)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <Main_Setup+0x568>)
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	2365      	movs	r3, #101	; 0x65
 8001b26:	461a      	mov	r2, r3
 8001b28:	f007 f9d0 	bl	8008ecc <memcpy>
	    sprintf(uartTX, "\nValues look good! Saving data to the flash.....!\n");
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <Main_Setup+0x564>)
 8001b2e:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <Main_Setup+0x5cc>)
 8001b30:	4614      	mov	r4, r2
 8001b32:	469c      	mov	ip, r3
 8001b34:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b38:	e046      	b.n	8001bc8 <Main_Setup+0x5d0>
 8001b3a:	bf00      	nop
 8001b3c:	2000030c 	.word	0x2000030c
 8001b40:	20000390 	.word	0x20000390
 8001b44:	20000338 	.word	0x20000338
 8001b48:	20000370 	.word	0x20000370
 8001b4c:	20000318 	.word	0x20000318
 8001b50:	20000378 	.word	0x20000378
 8001b54:	2000002c 	.word	0x2000002c
 8001b58:	44fa0000 	.word	0x44fa0000
 8001b5c:	200002a4 	.word	0x200002a4
 8001b60:	08008fac 	.word	0x08008fac
 8001b64:	080091ec 	.word	0x080091ec
 8001b68:	200001f8 	.word	0x200001f8
 8001b6c:	0800923c 	.word	0x0800923c
 8001b70:	08009288 	.word	0x08009288
 8001b74:	2000035c 	.word	0x2000035c
 8001b78:	2000005c 	.word	0x2000005c
 8001b7c:	20000328 	.word	0x20000328
 8001b80:	2000034c 	.word	0x2000034c
 8001b84:	20000314 	.word	0x20000314
 8001b88:	2000032c 	.word	0x2000032c
 8001b8c:	20000364 	.word	0x20000364
 8001b90:	20000340 	.word	0x20000340
 8001b94:	20000354 	.word	0x20000354
 8001b98:	20000348 	.word	0x20000348
 8001b9c:	20000330 	.word	0x20000330
 8001ba0:	20000310 	.word	0x20000310
 8001ba4:	20000358 	.word	0x20000358
 8001ba8:	20000351 	.word	0x20000351
 8001bac:	20000335 	.word	0x20000335
 8001bb0:	20000344 	.word	0x20000344
 8001bb4:	20000350 	.word	0x20000350
 8001bb8:	20000361 	.word	0x20000361
 8001bbc:	20000360 	.word	0x20000360
 8001bc0:	20000334 	.word	0x20000334
 8001bc4:	080092d8 	.word	0x080092d8
 8001bc8:	4665      	mov	r5, ip
 8001bca:	4626      	mov	r6, r4
 8001bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bce:	6028      	str	r0, [r5, #0]
 8001bd0:	6069      	str	r1, [r5, #4]
 8001bd2:	60aa      	str	r2, [r5, #8]
 8001bd4:	60eb      	str	r3, [r5, #12]
 8001bd6:	3410      	adds	r4, #16
 8001bd8:	f10c 0c10 	add.w	ip, ip, #16
 8001bdc:	4574      	cmp	r4, lr
 8001bde:	d1f3      	bne.n	8001bc8 <Main_Setup+0x5d0>
 8001be0:	4663      	mov	r3, ip
 8001be2:	4622      	mov	r2, r4
 8001be4:	8811      	ldrh	r1, [r2, #0]
 8001be6:	7892      	ldrb	r2, [r2, #2]
 8001be8:	8019      	strh	r1, [r3, #0]
 8001bea:	709a      	strb	r2, [r3, #2]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001bec:	2364      	movs	r3, #100	; 0x64
 8001bee:	2265      	movs	r2, #101	; 0x65
 8001bf0:	49a7      	ldr	r1, [pc, #668]	; (8001e90 <Main_Setup+0x898>)
 8001bf2:	48a8      	ldr	r0, [pc, #672]	; (8001e94 <Main_Setup+0x89c>)
 8001bf4:	f006 fb82 	bl	80082fc <HAL_UART_Transmit>


		Flash_ErasePage( 0x0803F800 );
 8001bf8:	48a7      	ldr	r0, [pc, #668]	; (8001e98 <Main_Setup+0x8a0>)
 8001bfa:	f7fe ffb5 	bl	8000b68 <Flash_ErasePage>
																				// EEPROM Array to Flash
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  0, &eeprom_data[0]);
 8001bfe:	4ba7      	ldr	r3, [pc, #668]	; (8001e9c <Main_Setup+0x8a4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	49a5      	ldr	r1, [pc, #660]	; (8001e98 <Main_Setup+0x8a0>)
 8001c04:	207f      	movs	r0, #127	; 0x7f
 8001c06:	f7fe ffbe 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  1, &eeprom_data[1]);
 8001c0a:	4ba5      	ldr	r3, [pc, #660]	; (8001ea0 <Main_Setup+0x8a8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	49a2      	ldr	r1, [pc, #648]	; (8001e98 <Main_Setup+0x8a0>)
 8001c10:	207f      	movs	r0, #127	; 0x7f
 8001c12:	f7fe ffb8 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  2, &eeprom_data[2]);
 8001c16:	4ba3      	ldr	r3, [pc, #652]	; (8001ea4 <Main_Setup+0x8ac>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	499f      	ldr	r1, [pc, #636]	; (8001e98 <Main_Setup+0x8a0>)
 8001c1c:	207f      	movs	r0, #127	; 0x7f
 8001c1e:	f7fe ffb2 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  3, &eeprom_data[3]);
 8001c22:	4ba1      	ldr	r3, [pc, #644]	; (8001ea8 <Main_Setup+0x8b0>)
 8001c24:	2203      	movs	r2, #3
 8001c26:	499c      	ldr	r1, [pc, #624]	; (8001e98 <Main_Setup+0x8a0>)
 8001c28:	207f      	movs	r0, #127	; 0x7f
 8001c2a:	f7fe ffac 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  4, &eeprom_data[4]);
 8001c2e:	4b9f      	ldr	r3, [pc, #636]	; (8001eac <Main_Setup+0x8b4>)
 8001c30:	2204      	movs	r2, #4
 8001c32:	4999      	ldr	r1, [pc, #612]	; (8001e98 <Main_Setup+0x8a0>)
 8001c34:	207f      	movs	r0, #127	; 0x7f
 8001c36:	f7fe ffa6 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  5, &eeprom_data[5]);
 8001c3a:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <Main_Setup+0x8b8>)
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	4996      	ldr	r1, [pc, #600]	; (8001e98 <Main_Setup+0x8a0>)
 8001c40:	207f      	movs	r0, #127	; 0x7f
 8001c42:	f7fe ffa0 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  6, &eeprom_data[6]);
 8001c46:	4b9b      	ldr	r3, [pc, #620]	; (8001eb4 <Main_Setup+0x8bc>)
 8001c48:	2206      	movs	r2, #6
 8001c4a:	4993      	ldr	r1, [pc, #588]	; (8001e98 <Main_Setup+0x8a0>)
 8001c4c:	207f      	movs	r0, #127	; 0x7f
 8001c4e:	f7fe ff9a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  7, &eeprom_data[7]);
 8001c52:	4b99      	ldr	r3, [pc, #612]	; (8001eb8 <Main_Setup+0x8c0>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	4990      	ldr	r1, [pc, #576]	; (8001e98 <Main_Setup+0x8a0>)
 8001c58:	207f      	movs	r0, #127	; 0x7f
 8001c5a:	f7fe ff94 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  8, &eeprom_data[8]);
 8001c5e:	4b97      	ldr	r3, [pc, #604]	; (8001ebc <Main_Setup+0x8c4>)
 8001c60:	2208      	movs	r2, #8
 8001c62:	498d      	ldr	r1, [pc, #564]	; (8001e98 <Main_Setup+0x8a0>)
 8001c64:	207f      	movs	r0, #127	; 0x7f
 8001c66:	f7fe ff8e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  9, &eeprom_data[9]);
 8001c6a:	4b95      	ldr	r3, [pc, #596]	; (8001ec0 <Main_Setup+0x8c8>)
 8001c6c:	2209      	movs	r2, #9
 8001c6e:	498a      	ldr	r1, [pc, #552]	; (8001e98 <Main_Setup+0x8a0>)
 8001c70:	207f      	movs	r0, #127	; 0x7f
 8001c72:	f7fe ff88 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 10, &eeprom_data[10]);
 8001c76:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <Main_Setup+0x8cc>)
 8001c78:	220a      	movs	r2, #10
 8001c7a:	4987      	ldr	r1, [pc, #540]	; (8001e98 <Main_Setup+0x8a0>)
 8001c7c:	207f      	movs	r0, #127	; 0x7f
 8001c7e:	f7fe ff82 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 11, &eeprom_data[11]);
 8001c82:	4b91      	ldr	r3, [pc, #580]	; (8001ec8 <Main_Setup+0x8d0>)
 8001c84:	220b      	movs	r2, #11
 8001c86:	4984      	ldr	r1, [pc, #528]	; (8001e98 <Main_Setup+0x8a0>)
 8001c88:	207f      	movs	r0, #127	; 0x7f
 8001c8a:	f7fe ff7c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 12, &eeprom_data[12]);
 8001c8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ecc <Main_Setup+0x8d4>)
 8001c90:	220c      	movs	r2, #12
 8001c92:	4981      	ldr	r1, [pc, #516]	; (8001e98 <Main_Setup+0x8a0>)
 8001c94:	207f      	movs	r0, #127	; 0x7f
 8001c96:	f7fe ff76 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 13, &eeprom_data[13]);
 8001c9a:	4b8d      	ldr	r3, [pc, #564]	; (8001ed0 <Main_Setup+0x8d8>)
 8001c9c:	220d      	movs	r2, #13
 8001c9e:	497e      	ldr	r1, [pc, #504]	; (8001e98 <Main_Setup+0x8a0>)
 8001ca0:	207f      	movs	r0, #127	; 0x7f
 8001ca2:	f7fe ff70 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 14, &eeprom_data[14]);
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <Main_Setup+0x8dc>)
 8001ca8:	220e      	movs	r2, #14
 8001caa:	497b      	ldr	r1, [pc, #492]	; (8001e98 <Main_Setup+0x8a0>)
 8001cac:	207f      	movs	r0, #127	; 0x7f
 8001cae:	f7fe ff6a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 15, &eeprom_data[15]);
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <Main_Setup+0x8e0>)
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	4978      	ldr	r1, [pc, #480]	; (8001e98 <Main_Setup+0x8a0>)
 8001cb8:	207f      	movs	r0, #127	; 0x7f
 8001cba:	f7fe ff64 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 16, &eeprom_data[16]);
 8001cbe:	4b87      	ldr	r3, [pc, #540]	; (8001edc <Main_Setup+0x8e4>)
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4975      	ldr	r1, [pc, #468]	; (8001e98 <Main_Setup+0x8a0>)
 8001cc4:	207f      	movs	r0, #127	; 0x7f
 8001cc6:	f7fe ff5e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 17, &eeprom_data[17]);
 8001cca:	4b85      	ldr	r3, [pc, #532]	; (8001ee0 <Main_Setup+0x8e8>)
 8001ccc:	2211      	movs	r2, #17
 8001cce:	4972      	ldr	r1, [pc, #456]	; (8001e98 <Main_Setup+0x8a0>)
 8001cd0:	207f      	movs	r0, #127	; 0x7f
 8001cd2:	f7fe ff58 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 18, &eeprom_data[18]);
 8001cd6:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <Main_Setup+0x8ec>)
 8001cd8:	2212      	movs	r2, #18
 8001cda:	496f      	ldr	r1, [pc, #444]	; (8001e98 <Main_Setup+0x8a0>)
 8001cdc:	207f      	movs	r0, #127	; 0x7f
 8001cde:	f7fe ff52 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 19, &eeprom_data[19]);
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <Main_Setup+0x8f0>)
 8001ce4:	2213      	movs	r2, #19
 8001ce6:	496c      	ldr	r1, [pc, #432]	; (8001e98 <Main_Setup+0x8a0>)
 8001ce8:	207f      	movs	r0, #127	; 0x7f
 8001cea:	f7fe ff4c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 20, &eeprom_data[20]);
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <Main_Setup+0x8f4>)
 8001cf0:	2214      	movs	r2, #20
 8001cf2:	4969      	ldr	r1, [pc, #420]	; (8001e98 <Main_Setup+0x8a0>)
 8001cf4:	207f      	movs	r0, #127	; 0x7f
 8001cf6:	f7fe ff46 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 21, &eeprom_data[21]);
 8001cfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ef0 <Main_Setup+0x8f8>)
 8001cfc:	2215      	movs	r2, #21
 8001cfe:	4966      	ldr	r1, [pc, #408]	; (8001e98 <Main_Setup+0x8a0>)
 8001d00:	207f      	movs	r0, #127	; 0x7f
 8001d02:	f7fe ff40 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 22, &eeprom_data[22]);
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <Main_Setup+0x8fc>)
 8001d08:	2216      	movs	r2, #22
 8001d0a:	4963      	ldr	r1, [pc, #396]	; (8001e98 <Main_Setup+0x8a0>)
 8001d0c:	207f      	movs	r0, #127	; 0x7f
 8001d0e:	f7fe ff3a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 23, &eeprom_data[23]);
 8001d12:	4b79      	ldr	r3, [pc, #484]	; (8001ef8 <Main_Setup+0x900>)
 8001d14:	2217      	movs	r2, #23
 8001d16:	4960      	ldr	r1, [pc, #384]	; (8001e98 <Main_Setup+0x8a0>)
 8001d18:	207f      	movs	r0, #127	; 0x7f
 8001d1a:	f7fe ff34 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 24, &eeprom_data[24]);
 8001d1e:	4b77      	ldr	r3, [pc, #476]	; (8001efc <Main_Setup+0x904>)
 8001d20:	2218      	movs	r2, #24
 8001d22:	495d      	ldr	r1, [pc, #372]	; (8001e98 <Main_Setup+0x8a0>)
 8001d24:	207f      	movs	r0, #127	; 0x7f
 8001d26:	f7fe ff2e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 25, &eeprom_data[25]);
 8001d2a:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <Main_Setup+0x908>)
 8001d2c:	2219      	movs	r2, #25
 8001d2e:	495a      	ldr	r1, [pc, #360]	; (8001e98 <Main_Setup+0x8a0>)
 8001d30:	207f      	movs	r0, #127	; 0x7f
 8001d32:	f7fe ff28 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 26, &eeprom_data[26]);
 8001d36:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <Main_Setup+0x90c>)
 8001d38:	221a      	movs	r2, #26
 8001d3a:	4957      	ldr	r1, [pc, #348]	; (8001e98 <Main_Setup+0x8a0>)
 8001d3c:	207f      	movs	r0, #127	; 0x7f
 8001d3e:	f7fe ff22 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 27, &eeprom_data[27]);
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <Main_Setup+0x910>)
 8001d44:	221b      	movs	r2, #27
 8001d46:	4954      	ldr	r1, [pc, #336]	; (8001e98 <Main_Setup+0x8a0>)
 8001d48:	207f      	movs	r0, #127	; 0x7f
 8001d4a:	f7fe ff1c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 28, &eeprom_data[28]);
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <Main_Setup+0x914>)
 8001d50:	221c      	movs	r2, #28
 8001d52:	4951      	ldr	r1, [pc, #324]	; (8001e98 <Main_Setup+0x8a0>)
 8001d54:	207f      	movs	r0, #127	; 0x7f
 8001d56:	f7fe ff16 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 29, &eeprom_data[29]);
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <Main_Setup+0x918>)
 8001d5c:	221d      	movs	r2, #29
 8001d5e:	494e      	ldr	r1, [pc, #312]	; (8001e98 <Main_Setup+0x8a0>)
 8001d60:	207f      	movs	r0, #127	; 0x7f
 8001d62:	f7fe ff10 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 30, &eeprom_data[30]);
 8001d66:	4b6b      	ldr	r3, [pc, #428]	; (8001f14 <Main_Setup+0x91c>)
 8001d68:	221e      	movs	r2, #30
 8001d6a:	494b      	ldr	r1, [pc, #300]	; (8001e98 <Main_Setup+0x8a0>)
 8001d6c:	207f      	movs	r0, #127	; 0x7f
 8001d6e:	f7fe ff0a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 31, &eeprom_data[31]);
 8001d72:	4b69      	ldr	r3, [pc, #420]	; (8001f18 <Main_Setup+0x920>)
 8001d74:	221f      	movs	r2, #31
 8001d76:	4948      	ldr	r1, [pc, #288]	; (8001e98 <Main_Setup+0x8a0>)
 8001d78:	207f      	movs	r0, #127	; 0x7f
 8001d7a:	f7fe ff04 	bl	8000b86 <Flash_EEPROM_Data_Write>


		Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data_test[0]);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <Main_Setup+0x924>)
 8001d80:	221f      	movs	r2, #31
 8001d82:	4945      	ldr	r1, [pc, #276]	; (8001e98 <Main_Setup+0x8a0>)
 8001d84:	207f      	movs	r0, #127	; 0x7f
 8001d86:	f7fe ff2c 	bl	8000be2 <Flash_EEPROM_Data_Read>

	    sprintf(uartTX, "                                                                                                    ");
 8001d8a:	4a41      	ldr	r2, [pc, #260]	; (8001e90 <Main_Setup+0x898>)
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <Main_Setup+0x928>)
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	2365      	movs	r3, #101	; 0x65
 8001d94:	461a      	mov	r2, r3
 8001d96:	f007 f899 	bl	8008ecc <memcpy>
	    sprintf(uartTX, "\nSetup is done! Everything is looks OKAY! All data is saved to the flash! Reset!\n");
 8001d9a:	4a3d      	ldr	r2, [pc, #244]	; (8001e90 <Main_Setup+0x898>)
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <Main_Setup+0x92c>)
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	2352      	movs	r3, #82	; 0x52
 8001da4:	461a      	mov	r2, r3
 8001da6:	f007 f891 	bl	8008ecc <memcpy>
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	2265      	movs	r2, #101	; 0x65
 8001dae:	4938      	ldr	r1, [pc, #224]	; (8001e90 <Main_Setup+0x898>)
 8001db0:	4838      	ldr	r0, [pc, #224]	; (8001e94 <Main_Setup+0x89c>)
 8001db2:	f006 faa3 	bl	80082fc <HAL_UART_Transmit>
	    sprintf(uartTX, "\nSetup is NOT done! All data is useless! Re-do the setup!\n");
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );

		Flash_ErasePage( 0x0803F800 );
	}
}
 8001db6:	e069      	b.n	8001e8c <Main_Setup+0x894>
	else if( eeprom_data_test[0] == 92 && eeprom_data[28] != 2 && eeprom_data[29] != 1 && eeprom_data[30] != 131 )
 8001db8:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <Main_Setup+0x924>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b5c      	cmp	r3, #92	; 0x5c
 8001dbe:	d139      	bne.n	8001e34 <Main_Setup+0x83c>
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <Main_Setup+0x8a4>)
 8001dc2:	7f1b      	ldrb	r3, [r3, #28]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d035      	beq.n	8001e34 <Main_Setup+0x83c>
 8001dc8:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <Main_Setup+0x8a4>)
 8001dca:	7f5b      	ldrb	r3, [r3, #29]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d031      	beq.n	8001e34 <Main_Setup+0x83c>
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <Main_Setup+0x8a4>)
 8001dd2:	7f9b      	ldrb	r3, [r3, #30]
 8001dd4:	2b83      	cmp	r3, #131	; 0x83
 8001dd6:	d02d      	beq.n	8001e34 <Main_Setup+0x83c>
	    sprintf(uartTX, "                                                                                                    ");
 8001dd8:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <Main_Setup+0x898>)
 8001dda:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <Main_Setup+0x928>)
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	2365      	movs	r3, #101	; 0x65
 8001de2:	461a      	mov	r2, r3
 8001de4:	f007 f872 	bl	8008ecc <memcpy>
	    sprintf(uartTX, "\nSetup is NOT done! Gyro axises are useless! Re-do the setup!\n");
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <Main_Setup+0x898>)
 8001dea:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <Main_Setup+0x930>)
 8001dec:	4615      	mov	r5, r2
 8001dee:	469c      	mov	ip, r3
 8001df0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001df4:	4664      	mov	r4, ip
 8001df6:	462e      	mov	r6, r5
 8001df8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001dfa:	6020      	str	r0, [r4, #0]
 8001dfc:	6061      	str	r1, [r4, #4]
 8001dfe:	60a2      	str	r2, [r4, #8]
 8001e00:	60e3      	str	r3, [r4, #12]
 8001e02:	3510      	adds	r5, #16
 8001e04:	f10c 0c10 	add.w	ip, ip, #16
 8001e08:	4575      	cmp	r5, lr
 8001e0a:	d1f3      	bne.n	8001df4 <Main_Setup+0x7fc>
 8001e0c:	4664      	mov	r4, ip
 8001e0e:	462b      	mov	r3, r5
 8001e10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e12:	6020      	str	r0, [r4, #0]
 8001e14:	6061      	str	r1, [r4, #4]
 8001e16:	60a2      	str	r2, [r4, #8]
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	81a2      	strh	r2, [r4, #12]
 8001e1e:	73a3      	strb	r3, [r4, #14]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e20:	2364      	movs	r3, #100	; 0x64
 8001e22:	2265      	movs	r2, #101	; 0x65
 8001e24:	491a      	ldr	r1, [pc, #104]	; (8001e90 <Main_Setup+0x898>)
 8001e26:	481b      	ldr	r0, [pc, #108]	; (8001e94 <Main_Setup+0x89c>)
 8001e28:	f006 fa68 	bl	80082fc <HAL_UART_Transmit>
		Flash_ErasePage( 0x0803F800 );
 8001e2c:	481a      	ldr	r0, [pc, #104]	; (8001e98 <Main_Setup+0x8a0>)
 8001e2e:	f7fe fe9b 	bl	8000b68 <Flash_ErasePage>
}
 8001e32:	e02b      	b.n	8001e8c <Main_Setup+0x894>
	    sprintf(uartTX, "                                                                                                    ");
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <Main_Setup+0x898>)
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <Main_Setup+0x928>)
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	2365      	movs	r3, #101	; 0x65
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f007 f844 	bl	8008ecc <memcpy>
	    sprintf(uartTX, "\nSetup is NOT done! All data is useless! Re-do the setup!\n");
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <Main_Setup+0x898>)
 8001e46:	4a39      	ldr	r2, [pc, #228]	; (8001f2c <Main_Setup+0x934>)
 8001e48:	4614      	mov	r4, r2
 8001e4a:	469c      	mov	ip, r3
 8001e4c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001e50:	4665      	mov	r5, ip
 8001e52:	4626      	mov	r6, r4
 8001e54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e56:	6028      	str	r0, [r5, #0]
 8001e58:	6069      	str	r1, [r5, #4]
 8001e5a:	60aa      	str	r2, [r5, #8]
 8001e5c:	60eb      	str	r3, [r5, #12]
 8001e5e:	3410      	adds	r4, #16
 8001e60:	f10c 0c10 	add.w	ip, ip, #16
 8001e64:	4574      	cmp	r4, lr
 8001e66:	d1f3      	bne.n	8001e50 <Main_Setup+0x858>
 8001e68:	4662      	mov	r2, ip
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	cb03      	ldmia	r3!, {r0, r1}
 8001e6e:	6010      	str	r0, [r2, #0]
 8001e70:	6051      	str	r1, [r2, #4]
 8001e72:	8819      	ldrh	r1, [r3, #0]
 8001e74:	789b      	ldrb	r3, [r3, #2]
 8001e76:	8111      	strh	r1, [r2, #8]
 8001e78:	7293      	strb	r3, [r2, #10]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e7a:	2364      	movs	r3, #100	; 0x64
 8001e7c:	2265      	movs	r2, #101	; 0x65
 8001e7e:	4904      	ldr	r1, [pc, #16]	; (8001e90 <Main_Setup+0x898>)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <Main_Setup+0x89c>)
 8001e82:	f006 fa3b 	bl	80082fc <HAL_UART_Transmit>
		Flash_ErasePage( 0x0803F800 );
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <Main_Setup+0x8a0>)
 8001e88:	f7fe fe6e 	bl	8000b68 <Flash_ErasePage>
}
 8001e8c:	bf00      	nop
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e90:	200002a4 	.word	0x200002a4
 8001e94:	200001f8 	.word	0x200001f8
 8001e98:	0803f800 	.word	0x0803f800
 8001e9c:	2000005c 	.word	0x2000005c
 8001ea0:	2000005d 	.word	0x2000005d
 8001ea4:	2000005e 	.word	0x2000005e
 8001ea8:	2000005f 	.word	0x2000005f
 8001eac:	20000060 	.word	0x20000060
 8001eb0:	20000061 	.word	0x20000061
 8001eb4:	20000062 	.word	0x20000062
 8001eb8:	20000063 	.word	0x20000063
 8001ebc:	20000064 	.word	0x20000064
 8001ec0:	20000065 	.word	0x20000065
 8001ec4:	20000066 	.word	0x20000066
 8001ec8:	20000067 	.word	0x20000067
 8001ecc:	20000068 	.word	0x20000068
 8001ed0:	20000069 	.word	0x20000069
 8001ed4:	2000006a 	.word	0x2000006a
 8001ed8:	2000006b 	.word	0x2000006b
 8001edc:	2000006c 	.word	0x2000006c
 8001ee0:	2000006d 	.word	0x2000006d
 8001ee4:	2000006e 	.word	0x2000006e
 8001ee8:	2000006f 	.word	0x2000006f
 8001eec:	20000070 	.word	0x20000070
 8001ef0:	20000071 	.word	0x20000071
 8001ef4:	20000072 	.word	0x20000072
 8001ef8:	20000073 	.word	0x20000073
 8001efc:	20000074 	.word	0x20000074
 8001f00:	20000075 	.word	0x20000075
 8001f04:	20000076 	.word	0x20000076
 8001f08:	20000077 	.word	0x20000077
 8001f0c:	20000078 	.word	0x20000078
 8001f10:	20000079 	.word	0x20000079
 8001f14:	2000007a 	.word	0x2000007a
 8001f18:	2000007b 	.word	0x2000007b
 8001f1c:	2000031c 	.word	0x2000031c
 8001f20:	08008fac 	.word	0x08008fac
 8001f24:	0800930c 	.word	0x0800930c
 8001f28:	08009360 	.word	0x08009360
 8001f2c:	080093a0 	.word	0x080093a0

08001f30 <Setup_Gyro_Signalen>:

void Setup_Gyro_Signalen()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8001f34:	f7ff f8de 	bl	80010f4 <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_roll  = gX_Raw;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <Setup_Gyro_Signalen+0x94>)
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <Setup_Gyro_Signalen+0x98>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch = gY_Raw;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <Setup_Gyro_Signalen+0x9c>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <Setup_Gyro_Signalen+0xa0>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw   = gZ_Raw;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <Setup_Gyro_Signalen+0xa4>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <Setup_Gyro_Signalen+0xa8>)
 8001f70:	edc3 7a00 	vstr	s15, [r3]

	if(cal_int == 2000)							//Only compensate after the calibration
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <Setup_Gyro_Signalen+0xac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f7c:	d120      	bne.n	8001fc0 <Setup_Gyro_Signalen+0x90>
	{
		gyro_roll  -= gyro_roll_cal;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <Setup_Gyro_Signalen+0x98>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <Setup_Gyro_Signalen+0xb0>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <Setup_Gyro_Signalen+0x98>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch -= gyro_pitch_cal;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <Setup_Gyro_Signalen+0xa0>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <Setup_Gyro_Signalen+0xb4>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <Setup_Gyro_Signalen+0xa0>)
 8001fa6:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw   -= gyro_yaw_cal;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <Setup_Gyro_Signalen+0xa8>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <Setup_Gyro_Signalen+0xb8>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <Setup_Gyro_Signalen+0xa8>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000386 	.word	0x20000386
 8001fc8:	20000390 	.word	0x20000390
 8001fcc:	20000384 	.word	0x20000384
 8001fd0:	20000370 	.word	0x20000370
 8001fd4:	20000368 	.word	0x20000368
 8001fd8:	20000378 	.word	0x20000378
 8001fdc:	2000002c 	.word	0x2000002c
 8001fe0:	2000030c 	.word	0x2000030c
 8001fe4:	20000338 	.word	0x20000338
 8001fe8:	20000318 	.word	0x20000318
 8001fec:	00000000 	.word	0x00000000

08001ff0 <Check_Gyro_Axes>:

void Check_Gyro_Axes( uint8_t movement )
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger_axis = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	77fb      	strb	r3, [r7, #31]
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;

	//Reset all axes
	gyro_angle_roll = 0;
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
	gyro_angle_pitch = 0;
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
	gyro_angle_yaw = 0;
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	613b      	str	r3, [r7, #16]

	Setup_Gyro_Signalen();
 8002010:	f7ff ff8e 	bl	8001f30 <Setup_Gyro_Signalen>

	unsigned int i = 10000;
 8002014:	f242 7310 	movw	r3, #10000	; 0x2710
 8002018:	60fb      	str	r3, [r7, #12]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 800201a:	e05b      	b.n	80020d4 <Check_Gyro_Axes+0xe4>
	{
		Setup_Gyro_Signalen();
 800201c:	f7ff ff88 	bl	8001f30 <Setup_Gyro_Signalen>
		i--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3b01      	subs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]

		gyro_angle_roll += gyro_roll * 0.00007;              //0.00007 = 17.5 (md/s) / 250(Hz)
 8002026:	69b8      	ldr	r0, [r7, #24]
 8002028:	f7fe fa32 	bl	8000490 <__aeabi_f2d>
 800202c:	4604      	mov	r4, r0
 800202e:	460d      	mov	r5, r1
 8002030:	4bc3      	ldr	r3, [pc, #780]	; (8002340 <Check_Gyro_Axes+0x350>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa2b 	bl	8000490 <__aeabi_f2d>
 800203a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002338 <Check_Gyro_Axes+0x348>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fa7e 	bl	8000540 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe f8c2 	bl	80001d4 <__adddf3>
 8002050:	4603      	mov	r3, r0
 8002052:	460c      	mov	r4, r1
 8002054:	4618      	mov	r0, r3
 8002056:	4621      	mov	r1, r4
 8002058:	f7fe fc84 	bl	8000964 <__aeabi_d2f>
 800205c:	4603      	mov	r3, r0
 800205e:	61bb      	str	r3, [r7, #24]
		gyro_angle_pitch += gyro_pitch * 0.00007;
 8002060:	6978      	ldr	r0, [r7, #20]
 8002062:	f7fe fa15 	bl	8000490 <__aeabi_f2d>
 8002066:	4604      	mov	r4, r0
 8002068:	460d      	mov	r5, r1
 800206a:	4bb6      	ldr	r3, [pc, #728]	; (8002344 <Check_Gyro_Axes+0x354>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa0e 	bl	8000490 <__aeabi_f2d>
 8002074:	a3b0      	add	r3, pc, #704	; (adr r3, 8002338 <Check_Gyro_Axes+0x348>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe fa61 	bl	8000540 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f7fe f8a5 	bl	80001d4 <__adddf3>
 800208a:	4603      	mov	r3, r0
 800208c:	460c      	mov	r4, r1
 800208e:	4618      	mov	r0, r3
 8002090:	4621      	mov	r1, r4
 8002092:	f7fe fc67 	bl	8000964 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	617b      	str	r3, [r7, #20]
		gyro_angle_yaw += gyro_yaw * 0.00007;
 800209a:	6938      	ldr	r0, [r7, #16]
 800209c:	f7fe f9f8 	bl	8000490 <__aeabi_f2d>
 80020a0:	4604      	mov	r4, r0
 80020a2:	460d      	mov	r5, r1
 80020a4:	4ba8      	ldr	r3, [pc, #672]	; (8002348 <Check_Gyro_Axes+0x358>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe f9f1 	bl	8000490 <__aeabi_f2d>
 80020ae:	a3a2      	add	r3, pc, #648	; (adr r3, 8002338 <Check_Gyro_Axes+0x348>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe fa44 	bl	8000540 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe f888 	bl	80001d4 <__adddf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	4618      	mov	r0, r3
 80020ca:	4621      	mov	r1, r4
 80020cc:	f7fe fc4a 	bl	8000964 <__aeabi_d2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	613b      	str	r3, [r7, #16]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80020d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd2d      	ble.n	8002142 <Check_Gyro_Axes+0x152>
 80020e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d524      	bpl.n	8002142 <Check_Gyro_Axes+0x152>
 80020f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020fc:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	dd1b      	ble.n	8002142 <Check_Gyro_Axes+0x152>
 800210a:	edd7 7a05 	vldr	s15, [r7, #20]
 800210e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	d512      	bpl.n	8002142 <Check_Gyro_Axes+0x152>
 800211c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002120:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	dd09      	ble.n	8002142 <Check_Gyro_Axes+0x152>
 800212e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002132:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	f53f af6d 	bmi.w	800201c <Check_Gyro_Axes+0x2c>
//		HAL_Delay( 4 );	 //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}


	//Assign the moved axis to the corresponding function (pitch, roll, yaw)
	if(( gyro_angle_roll < -30 || gyro_angle_roll > 30 ) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 8002142:	edd7 7a06 	vldr	s15, [r7, #24]
 8002146:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800214a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d408      	bmi.n	8002166 <Check_Gyro_Axes+0x176>
 8002154:	edd7 7a06 	vldr	s15, [r7, #24]
 8002158:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	dd36      	ble.n	80021d4 <Check_Gyro_Axes+0x1e4>
 8002166:	edd7 7a05 	vldr	s15, [r7, #20]
 800216a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800216e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	dd2d      	ble.n	80021d4 <Check_Gyro_Axes+0x1e4>
 8002178:	edd7 7a05 	vldr	s15, [r7, #20]
 800217c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	d524      	bpl.n	80021d4 <Check_Gyro_Axes+0x1e4>
 800218a:	edd7 7a04 	vldr	s15, [r7, #16]
 800218e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	dd1b      	ble.n	80021d4 <Check_Gyro_Axes+0x1e4>
 800219c:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	d512      	bpl.n	80021d4 <Check_Gyro_Axes+0x1e4>
	{
		gyro_check_byte |= 0b00000001;
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <Check_Gyro_Axes+0x35c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b64      	ldr	r3, [pc, #400]	; (800234c <Check_Gyro_Axes+0x35c>)
 80021ba:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_roll < 0 )	{	trigger_axis = 0b10000001;	}
 80021bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80021c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	d502      	bpl.n	80021d0 <Check_Gyro_Axes+0x1e0>
 80021ca:	2381      	movs	r3, #129	; 0x81
 80021cc:	77fb      	strb	r3, [r7, #31]
 80021ce:	e001      	b.n	80021d4 <Check_Gyro_Axes+0x1e4>
		else	{	trigger_axis = 0b00000001;	}
 80021d0:	2301      	movs	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_pitch < -30 || gyro_angle_pitch > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80021d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	d408      	bmi.n	80021f8 <Check_Gyro_Axes+0x208>
 80021e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	dd36      	ble.n	8002266 <Check_Gyro_Axes+0x276>
 80021f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80021fc:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	dd2d      	ble.n	8002266 <Check_Gyro_Axes+0x276>
 800220a:	edd7 7a06 	vldr	s15, [r7, #24]
 800220e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d524      	bpl.n	8002266 <Check_Gyro_Axes+0x276>
 800221c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002220:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd1b      	ble.n	8002266 <Check_Gyro_Axes+0x276>
 800222e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002232:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	d512      	bpl.n	8002266 <Check_Gyro_Axes+0x276>
	{
		gyro_check_byte |= 0b00000010;
 8002240:	4b42      	ldr	r3, [pc, #264]	; (800234c <Check_Gyro_Axes+0x35c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <Check_Gyro_Axes+0x35c>)
 800224c:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_pitch < 0 )	{	trigger_axis = 0b10000010;	}
 800224e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	d502      	bpl.n	8002262 <Check_Gyro_Axes+0x272>
 800225c:	2382      	movs	r3, #130	; 0x82
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	e001      	b.n	8002266 <Check_Gyro_Axes+0x276>
		else	{	trigger_axis = 0b00000010;	}
 8002262:	2302      	movs	r3, #2
 8002264:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_yaw < -30 || gyro_angle_yaw > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 )
 8002266:	edd7 7a04 	vldr	s15, [r7, #16]
 800226a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	d408      	bmi.n	800228a <Check_Gyro_Axes+0x29a>
 8002278:	edd7 7a04 	vldr	s15, [r7, #16]
 800227c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	dd36      	ble.n	80022f8 <Check_Gyro_Axes+0x308>
 800228a:	edd7 7a06 	vldr	s15, [r7, #24]
 800228e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229a:	dd2d      	ble.n	80022f8 <Check_Gyro_Axes+0x308>
 800229c:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	d524      	bpl.n	80022f8 <Check_Gyro_Axes+0x308>
 80022ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b2:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	dd1b      	ble.n	80022f8 <Check_Gyro_Axes+0x308>
 80022c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d512      	bpl.n	80022f8 <Check_Gyro_Axes+0x308>
	{
		gyro_check_byte |= 0b00000100;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <Check_Gyro_Axes+0x35c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <Check_Gyro_Axes+0x35c>)
 80022de:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_yaw < 0 )	{	trigger_axis = 0b10000011;	}
 80022e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	d502      	bpl.n	80022f4 <Check_Gyro_Axes+0x304>
 80022ee:	2383      	movs	r3, #131	; 0x83
 80022f0:	77fb      	strb	r3, [r7, #31]
 80022f2:	e001      	b.n	80022f8 <Check_Gyro_Axes+0x308>
		else	{	trigger_axis = 0b00000011;	}
 80022f4:	2303      	movs	r3, #3
 80022f6:	77fb      	strb	r3, [r7, #31]
	}

	if( trigger_axis == 0 )
 80022f8:	7ffb      	ldrb	r3, [r7, #31]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <Check_Gyro_Axes+0x316>
	{
		error = true;
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <Check_Gyro_Axes+0x360>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e005      	b.n	8002312 <Check_Gyro_Axes+0x322>
	}

	else
	if( movement == 1 )	{	roll_axis  = trigger_axis;	}
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <Check_Gyro_Axes+0x322>
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <Check_Gyro_Axes+0x364>)
 800230e:	7ffb      	ldrb	r3, [r7, #31]
 8002310:	7013      	strb	r3, [r2, #0]
	if( movement == 2 )	{	pitch_axis = trigger_axis;	}
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d102      	bne.n	800231e <Check_Gyro_Axes+0x32e>
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <Check_Gyro_Axes+0x368>)
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	7013      	strb	r3, [r2, #0]
	if( movement == 3 )	{	yaw_axis   = trigger_axis;	}
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d102      	bne.n	800232a <Check_Gyro_Axes+0x33a>
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <Check_Gyro_Axes+0x36c>)
 8002326:	7ffb      	ldrb	r3, [r7, #31]
 8002328:	7013      	strb	r3, [r2, #0]
}
 800232a:	bf00      	nop
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bdb0      	pop	{r4, r5, r7, pc}
 8002332:	bf00      	nop
 8002334:	f3af 8000 	nop.w
 8002338:	d7c6fbd2 	.word	0xd7c6fbd2
 800233c:	3f12599e 	.word	0x3f12599e
 8002340:	20000390 	.word	0x20000390
 8002344:	20000370 	.word	0x20000370
 8002348:	20000378 	.word	0x20000378
 800234c:	2000033d 	.word	0x2000033d
 8002350:	20000058 	.word	0x20000058
 8002354:	20000361 	.word	0x20000361
 8002358:	20000360 	.word	0x20000360
 800235c:	20000334 	.word	0x20000334

08002360 <Register_Min_Max>:

void Register_Min_Max( void )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
	uint8_t zero = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
	low_channel_1 = receiver_input_channel_1;
 800236a:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <Register_Min_Max+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6f      	ldr	r2, [pc, #444]	; (800252c <Register_Min_Max+0x1cc>)
 8002370:	6013      	str	r3, [r2, #0]
	low_channel_2 = receiver_input_channel_2;
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <Register_Min_Max+0x1d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	; (8002534 <Register_Min_Max+0x1d4>)
 8002378:	6013      	str	r3, [r2, #0]
	low_channel_3 = receiver_input_channel_3;
 800237a:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <Register_Min_Max+0x1d8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	; (800253c <Register_Min_Max+0x1dc>)
 8002380:	6013      	str	r3, [r2, #0]
	low_channel_4 = receiver_input_channel_4;
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <Register_Min_Max+0x1e0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6f      	ldr	r2, [pc, #444]	; (8002544 <Register_Min_Max+0x1e4>)
 8002388:	6013      	str	r3, [r2, #0]

	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 800238a:	e009      	b.n	80023a0 <Register_Min_Max+0x40>
	{
		for(int i = 10000; i > 0; i-- )	{	}
 800238c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	e002      	b.n	800239a <Register_Min_Max+0x3a>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3b01      	subs	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	dcf9      	bgt.n	8002394 <Register_Min_Max+0x34>
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 80023a0:	4b69      	ldr	r3, [pc, #420]	; (8002548 <Register_Min_Max+0x1e8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f103 0214 	add.w	r2, r3, #20
 80023a8:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <Register_Min_Max+0x1c8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dd07      	ble.n	80023c0 <Register_Min_Max+0x60>
 80023b0:	4b65      	ldr	r3, [pc, #404]	; (8002548 <Register_Min_Max+0x1e8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1a3 0214 	sub.w	r2, r3, #20
 80023b8:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <Register_Min_Max+0x1c8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbe5      	blt.n	800238c <Register_Min_Max+0x2c>
	}
	
	int k = 20000000;
 80023c0:	4b62      	ldr	r3, [pc, #392]	; (800254c <Register_Min_Max+0x1ec>)
 80023c2:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 80023c4:	e0a2      	b.n	800250c <Register_Min_Max+0x1ac>
	{
		if(	receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)	{	zero |= 0b00000001;	}
 80023c6:	4b60      	ldr	r3, [pc, #384]	; (8002548 <Register_Min_Max+0x1e8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f103 0214 	add.w	r2, r3, #20
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <Register_Min_Max+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dd0b      	ble.n	80023ee <Register_Min_Max+0x8e>
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <Register_Min_Max+0x1e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1a3 0214 	sub.w	r2, r3, #20
 80023de:	4b52      	ldr	r3, [pc, #328]	; (8002528 <Register_Min_Max+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	da03      	bge.n	80023ee <Register_Min_Max+0x8e>
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)	{	zero |= 0b00000010;	}
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <Register_Min_Max+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f103 0214 	add.w	r2, r3, #20
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <Register_Min_Max+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dd0b      	ble.n	8002416 <Register_Min_Max+0xb6>
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <Register_Min_Max+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1a3 0214 	sub.w	r2, r3, #20
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <Register_Min_Max+0x1d0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	da03      	bge.n	8002416 <Register_Min_Max+0xb6>
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)	{	zero |= 0b00000100;	}
 8002416:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <Register_Min_Max+0x1f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f103 0214 	add.w	r2, r3, #20
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <Register_Min_Max+0x1d8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	dd0b      	ble.n	800243e <Register_Min_Max+0xde>
 8002426:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <Register_Min_Max+0x1f4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1a3 0214 	sub.w	r2, r3, #20
 800242e:	4b42      	ldr	r3, [pc, #264]	; (8002538 <Register_Min_Max+0x1d8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	da03      	bge.n	800243e <Register_Min_Max+0xde>
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)	{	zero |= 0b00001000;	}
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <Register_Min_Max+0x1f8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f103 0214 	add.w	r2, r3, #20
 8002446:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <Register_Min_Max+0x1e0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	dd0b      	ble.n	8002466 <Register_Min_Max+0x106>
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <Register_Min_Max+0x1f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1a3 0214 	sub.w	r2, r3, #20
 8002456:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <Register_Min_Max+0x1e0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	da03      	bge.n	8002466 <Register_Min_Max+0x106>
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	73fb      	strb	r3, [r7, #15]

		if(	receiver_input_channel_1 < low_channel_1)	{	low_channel_1 = receiver_input_channel_1;	}
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <Register_Min_Max+0x1c8>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <Register_Min_Max+0x1cc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	da03      	bge.n	800247a <Register_Min_Max+0x11a>
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <Register_Min_Max+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2d      	ldr	r2, [pc, #180]	; (800252c <Register_Min_Max+0x1cc>)
 8002478:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 < low_channel_2)	{	low_channel_2 = receiver_input_channel_2;	}
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <Register_Min_Max+0x1d0>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <Register_Min_Max+0x1d4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	da03      	bge.n	800248e <Register_Min_Max+0x12e>
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <Register_Min_Max+0x1d0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <Register_Min_Max+0x1d4>)
 800248c:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 < low_channel_3)	{	low_channel_3 = receiver_input_channel_3;	}
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <Register_Min_Max+0x1d8>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <Register_Min_Max+0x1dc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	da03      	bge.n	80024a2 <Register_Min_Max+0x142>
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <Register_Min_Max+0x1d8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a27      	ldr	r2, [pc, #156]	; (800253c <Register_Min_Max+0x1dc>)
 80024a0:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 < low_channel_4)	{	low_channel_4 = receiver_input_channel_4;	}
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <Register_Min_Max+0x1e0>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b27      	ldr	r3, [pc, #156]	; (8002544 <Register_Min_Max+0x1e4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	da03      	bge.n	80024b6 <Register_Min_Max+0x156>
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <Register_Min_Max+0x1e0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a24      	ldr	r2, [pc, #144]	; (8002544 <Register_Min_Max+0x1e4>)
 80024b4:	6013      	str	r3, [r2, #0]
		
		if(	receiver_input_channel_1 > high_channel_1)	{	high_channel_1 = receiver_input_channel_1;	}
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <Register_Min_Max+0x1c8>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <Register_Min_Max+0x1fc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	dd03      	ble.n	80024ca <Register_Min_Max+0x16a>
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <Register_Min_Max+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <Register_Min_Max+0x1fc>)
 80024c8:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 > high_channel_2)	{	high_channel_2 = receiver_input_channel_2;	}
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <Register_Min_Max+0x1d0>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <Register_Min_Max+0x200>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	dd03      	ble.n	80024de <Register_Min_Max+0x17e>
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <Register_Min_Max+0x1d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <Register_Min_Max+0x200>)
 80024dc:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 > high_channel_3)	{	high_channel_3 = receiver_input_channel_3;	}
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <Register_Min_Max+0x1d8>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <Register_Min_Max+0x204>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dd03      	ble.n	80024f2 <Register_Min_Max+0x192>
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <Register_Min_Max+0x1d8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <Register_Min_Max+0x204>)
 80024f0:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 > high_channel_4)	{	high_channel_4 = receiver_input_channel_4;	}
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <Register_Min_Max+0x1e0>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <Register_Min_Max+0x208>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dd03      	ble.n	8002506 <Register_Min_Max+0x1a6>
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <Register_Min_Max+0x1e0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a19      	ldr	r2, [pc, #100]	; (8002568 <Register_Min_Max+0x208>)
 8002504:	6013      	str	r3, [r2, #0]

		k--;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3b01      	subs	r3, #1
 800250a:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	dd03      	ble.n	800251a <Register_Min_Max+0x1ba>
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b0e      	cmp	r3, #14
 8002516:	f67f af56 	bls.w	80023c6 <Register_Min_Max+0x66>
	}
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	2000038c 	.word	0x2000038c
 800252c:	20000348 	.word	0x20000348
 8002530:	20000380 	.word	0x20000380
 8002534:	20000330 	.word	0x20000330
 8002538:	200000a0 	.word	0x200000a0
 800253c:	20000310 	.word	0x20000310
 8002540:	20000388 	.word	0x20000388
 8002544:	20000358 	.word	0x20000358
 8002548:	2000035c 	.word	0x2000035c
 800254c:	01312d00 	.word	0x01312d00
 8002550:	20000328 	.word	0x20000328
 8002554:	2000034c 	.word	0x2000034c
 8002558:	20000314 	.word	0x20000314
 800255c:	2000032c 	.word	0x2000032c
 8002560:	20000364 	.word	0x20000364
 8002564:	20000340 	.word	0x20000340
 8002568:	20000354 	.word	0x20000354

0800256c <Check_Receiver_Inputs>:

void Check_Receiver_Inputs( uint8_t movement )			//Check if a receiver input value is changing within 30 seconds
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
	int pulse_length;
	unsigned int i = 3000000;
 800257a:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <Check_Receiver_Inputs+0x18c>)
 800257c:	60fb      	str	r3, [r7, #12]

	while( i > 0 && trigger == 0 )
 800257e:	e065      	b.n	800264c <Check_Receiver_Inputs+0xe0>
	{
		HAL_Delay( 250 );
 8002580:	20fa      	movs	r0, #250	; 0xfa
 8002582:	f001 f85f 	bl	8003644 <HAL_Delay>

		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250)
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <Check_Receiver_Inputs+0x190>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800258e:	4293      	cmp	r3, r2
 8002590:	dc05      	bgt.n	800259e <Check_Receiver_Inputs+0x32>
 8002592:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <Check_Receiver_Inputs+0x190>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800259a:	4293      	cmp	r3, r2
 800259c:	dc0b      	bgt.n	80025b6 <Check_Receiver_Inputs+0x4a>
		{
			trigger = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000001;
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <Check_Receiver_Inputs+0x194>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b54      	ldr	r3, [pc, #336]	; (8002700 <Check_Receiver_Inputs+0x194>)
 80025ae:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_1;
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <Check_Receiver_Inputs+0x190>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <Check_Receiver_Inputs+0x198>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80025be:	4293      	cmp	r3, r2
 80025c0:	dc05      	bgt.n	80025ce <Check_Receiver_Inputs+0x62>
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <Check_Receiver_Inputs+0x198>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80025ca:	4293      	cmp	r3, r2
 80025cc:	dc0b      	bgt.n	80025e6 <Check_Receiver_Inputs+0x7a>
		{
			trigger = 2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000010;
 80025d2:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <Check_Receiver_Inputs+0x194>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b48      	ldr	r3, [pc, #288]	; (8002700 <Check_Receiver_Inputs+0x194>)
 80025de:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_2;
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <Check_Receiver_Inputs+0x198>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250)
 80025e6:	4b48      	ldr	r3, [pc, #288]	; (8002708 <Check_Receiver_Inputs+0x19c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80025ee:	4293      	cmp	r3, r2
 80025f0:	dc05      	bgt.n	80025fe <Check_Receiver_Inputs+0x92>
 80025f2:	4b45      	ldr	r3, [pc, #276]	; (8002708 <Check_Receiver_Inputs+0x19c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80025fa:	4293      	cmp	r3, r2
 80025fc:	dc0b      	bgt.n	8002616 <Check_Receiver_Inputs+0xaa>
		{
			trigger = 3;
 80025fe:	2303      	movs	r3, #3
 8002600:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000100;
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <Check_Receiver_Inputs+0x194>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <Check_Receiver_Inputs+0x194>)
 800260e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_3;
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <Check_Receiver_Inputs+0x19c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250)
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <Check_Receiver_Inputs+0x1a0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800261e:	4293      	cmp	r3, r2
 8002620:	dc05      	bgt.n	800262e <Check_Receiver_Inputs+0xc2>
 8002622:	4b3a      	ldr	r3, [pc, #232]	; (800270c <Check_Receiver_Inputs+0x1a0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800262a:	4293      	cmp	r3, r2
 800262c:	dc0b      	bgt.n	8002646 <Check_Receiver_Inputs+0xda>
		{
			trigger = 4;
 800262e:	2304      	movs	r3, #4
 8002630:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00001000;
 8002632:	4b33      	ldr	r3, [pc, #204]	; (8002700 <Check_Receiver_Inputs+0x194>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	f043 0308 	orr.w	r3, r3, #8
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b30      	ldr	r3, [pc, #192]	; (8002700 <Check_Receiver_Inputs+0x194>)
 800263e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_4;
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <Check_Receiver_Inputs+0x1a0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	613b      	str	r3, [r7, #16]
		}

		i--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3b01      	subs	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
	while( i > 0 && trigger == 0 )
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <Check_Receiver_Inputs+0xec>
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d093      	beq.n	8002580 <Check_Receiver_Inputs+0x14>
	}

	if(trigger == 0)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <Check_Receiver_Inputs+0xfa>
	{
		error = 1;
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <Check_Receiver_Inputs+0x1a4>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
		{
			channel_4_assign = trigger;
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
 8002664:	e043      	b.n	80026ee <Check_Receiver_Inputs+0x182>
		if(movement == 1)
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10d      	bne.n	8002688 <Check_Receiver_Inputs+0x11c>
			channel_3_assign = trigger;
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <Check_Receiver_Inputs+0x1a8>)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002678:	4293      	cmp	r3, r2
 800267a:	dc05      	bgt.n	8002688 <Check_Receiver_Inputs+0x11c>
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <Check_Receiver_Inputs+0x1a8>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3b80      	subs	r3, #128	; 0x80
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <Check_Receiver_Inputs+0x1a8>)
 8002686:	701a      	strb	r2, [r3, #0]
		if(movement == 2)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d10d      	bne.n	80026aa <Check_Receiver_Inputs+0x13e>
			channel_1_assign = trigger;
 800268e:	4a22      	ldr	r2, [pc, #136]	; (8002718 <Check_Receiver_Inputs+0x1ac>)
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_1_assign += 0b10000000;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800269a:	4293      	cmp	r3, r2
 800269c:	dc05      	bgt.n	80026aa <Check_Receiver_Inputs+0x13e>
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <Check_Receiver_Inputs+0x1ac>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3b80      	subs	r3, #128	; 0x80
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <Check_Receiver_Inputs+0x1ac>)
 80026a8:	701a      	strb	r2, [r3, #0]
		if(movement == 3)
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d10d      	bne.n	80026cc <Check_Receiver_Inputs+0x160>
			channel_2_assign = trigger;
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <Check_Receiver_Inputs+0x1b0>)
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026bc:	4293      	cmp	r3, r2
 80026be:	dc05      	bgt.n	80026cc <Check_Receiver_Inputs+0x160>
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <Check_Receiver_Inputs+0x1b0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3b80      	subs	r3, #128	; 0x80
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <Check_Receiver_Inputs+0x1b0>)
 80026ca:	701a      	strb	r2, [r3, #0]
		if(movement == 4)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d10d      	bne.n	80026ee <Check_Receiver_Inputs+0x182>
			channel_4_assign = trigger;
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <Check_Receiver_Inputs+0x1b4>)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	7013      	strb	r3, [r2, #0]
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026de:	4293      	cmp	r3, r2
 80026e0:	dc05      	bgt.n	80026ee <Check_Receiver_Inputs+0x182>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <Check_Receiver_Inputs+0x1b4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	3b80      	subs	r3, #128	; 0x80
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <Check_Receiver_Inputs+0x1b4>)
 80026ec:	701a      	strb	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	002dc6c0 	.word	0x002dc6c0
 80026fc:	2000038c 	.word	0x2000038c
 8002700:	2000033c 	.word	0x2000033c
 8002704:	20000380 	.word	0x20000380
 8002708:	200000a0 	.word	0x200000a0
 800270c:	20000388 	.word	0x20000388
 8002710:	20000058 	.word	0x20000058
 8002714:	20000344 	.word	0x20000344
 8002718:	20000351 	.word	0x20000351
 800271c:	20000335 	.word	0x20000335
 8002720:	20000350 	.word	0x20000350

08002724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272a:	f000 ff25 	bl	8003578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800272e:	f000 fa9d 	bl	8002c6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay( 3000 );
 8002732:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002736:	f000 ff85 	bl	8003644 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273a:	f000 fc73 	bl	8003024 <MX_GPIO_Init>
  MX_I2C1_Init();
 800273e:	f000 faf3 	bl	8002d28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002742:	f000 fb31 	bl	8002da8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002746:	f000 fba3 	bl	8002e90 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800274a:	f000 fc3b 	bl	8002fc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// Flash to EEPROM Array
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  0, &eeprom_data[0]);
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <main+0x260>)
 8002750:	2200      	movs	r2, #0
 8002752:	498d      	ldr	r1, [pc, #564]	; (8002988 <main+0x264>)
 8002754:	207f      	movs	r0, #127	; 0x7f
 8002756:	f7fe fa44 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  1, &eeprom_data[1]);
 800275a:	4b8c      	ldr	r3, [pc, #560]	; (800298c <main+0x268>)
 800275c:	2201      	movs	r2, #1
 800275e:	498a      	ldr	r1, [pc, #552]	; (8002988 <main+0x264>)
 8002760:	207f      	movs	r0, #127	; 0x7f
 8002762:	f7fe fa3e 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  2, &eeprom_data[2]);
 8002766:	4b8a      	ldr	r3, [pc, #552]	; (8002990 <main+0x26c>)
 8002768:	2202      	movs	r2, #2
 800276a:	4987      	ldr	r1, [pc, #540]	; (8002988 <main+0x264>)
 800276c:	207f      	movs	r0, #127	; 0x7f
 800276e:	f7fe fa38 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  3, &eeprom_data[3]);
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <main+0x270>)
 8002774:	2203      	movs	r2, #3
 8002776:	4984      	ldr	r1, [pc, #528]	; (8002988 <main+0x264>)
 8002778:	207f      	movs	r0, #127	; 0x7f
 800277a:	f7fe fa32 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  4, &eeprom_data[4]);
 800277e:	4b86      	ldr	r3, [pc, #536]	; (8002998 <main+0x274>)
 8002780:	2204      	movs	r2, #4
 8002782:	4981      	ldr	r1, [pc, #516]	; (8002988 <main+0x264>)
 8002784:	207f      	movs	r0, #127	; 0x7f
 8002786:	f7fe fa2c 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  5, &eeprom_data[5]);
 800278a:	4b84      	ldr	r3, [pc, #528]	; (800299c <main+0x278>)
 800278c:	2205      	movs	r2, #5
 800278e:	497e      	ldr	r1, [pc, #504]	; (8002988 <main+0x264>)
 8002790:	207f      	movs	r0, #127	; 0x7f
 8002792:	f7fe fa26 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  6, &eeprom_data[6]);
 8002796:	4b82      	ldr	r3, [pc, #520]	; (80029a0 <main+0x27c>)
 8002798:	2206      	movs	r2, #6
 800279a:	497b      	ldr	r1, [pc, #492]	; (8002988 <main+0x264>)
 800279c:	207f      	movs	r0, #127	; 0x7f
 800279e:	f7fe fa20 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  7, &eeprom_data[7]);
 80027a2:	4b80      	ldr	r3, [pc, #512]	; (80029a4 <main+0x280>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	4978      	ldr	r1, [pc, #480]	; (8002988 <main+0x264>)
 80027a8:	207f      	movs	r0, #127	; 0x7f
 80027aa:	f7fe fa1a 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  8, &eeprom_data[8]);
 80027ae:	4b7e      	ldr	r3, [pc, #504]	; (80029a8 <main+0x284>)
 80027b0:	2208      	movs	r2, #8
 80027b2:	4975      	ldr	r1, [pc, #468]	; (8002988 <main+0x264>)
 80027b4:	207f      	movs	r0, #127	; 0x7f
 80027b6:	f7fe fa14 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  9, &eeprom_data[9]);
 80027ba:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <main+0x288>)
 80027bc:	2209      	movs	r2, #9
 80027be:	4972      	ldr	r1, [pc, #456]	; (8002988 <main+0x264>)
 80027c0:	207f      	movs	r0, #127	; 0x7f
 80027c2:	f7fe fa0e 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 10, &eeprom_data[10]);
 80027c6:	4b7a      	ldr	r3, [pc, #488]	; (80029b0 <main+0x28c>)
 80027c8:	220a      	movs	r2, #10
 80027ca:	496f      	ldr	r1, [pc, #444]	; (8002988 <main+0x264>)
 80027cc:	207f      	movs	r0, #127	; 0x7f
 80027ce:	f7fe fa08 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 11, &eeprom_data[11]);
 80027d2:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <main+0x290>)
 80027d4:	220b      	movs	r2, #11
 80027d6:	496c      	ldr	r1, [pc, #432]	; (8002988 <main+0x264>)
 80027d8:	207f      	movs	r0, #127	; 0x7f
 80027da:	f7fe fa02 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 12, &eeprom_data[12]);
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <main+0x294>)
 80027e0:	220c      	movs	r2, #12
 80027e2:	4969      	ldr	r1, [pc, #420]	; (8002988 <main+0x264>)
 80027e4:	207f      	movs	r0, #127	; 0x7f
 80027e6:	f7fe f9fc 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 13, &eeprom_data[13]);
 80027ea:	4b74      	ldr	r3, [pc, #464]	; (80029bc <main+0x298>)
 80027ec:	220d      	movs	r2, #13
 80027ee:	4966      	ldr	r1, [pc, #408]	; (8002988 <main+0x264>)
 80027f0:	207f      	movs	r0, #127	; 0x7f
 80027f2:	f7fe f9f6 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 14, &eeprom_data[14]);
 80027f6:	4b72      	ldr	r3, [pc, #456]	; (80029c0 <main+0x29c>)
 80027f8:	220e      	movs	r2, #14
 80027fa:	4963      	ldr	r1, [pc, #396]	; (8002988 <main+0x264>)
 80027fc:	207f      	movs	r0, #127	; 0x7f
 80027fe:	f7fe f9f0 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 15, &eeprom_data[15]);
 8002802:	4b70      	ldr	r3, [pc, #448]	; (80029c4 <main+0x2a0>)
 8002804:	220f      	movs	r2, #15
 8002806:	4960      	ldr	r1, [pc, #384]	; (8002988 <main+0x264>)
 8002808:	207f      	movs	r0, #127	; 0x7f
 800280a:	f7fe f9ea 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 16, &eeprom_data[16]);
 800280e:	4b6e      	ldr	r3, [pc, #440]	; (80029c8 <main+0x2a4>)
 8002810:	2210      	movs	r2, #16
 8002812:	495d      	ldr	r1, [pc, #372]	; (8002988 <main+0x264>)
 8002814:	207f      	movs	r0, #127	; 0x7f
 8002816:	f7fe f9e4 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 17, &eeprom_data[17]);
 800281a:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <main+0x2a8>)
 800281c:	2211      	movs	r2, #17
 800281e:	495a      	ldr	r1, [pc, #360]	; (8002988 <main+0x264>)
 8002820:	207f      	movs	r0, #127	; 0x7f
 8002822:	f7fe f9de 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 18, &eeprom_data[18]);
 8002826:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <main+0x2ac>)
 8002828:	2212      	movs	r2, #18
 800282a:	4957      	ldr	r1, [pc, #348]	; (8002988 <main+0x264>)
 800282c:	207f      	movs	r0, #127	; 0x7f
 800282e:	f7fe f9d8 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 19, &eeprom_data[19]);
 8002832:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <main+0x2b0>)
 8002834:	2213      	movs	r2, #19
 8002836:	4954      	ldr	r1, [pc, #336]	; (8002988 <main+0x264>)
 8002838:	207f      	movs	r0, #127	; 0x7f
 800283a:	f7fe f9d2 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 20, &eeprom_data[20]);
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <main+0x2b4>)
 8002840:	2214      	movs	r2, #20
 8002842:	4951      	ldr	r1, [pc, #324]	; (8002988 <main+0x264>)
 8002844:	207f      	movs	r0, #127	; 0x7f
 8002846:	f7fe f9cc 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 21, &eeprom_data[21]);
 800284a:	4b64      	ldr	r3, [pc, #400]	; (80029dc <main+0x2b8>)
 800284c:	2215      	movs	r2, #21
 800284e:	494e      	ldr	r1, [pc, #312]	; (8002988 <main+0x264>)
 8002850:	207f      	movs	r0, #127	; 0x7f
 8002852:	f7fe f9c6 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 22, &eeprom_data[22]);
 8002856:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <main+0x2bc>)
 8002858:	2216      	movs	r2, #22
 800285a:	494b      	ldr	r1, [pc, #300]	; (8002988 <main+0x264>)
 800285c:	207f      	movs	r0, #127	; 0x7f
 800285e:	f7fe f9c0 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 23, &eeprom_data[23]);
 8002862:	4b60      	ldr	r3, [pc, #384]	; (80029e4 <main+0x2c0>)
 8002864:	2217      	movs	r2, #23
 8002866:	4948      	ldr	r1, [pc, #288]	; (8002988 <main+0x264>)
 8002868:	207f      	movs	r0, #127	; 0x7f
 800286a:	f7fe f9ba 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 24, &eeprom_data[24]);
 800286e:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <main+0x2c4>)
 8002870:	2218      	movs	r2, #24
 8002872:	4945      	ldr	r1, [pc, #276]	; (8002988 <main+0x264>)
 8002874:	207f      	movs	r0, #127	; 0x7f
 8002876:	f7fe f9b4 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 25, &eeprom_data[25]);
 800287a:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <main+0x2c8>)
 800287c:	2219      	movs	r2, #25
 800287e:	4942      	ldr	r1, [pc, #264]	; (8002988 <main+0x264>)
 8002880:	207f      	movs	r0, #127	; 0x7f
 8002882:	f7fe f9ae 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 26, &eeprom_data[26]);
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <main+0x2cc>)
 8002888:	221a      	movs	r2, #26
 800288a:	493f      	ldr	r1, [pc, #252]	; (8002988 <main+0x264>)
 800288c:	207f      	movs	r0, #127	; 0x7f
 800288e:	f7fe f9a8 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 27, &eeprom_data[27]);
 8002892:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <main+0x2d0>)
 8002894:	221b      	movs	r2, #27
 8002896:	493c      	ldr	r1, [pc, #240]	; (8002988 <main+0x264>)
 8002898:	207f      	movs	r0, #127	; 0x7f
 800289a:	f7fe f9a2 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 28, &eeprom_data[28]);
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <main+0x2d4>)
 80028a0:	221c      	movs	r2, #28
 80028a2:	4939      	ldr	r1, [pc, #228]	; (8002988 <main+0x264>)
 80028a4:	207f      	movs	r0, #127	; 0x7f
 80028a6:	f7fe f99c 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 29, &eeprom_data[29]);
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <main+0x2d8>)
 80028ac:	221d      	movs	r2, #29
 80028ae:	4936      	ldr	r1, [pc, #216]	; (8002988 <main+0x264>)
 80028b0:	207f      	movs	r0, #127	; 0x7f
 80028b2:	f7fe f996 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 30, &eeprom_data[30]);
 80028b6:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <main+0x2dc>)
 80028b8:	221e      	movs	r2, #30
 80028ba:	4933      	ldr	r1, [pc, #204]	; (8002988 <main+0x264>)
 80028bc:	207f      	movs	r0, #127	; 0x7f
 80028be:	f7fe f990 	bl	8000be2 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data[31]);
 80028c2:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <main+0x2e0>)
 80028c4:	221f      	movs	r2, #31
 80028c6:	4930      	ldr	r1, [pc, #192]	; (8002988 <main+0x264>)
 80028c8:	207f      	movs	r0, #127	; 0x7f
 80028ca:	f7fe f98a 	bl	8000be2 <Flash_EEPROM_Data_Read>

	L3GD20H_Init();
 80028ce:	f7fe fb95 	bl	8000ffc <L3GD20H_Init>
	PWM_IC_Start();
 80028d2:	f7fe fc93 	bl	80011fc <PWM_IC_Start>
	///
	HAL_Delay( 2500 );
 80028d6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80028da:	f000 feb3 	bl	8003644 <HAL_Delay>
	///

	if( gyro_error == true )
 80028de:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <main+0x2e4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d028      	beq.n	8002938 <main+0x214>
	{
		  sprintf(uartTX, "                                                                                                    ");
 80028e6:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <main+0x2e8>)
 80028e8:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <main+0x2ec>)
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	2365      	movs	r3, #101	; 0x65
 80028f0:	461a      	mov	r2, r3
 80028f2:	f006 faeb 	bl	8008ecc <memcpy>
		  sprintf(uartTX, "\nSystem failed to start! Check gyro connections!\n");
 80028f6:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <main+0x2e8>)
 80028f8:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <main+0x2f0>)
 80028fa:	4614      	mov	r4, r2
 80028fc:	469c      	mov	ip, r3
 80028fe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002902:	4665      	mov	r5, ip
 8002904:	4626      	mov	r6, r4
 8002906:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002908:	6028      	str	r0, [r5, #0]
 800290a:	6069      	str	r1, [r5, #4]
 800290c:	60aa      	str	r2, [r5, #8]
 800290e:	60eb      	str	r3, [r5, #12]
 8002910:	3410      	adds	r4, #16
 8002912:	f10c 0c10 	add.w	ip, ip, #16
 8002916:	4574      	cmp	r4, lr
 8002918:	d1f3      	bne.n	8002902 <main+0x1de>
 800291a:	4662      	mov	r2, ip
 800291c:	4623      	mov	r3, r4
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	8013      	strh	r3, [r2, #0]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002922:	2364      	movs	r3, #100	; 0x64
 8002924:	2265      	movs	r2, #101	; 0x65
 8002926:	4939      	ldr	r1, [pc, #228]	; (8002a0c <main+0x2e8>)
 8002928:	483b      	ldr	r0, [pc, #236]	; (8002a18 <main+0x2f4>)
 800292a:	f005 fce7 	bl	80082fc <HAL_UART_Transmit>

		  while ( gyro_error ) {	} 		// Endless Loop
 800292e:	bf00      	nop
 8002930:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <main+0x2e4>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1fb      	bne.n	8002930 <main+0x20c>
	}

	sprintf(uartTX, "                                                                                                    ");
 8002938:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <main+0x2e8>)
 800293a:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <main+0x2ec>)
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	2365      	movs	r3, #101	; 0x65
 8002942:	461a      	mov	r2, r3
 8002944:	f006 fac2 	bl	8008ecc <memcpy>
	sprintf(uartTX, "\nSystem started!\n");
 8002948:	4a30      	ldr	r2, [pc, #192]	; (8002a0c <main+0x2e8>)
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <main+0x2f8>)
 800294c:	4615      	mov	r5, r2
 800294e:	461c      	mov	r4, r3
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	6028      	str	r0, [r5, #0]
 8002954:	6069      	str	r1, [r5, #4]
 8002956:	60aa      	str	r2, [r5, #8]
 8002958:	60eb      	str	r3, [r5, #12]
 800295a:	8823      	ldrh	r3, [r4, #0]
 800295c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800295e:	2364      	movs	r3, #100	; 0x64
 8002960:	2265      	movs	r2, #101	; 0x65
 8002962:	492a      	ldr	r1, [pc, #168]	; (8002a0c <main+0x2e8>)
 8002964:	482c      	ldr	r0, [pc, #176]	; (8002a18 <main+0x2f4>)
 8002966:	f005 fcc9 	bl	80082fc <HAL_UART_Transmit>
	HAL_Delay( 2500 );
 800296a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800296e:	f000 fe69 	bl	8003644 <HAL_Delay>

	if ( eeprom_data[31] == 92 )
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <main+0x260>)
 8002974:	7fdb      	ldrb	r3, [r3, #31]
 8002976:	2b5c      	cmp	r3, #92	; 0x5c
 8002978:	f040 80e4 	bne.w	8002b44 <main+0x420>
	{

		  while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 800297c:	e08a      	b.n	8002a94 <main+0x370>
		  {
			  for (int i = 0; i <= 50000000; i++ )
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	e083      	b.n	8002a8c <main+0x368>
 8002984:	20000080 	.word	0x20000080
 8002988:	0803f800 	.word	0x0803f800
 800298c:	20000081 	.word	0x20000081
 8002990:	20000082 	.word	0x20000082
 8002994:	20000083 	.word	0x20000083
 8002998:	20000084 	.word	0x20000084
 800299c:	20000085 	.word	0x20000085
 80029a0:	20000086 	.word	0x20000086
 80029a4:	20000087 	.word	0x20000087
 80029a8:	20000088 	.word	0x20000088
 80029ac:	20000089 	.word	0x20000089
 80029b0:	2000008a 	.word	0x2000008a
 80029b4:	2000008b 	.word	0x2000008b
 80029b8:	2000008c 	.word	0x2000008c
 80029bc:	2000008d 	.word	0x2000008d
 80029c0:	2000008e 	.word	0x2000008e
 80029c4:	2000008f 	.word	0x2000008f
 80029c8:	20000090 	.word	0x20000090
 80029cc:	20000091 	.word	0x20000091
 80029d0:	20000092 	.word	0x20000092
 80029d4:	20000093 	.word	0x20000093
 80029d8:	20000094 	.word	0x20000094
 80029dc:	20000095 	.word	0x20000095
 80029e0:	20000096 	.word	0x20000096
 80029e4:	20000097 	.word	0x20000097
 80029e8:	20000098 	.word	0x20000098
 80029ec:	20000099 	.word	0x20000099
 80029f0:	2000009a 	.word	0x2000009a
 80029f4:	2000009b 	.word	0x2000009b
 80029f8:	2000009c 	.word	0x2000009c
 80029fc:	2000009d 	.word	0x2000009d
 8002a00:	2000009e 	.word	0x2000009e
 8002a04:	2000009f 	.word	0x2000009f
 8002a08:	2000007c 	.word	0x2000007c
 8002a0c:	200002a4 	.word	0x200002a4
 8002a10:	080093dc 	.word	0x080093dc
 8002a14:	08009444 	.word	0x08009444
 8002a18:	200001f8 	.word	0x200001f8
 8002a1c:	08009478 	.word	0x08009478
			  {
				  if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <main+0x51c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d12e      	bne.n	8002a86 <main+0x362>
 8002a28:	2101      	movs	r1, #1
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f001 fa55 	bl	8003edc <HAL_GPIO_ReadPin>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d026      	beq.n	8002a86 <main+0x362>
				  {
					  sprintf(uartTX, "                                                                                                    ");
 8002a38:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <main+0x520>)
 8002a3a:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <main+0x524>)
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2365      	movs	r3, #101	; 0x65
 8002a42:	461a      	mov	r2, r3
 8002a44:	f006 fa42 	bl	8008ecc <memcpy>
					  sprintf(uartTX, "\nESC Calibration is starting! Reset after calibration!\n");
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <main+0x520>)
 8002a4a:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <main+0x528>)
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	469c      	mov	ip, r3
 8002a50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002a54:	4665      	mov	r5, ip
 8002a56:	4626      	mov	r6, r4
 8002a58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a5a:	6028      	str	r0, [r5, #0]
 8002a5c:	6069      	str	r1, [r5, #4]
 8002a5e:	60aa      	str	r2, [r5, #8]
 8002a60:	60eb      	str	r3, [r5, #12]
 8002a62:	3410      	adds	r4, #16
 8002a64:	f10c 0c10 	add.w	ip, ip, #16
 8002a68:	4574      	cmp	r4, lr
 8002a6a:	d1f3      	bne.n	8002a54 <main+0x330>
 8002a6c:	4662      	mov	r2, ip
 8002a6e:	4623      	mov	r3, r4
 8002a70:	cb03      	ldmia	r3!, {r0, r1}
 8002a72:	6010      	str	r0, [r2, #0]
 8002a74:	6051      	str	r1, [r2, #4]
					  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002a76:	2364      	movs	r3, #100	; 0x64
 8002a78:	2265      	movs	r2, #101	; 0x65
 8002a7a:	4972      	ldr	r1, [pc, #456]	; (8002c44 <main+0x520>)
 8002a7c:	4874      	ldr	r0, [pc, #464]	; (8002c50 <main+0x52c>)
 8002a7e:	f005 fc3d 	bl	80082fc <HAL_UART_Transmit>

					  ESC_Calibration();
 8002a82:	f7fd ffbf 	bl	8000a04 <ESC_Calibration>
			  for (int i = 0; i <= 50000000; i++ )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a6c      	ldr	r2, [pc, #432]	; (8002c40 <main+0x51c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	ddc5      	ble.n	8002a20 <main+0x2fc>
		  while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002a94:	2101      	movs	r1, #1
 8002a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9a:	f001 fa1f 	bl	8003edc <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af6c 	bne.w	800297e <main+0x25a>
			  }
		  }

		  /////////////////////////////////////////////////////////////////////////

		  sprintf(uartTX, "                                                                                                    ");
 8002aa6:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <main+0x520>)
 8002aa8:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <main+0x524>)
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	2365      	movs	r3, #101	; 0x65
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f006 fa0b 	bl	8008ecc <memcpy>
		  sprintf(uartTX, "\nFlight Control Setup is starting!\n");
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <main+0x520>)
 8002ab8:	4a66      	ldr	r2, [pc, #408]	; (8002c54 <main+0x530>)
 8002aba:	4614      	mov	r4, r2
 8002abc:	469c      	mov	ip, r3
 8002abe:	f104 0e20 	add.w	lr, r4, #32
 8002ac2:	4665      	mov	r5, ip
 8002ac4:	4626      	mov	r6, r4
 8002ac6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ac8:	6028      	str	r0, [r5, #0]
 8002aca:	6069      	str	r1, [r5, #4]
 8002acc:	60aa      	str	r2, [r5, #8]
 8002ace:	60eb      	str	r3, [r5, #12]
 8002ad0:	3410      	adds	r4, #16
 8002ad2:	f10c 0c10 	add.w	ip, ip, #16
 8002ad6:	4574      	cmp	r4, lr
 8002ad8:	d1f3      	bne.n	8002ac2 <main+0x39e>
 8002ada:	4663      	mov	r3, ip
 8002adc:	4622      	mov	r2, r4
 8002ade:	6810      	ldr	r0, [r2, #0]
 8002ae0:	6018      	str	r0, [r3, #0]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002ae2:	2364      	movs	r3, #100	; 0x64
 8002ae4:	2265      	movs	r2, #101	; 0x65
 8002ae6:	4957      	ldr	r1, [pc, #348]	; (8002c44 <main+0x520>)
 8002ae8:	4859      	ldr	r0, [pc, #356]	; (8002c50 <main+0x52c>)
 8002aea:	f005 fc07 	bl	80082fc <HAL_UART_Transmit>

		  Flight_Control_Setup();
 8002aee:	f7fe f89f 	bl	8000c30 <Flight_Control_Setup>

		  sprintf(uartTX, "                                                                                                    ");
 8002af2:	4a54      	ldr	r2, [pc, #336]	; (8002c44 <main+0x520>)
 8002af4:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <main+0x524>)
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	2365      	movs	r3, #101	; 0x65
 8002afc:	461a      	mov	r2, r3
 8002afe:	f006 f9e5 	bl	8008ecc <memcpy>
		  sprintf(uartTX, "\nFlight Control Setup is done! Ready to fly!\n");
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <main+0x520>)
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <main+0x534>)
 8002b06:	4614      	mov	r4, r2
 8002b08:	469c      	mov	ip, r3
 8002b0a:	f104 0e20 	add.w	lr, r4, #32
 8002b0e:	4665      	mov	r5, ip
 8002b10:	4626      	mov	r6, r4
 8002b12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b14:	6028      	str	r0, [r5, #0]
 8002b16:	6069      	str	r1, [r5, #4]
 8002b18:	60aa      	str	r2, [r5, #8]
 8002b1a:	60eb      	str	r3, [r5, #12]
 8002b1c:	3410      	adds	r4, #16
 8002b1e:	f10c 0c10 	add.w	ip, ip, #16
 8002b22:	4574      	cmp	r4, lr
 8002b24:	d1f3      	bne.n	8002b0e <main+0x3ea>
 8002b26:	4665      	mov	r5, ip
 8002b28:	4623      	mov	r3, r4
 8002b2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b2c:	6028      	str	r0, [r5, #0]
 8002b2e:	6069      	str	r1, [r5, #4]
 8002b30:	60aa      	str	r2, [r5, #8]
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	81ab      	strh	r3, [r5, #12]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002b36:	2364      	movs	r3, #100	; 0x64
 8002b38:	2265      	movs	r2, #101	; 0x65
 8002b3a:	4942      	ldr	r1, [pc, #264]	; (8002c44 <main+0x520>)
 8002b3c:	4844      	ldr	r0, [pc, #272]	; (8002c50 <main+0x52c>)
 8002b3e:	f005 fbdd 	bl	80082fc <HAL_UART_Transmit>
 8002b42:	e023      	b.n	8002b8c <main+0x468>
	}
	else
	{
		  sprintf(uartTX, "                                                                                                    ");
 8002b44:	4a3f      	ldr	r2, [pc, #252]	; (8002c44 <main+0x520>)
 8002b46:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <main+0x524>)
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2365      	movs	r3, #101	; 0x65
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f006 f9bc 	bl	8008ecc <memcpy>
		  sprintf(uartTX, "\nMain Setup has not been done correctly!\n");
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <main+0x520>)
 8002b56:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <main+0x538>)
 8002b58:	4614      	mov	r4, r2
 8002b5a:	469c      	mov	ip, r3
 8002b5c:	f104 0e20 	add.w	lr, r4, #32
 8002b60:	4665      	mov	r5, ip
 8002b62:	4626      	mov	r6, r4
 8002b64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b66:	6028      	str	r0, [r5, #0]
 8002b68:	6069      	str	r1, [r5, #4]
 8002b6a:	60aa      	str	r2, [r5, #8]
 8002b6c:	60eb      	str	r3, [r5, #12]
 8002b6e:	3410      	adds	r4, #16
 8002b70:	f10c 0c10 	add.w	ip, ip, #16
 8002b74:	4574      	cmp	r4, lr
 8002b76:	d1f3      	bne.n	8002b60 <main+0x43c>
 8002b78:	4662      	mov	r2, ip
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	cb03      	ldmia	r3!, {r0, r1}
 8002b7e:	6010      	str	r0, [r2, #0]
 8002b80:	6051      	str	r1, [r2, #4]
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	8113      	strh	r3, [r2, #8]

		  Flash_ErasePage( 0x0803F800 );
 8002b86:	4836      	ldr	r0, [pc, #216]	; (8002c60 <main+0x53c>)
 8002b88:	f7fd ffee 	bl	8000b68 <Flash_ErasePage>
	}

	sprintf(uartTX, "                                                                                                    ");
 8002b8c:	4a2d      	ldr	r2, [pc, #180]	; (8002c44 <main+0x520>)
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <main+0x524>)
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	2365      	movs	r3, #101	; 0x65
 8002b96:	461a      	mov	r2, r3
 8002b98:	f006 f998 	bl	8008ecc <memcpy>
	sprintf(uartTX, "\nWhat up, my glip-glops!!!\n");
 8002b9c:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <main+0x520>)
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <main+0x540>)
 8002ba0:	4615      	mov	r5, r2
 8002ba2:	461c      	mov	r4, r3
 8002ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba6:	6028      	str	r0, [r5, #0]
 8002ba8:	6069      	str	r1, [r5, #4]
 8002baa:	60aa      	str	r2, [r5, #8]
 8002bac:	60eb      	str	r3, [r5, #12]
 8002bae:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002bb0:	6128      	str	r0, [r5, #16]
 8002bb2:	6169      	str	r1, [r5, #20]
 8002bb4:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002bb6:	2364      	movs	r3, #100	; 0x64
 8002bb8:	2265      	movs	r2, #101	; 0x65
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <main+0x520>)
 8002bbc:	4824      	ldr	r0, [pc, #144]	; (8002c50 <main+0x52c>)
 8002bbe:	f005 fb9d 	bl	80082fc <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc8:	f001 f988 	bl	8003edc <HAL_GPIO_ReadPin>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f7      	beq.n	8002bc2 <main+0x49e>
	  {
		  for (int i = 0; i <= 50000000; i++ )
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	e02e      	b.n	8002c36 <main+0x512>
		  {
			  if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <main+0x51c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d127      	bne.n	8002c30 <main+0x50c>
 8002be0:	2101      	movs	r1, #1
 8002be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be6:	f001 f979 	bl	8003edc <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01f      	beq.n	8002c30 <main+0x50c>
			  {
				  sprintf(uartTX, "                                                                                                    ");
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <main+0x520>)
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <main+0x524>)
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	2365      	movs	r3, #101	; 0x65
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f006 f966 	bl	8008ecc <memcpy>
				  sprintf(uartTX, "\nSetup is starting..!\n");
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <main+0x520>)
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <main+0x544>)
 8002c04:	4614      	mov	r4, r2
 8002c06:	461d      	mov	r5, r3
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	6020      	str	r0, [r4, #0]
 8002c0c:	6061      	str	r1, [r4, #4]
 8002c0e:	60a2      	str	r2, [r4, #8]
 8002c10:	60e3      	str	r3, [r4, #12]
 8002c12:	6828      	ldr	r0, [r5, #0]
 8002c14:	6120      	str	r0, [r4, #16]
 8002c16:	88ab      	ldrh	r3, [r5, #4]
 8002c18:	79aa      	ldrb	r2, [r5, #6]
 8002c1a:	82a3      	strh	r3, [r4, #20]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	75a3      	strb	r3, [r4, #22]
				  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002c20:	2364      	movs	r3, #100	; 0x64
 8002c22:	2265      	movs	r2, #101	; 0x65
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <main+0x520>)
 8002c26:	480a      	ldr	r0, [pc, #40]	; (8002c50 <main+0x52c>)
 8002c28:	f005 fb68 	bl	80082fc <HAL_UART_Transmit>

				  Main_Setup( );
 8002c2c:	f7fe fce4 	bl	80015f8 <Main_Setup>
		  for (int i = 0; i <= 50000000; i++ )
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	4a01      	ldr	r2, [pc, #4]	; (8002c40 <main+0x51c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	ddcc      	ble.n	8002bd8 <main+0x4b4>
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002c3e:	e7c0      	b.n	8002bc2 <main+0x49e>
 8002c40:	02faf080 	.word	0x02faf080
 8002c44:	200002a4 	.word	0x200002a4
 8002c48:	080093dc 	.word	0x080093dc
 8002c4c:	0800948c 	.word	0x0800948c
 8002c50:	200001f8 	.word	0x200001f8
 8002c54:	080094c4 	.word	0x080094c4
 8002c58:	080094e8 	.word	0x080094e8
 8002c5c:	08009518 	.word	0x08009518
 8002c60:	0803f800 	.word	0x0803f800
 8002c64:	08009544 	.word	0x08009544
 8002c68:	08009560 	.word	0x08009560

08002c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b09e      	sub	sp, #120	; 0x78
 8002c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c76:	2228      	movs	r2, #40	; 0x28
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f006 f931 	bl	8008ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c90:	463b      	mov	r3, r7
 8002c92:	223c      	movs	r2, #60	; 0x3c
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f006 f923 	bl	8008ee2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002caa:	2301      	movs	r3, #1
 8002cac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cae:	2310      	movs	r3, #16
 8002cb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002cbc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cc0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fc3e 	bl	8005548 <HAL_RCC_OscConfig>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002cd2:	f000 fa1b 	bl	800310c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fb30 	bl	8006358 <HAL_RCC_ClockConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002cfe:	f000 fa05 	bl	800310c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d02:	2321      	movs	r3, #33	; 0x21
 8002d04:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d0e:	463b      	mov	r3, r7
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fd57 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002d1c:	f000 f9f6 	bl	800310c <Error_Handler>
  }
}
 8002d20:	bf00      	nop
 8002d22:	3778      	adds	r7, #120	; 0x78
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <MX_I2C1_Init+0x78>)
 8002d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d34:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <MX_I2C1_Init+0x7c>)
 8002d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d64:	f001 f8ea 	bl	8003f3c <HAL_I2C_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d6e:	f000 f9cd 	bl	800310c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d72:	2100      	movs	r1, #0
 8002d74:	4809      	ldr	r0, [pc, #36]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d76:	f002 fb2f 	bl	80053d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d80:	f000 f9c4 	bl	800310c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d84:	2100      	movs	r1, #0
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_I2C1_Init+0x74>)
 8002d88:	f002 fb71 	bl	800546e <HAL_I2CEx_ConfigDigitalFilter>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d92:	f000 f9bb 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000150 	.word	0x20000150
 8002da0:	40005400 	.word	0x40005400
 8002da4:	0010020a 	.word	0x0010020a

08002da8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002dd0:	2248      	movs	r2, #72	; 0x48
 8002dd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002ddc:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002de0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002dee:	4827      	ldr	r0, [pc, #156]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002df0:	f003 ff50 	bl	8006c94 <HAL_TIM_IC_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002dfa:	f000 f987 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481f      	ldr	r0, [pc, #124]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002e0e:	f005 f989 	bl	8008124 <HAL_TIMEx_MasterConfigSynchronization>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002e18:	f000 f978 	bl	800310c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e20:	2301      	movs	r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4619      	mov	r1, r3
 8002e32:	4816      	ldr	r0, [pc, #88]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002e34:	f004 f957 	bl	80070e6 <HAL_TIM_IC_ConfigChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002e3e:	f000 f965 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	2204      	movs	r2, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4810      	ldr	r0, [pc, #64]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002e4a:	f004 f94c 	bl	80070e6 <HAL_TIM_IC_ConfigChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002e54:	f000 f95a 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	480b      	ldr	r0, [pc, #44]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002e60:	f004 f941 	bl	80070e6 <HAL_TIM_IC_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002e6a:	f000 f94f 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	220c      	movs	r2, #12
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_TIM2_Init+0xe4>)
 8002e76:	f004 f936 	bl	80070e6 <HAL_TIM_IC_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002e80:	f000 f944 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e84:	bf00      	nop
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000104 	.word	0x20000104

08002e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	; 0x38
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]
 8002ebe:	615a      	str	r2, [r3, #20]
 8002ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002ec4:	4a3e      	ldr	r2, [pc, #248]	; (8002fc0 <MX_TIM3_Init+0x130>)
 8002ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002eca:	2248      	movs	r2, #72	; 0x48
 8002ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002ed6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002eda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002edc:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee8:	4834      	ldr	r0, [pc, #208]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002eea:	f003 fe1b 	bl	8006b24 <HAL_TIM_Base_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ef4:	f000 f90a 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f02:	4619      	mov	r1, r3
 8002f04:	482d      	ldr	r0, [pc, #180]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f06:	f004 faa3 	bl	8007450 <HAL_TIM_ConfigClockSource>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f10:	f000 f8fc 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f14:	4829      	ldr	r0, [pc, #164]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f16:	f003 fe30 	bl	8006b7a <HAL_TIM_PWM_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f20:	f000 f8f4 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4619      	mov	r1, r3
 8002f32:	4822      	ldr	r0, [pc, #136]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f34:	f005 f8f6 	bl	8008124 <HAL_TIMEx_MasterConfigSynchronization>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f3e:	f000 f8e5 	bl	800310c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f42:	2360      	movs	r3, #96	; 0x60
 8002f44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002f50:	2304      	movs	r3, #4
 8002f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	2200      	movs	r2, #0
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4818      	ldr	r0, [pc, #96]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f5c:	f004 f960 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002f66:	f000 f8d1 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4812      	ldr	r0, [pc, #72]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f72:	f004 f955 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002f7c:	f000 f8c6 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f80:	463b      	mov	r3, r7
 8002f82:	2208      	movs	r2, #8
 8002f84:	4619      	mov	r1, r3
 8002f86:	480d      	ldr	r0, [pc, #52]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f88:	f004 f94a 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8002f92:	f000 f8bb 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f96:	463b      	mov	r3, r7
 8002f98:	220c      	movs	r2, #12
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4807      	ldr	r0, [pc, #28]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002f9e:	f004 f93f 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8002fa8:	f000 f8b0 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fac:	4803      	ldr	r0, [pc, #12]	; (8002fbc <MX_TIM3_Init+0x12c>)
 8002fae:	f000 f9a3 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 8002fb2:	bf00      	nop
 8002fb4:	3738      	adds	r7, #56	; 0x38
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200000bc 	.word	0x200000bc
 8002fc0:	40000400 	.word	0x40000400

08002fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fca:	4a15      	ldr	r2, [pc, #84]	; (8003020 <MX_USART1_UART_Init+0x5c>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fd0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fea:	220c      	movs	r2, #12
 8002fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <MX_USART1_UART_Init+0x58>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_USART1_UART_Init+0x58>)
 8003008:	f005 f92a 	bl	8008260 <HAL_UART_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003012:	f000 f87b 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200001f8 	.word	0x200001f8
 8003020:	40013800 	.word	0x40013800

08003024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <MX_GPIO_Init+0xdc>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	4a30      	ldr	r2, [pc, #192]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003044:	6153      	str	r3, [r2, #20]
 8003046:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800305c:	6153      	str	r3, [r2, #20]
 800305e:	4b28      	ldr	r3, [pc, #160]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <MX_GPIO_Init+0xdc>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	4a24      	ldr	r2, [pc, #144]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	6153      	str	r3, [r2, #20]
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003082:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308c:	6153      	str	r3, [r2, #20]
 800308e:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <MX_GPIO_Init+0xdc>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800309a:	2200      	movs	r2, #0
 800309c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a0:	4818      	ldr	r0, [pc, #96]	; (8003104 <MX_GPIO_Init+0xe0>)
 80030a2:	f000 ff33 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80030a6:	2301      	movs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <MX_GPIO_Init+0xe4>)
 80030ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030bc:	f000 fd94 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80030c0:	2304      	movs	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <MX_GPIO_Init+0xe0>)
 80030d4:	f000 fd88 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80030d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	4804      	ldr	r0, [pc, #16]	; (8003104 <MX_GPIO_Init+0xe0>)
 80030f2:	f000 fd79 	bl	8003be8 <HAL_GPIO_Init>

}
 80030f6:	bf00      	nop
 80030f8:	3728      	adds	r7, #40	; 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	48000400 	.word	0x48000400
 8003108:	10120000 	.word	0x10120000

0800310c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <HAL_MspInit+0x44>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <HAL_MspInit+0x44>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6193      	str	r3, [r2, #24]
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_MspInit+0x44>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_MspInit+0x44>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_MspInit+0x44>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_MspInit+0x44>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <HAL_I2C_MspInit+0xac>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d13f      	bne.n	8003206 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <HAL_I2C_MspInit+0xb0>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4a22      	ldr	r2, [pc, #136]	; (8003214 <HAL_I2C_MspInit+0xb0>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003190:	6153      	str	r3, [r2, #20]
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_I2C_MspInit+0xb0>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a2:	2312      	movs	r3, #18
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ae:	2304      	movs	r3, #4
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	4817      	ldr	r0, [pc, #92]	; (8003218 <HAL_I2C_MspInit+0xb4>)
 80031ba:	f000 fd15 	bl	8003be8 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80031be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031c2:	f002 f9a1 	bl	8005508 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80031c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031ca:	f002 f99d 	bl	8005508 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_I2C_MspInit+0xb0>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_I2C_MspInit+0xb0>)
 80031d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031d8:	61d3      	str	r3, [r2, #28]
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_I2C_MspInit+0xb0>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	201f      	movs	r0, #31
 80031ec:	f000 fb27 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031f0:	201f      	movs	r0, #31
 80031f2:	f000 fb40 	bl	8003876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2020      	movs	r0, #32
 80031fc:	f000 fb1f 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003200:	2020      	movs	r0, #32
 8003202:	f000 fb38 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40005400 	.word	0x40005400
 8003214:	40021000 	.word	0x40021000
 8003218:	48000400 	.word	0x48000400

0800321c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d130      	bne.n	80032a0 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_TIM_IC_MspInit+0x8c>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_TIM_IC_MspInit+0x8c>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_TIM_IC_MspInit+0x8c>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_TIM_IC_MspInit+0x8c>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_TIM_IC_MspInit+0x8c>)
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	6153      	str	r3, [r2, #20]
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_TIM_IC_MspInit+0x8c>)
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800326e:	232e      	movs	r3, #46	; 0x2e
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800327e:	2301      	movs	r3, #1
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800328c:	f000 fcac 	bl	8003be8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	201c      	movs	r0, #28
 8003296:	f000 fad2 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800329a:	201c      	movs	r0, #28
 800329c:	f000 faeb 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_TIM_Base_MspInit+0x44>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d113      	bne.n	80032e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_TIM_Base_MspInit+0x48>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <HAL_TIM_Base_MspInit+0x48>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	61d3      	str	r3, [r2, #28]
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_TIM_Base_MspInit+0x48>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	201d      	movs	r0, #29
 80032dc:	f000 faaf 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032e0:	201d      	movs	r0, #29
 80032e2:	f000 fac8 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40021000 	.word	0x40021000

080032f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <HAL_TIM_MspPostInit+0x9c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d138      	bne.n	800338c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <HAL_TIM_MspPostInit+0xa0>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_TIM_MspPostInit+0xa0>)
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	6153      	str	r3, [r2, #20]
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_TIM_MspPostInit+0xa0>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_TIM_MspPostInit+0xa0>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIM_MspPostInit+0xa0>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	6153      	str	r3, [r2, #20]
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_TIM_MspPostInit+0xa0>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800334a:	23c0      	movs	r3, #192	; 0xc0
 800334c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800335a:	2302      	movs	r3, #2
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003368:	f000 fc3e 	bl	8003be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800336c:	2303      	movs	r3, #3
 800336e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003378:	2303      	movs	r3, #3
 800337a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800337c:	2302      	movs	r3, #2
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	4805      	ldr	r0, [pc, #20]	; (800339c <HAL_TIM_MspPostInit+0xa4>)
 8003388:	f000 fc2e 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800338c:	bf00      	nop
 800338e:	3728      	adds	r7, #40	; 0x28
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40000400 	.word	0x40000400
 8003398:	40021000 	.word	0x40021000
 800339c:	48000400 	.word	0x48000400

080033a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_UART_MspInit+0x90>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d131      	bne.n	8003426 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_UART_MspInit+0x94>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <HAL_UART_MspInit+0x94>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6193      	str	r3, [r2, #24]
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_UART_MspInit+0x94>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_UART_MspInit+0x94>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <HAL_UART_MspInit+0x94>)
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e4:	6153      	str	r3, [r2, #20]
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_UART_MspInit+0x94>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003404:	2307      	movs	r3, #7
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003412:	f000 fbe9 	bl	8003be8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	2025      	movs	r0, #37	; 0x25
 800341c:	f000 fa0f 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003420:	2025      	movs	r0, #37	; 0x25
 8003422:	f000 fa28 	bl	8003876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40013800 	.word	0x40013800
 8003434:	40021000 	.word	0x40021000

08003438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <HardFault_Handler+0x4>

0800344c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <MemManage_Handler+0x4>

08003452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <BusFault_Handler+0x4>

08003458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800345c:	e7fe      	b.n	800345c <UsageFault_Handler+0x4>

0800345e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800348c:	f000 f8ba 	bl	8003604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <TIM2_IRQHandler+0x10>)
 800349a:	f003 fd05 	bl	8006ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000104 	.word	0x20000104

080034a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034ac:	4802      	ldr	r0, [pc, #8]	; (80034b8 <TIM3_IRQHandler+0x10>)
 80034ae:	f003 fcfb 	bl	8006ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200000bc 	.word	0x200000bc

080034bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <I2C1_EV_IRQHandler+0x10>)
 80034c2:	f000 fff9 	bl	80044b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000150 	.word	0x20000150

080034d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <I2C1_ER_IRQHandler+0x10>)
 80034d6:	f001 f809 	bl	80044ec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000150 	.word	0x20000150

080034e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <USART1_IRQHandler+0x10>)
 80034ea:	f004 ff9b 	bl	8008424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200001f8 	.word	0x200001f8

080034f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <SystemInit+0x28>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <SystemInit+0x28>)
 8003504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SystemInit+0x28>)
 800350e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003512:	609a      	str	r2, [r3, #8]
#endif
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800355c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003528:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800352a:	e003      	b.n	8003534 <LoopCopyDataInit>

0800352c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800352e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003530:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003532:	3104      	adds	r1, #4

08003534 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003534:	480b      	ldr	r0, [pc, #44]	; (8003564 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003538:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800353a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800353c:	d3f6      	bcc.n	800352c <CopyDataInit>
	ldr	r2, =_sbss
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003540:	e002      	b.n	8003548 <LoopFillZerobss>

08003542 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003542:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003544:	f842 3b04 	str.w	r3, [r2], #4

08003548 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <LoopForever+0x16>)
	cmp	r2, r3
 800354a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800354c:	d3f9      	bcc.n	8003542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800354e:	f7ff ffd3 	bl	80034f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003552:	f005 fc97 	bl	8008e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003556:	f7ff f8e5 	bl	8002724 <main>

0800355a <LoopForever>:

LoopForever:
    b LoopForever
 800355a:	e7fe      	b.n	800355a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800355c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003560:	080095b8 	.word	0x080095b8
	ldr	r0, =_sdata
 8003564:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003568:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800356c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003570:	200003c0 	.word	0x200003c0

08003574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003574:	e7fe      	b.n	8003574 <ADC1_2_IRQHandler>
	...

08003578 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_Init+0x28>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <HAL_Init+0x28>)
 8003582:	f043 0310 	orr.w	r3, r3, #16
 8003586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003588:	2003      	movs	r0, #3
 800358a:	f000 f94d 	bl	8003828 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800358e:	2000      	movs	r0, #0
 8003590:	f000 f808 	bl	80035a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003594:	f7ff fdc2 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40022000 	.word	0x40022000

080035a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_InitTick+0x54>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_InitTick+0x58>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f965 	bl	8003892 <HAL_SYSTICK_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00e      	b.n	80035f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d80a      	bhi.n	80035ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d8:	2200      	movs	r2, #0
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f000 f92d 	bl	800383e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e4:	4a06      	ldr	r2, [pc, #24]	; (8003600 <HAL_InitTick+0x5c>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000004 	.word	0x20000004
 80035fc:	2000000c 	.word	0x2000000c
 8003600:	20000008 	.word	0x20000008

08003604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_IncTick+0x20>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_IncTick+0x24>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4413      	add	r3, r2
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_IncTick+0x24>)
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000000c 	.word	0x2000000c
 8003628:	20000398 	.word	0x20000398

0800362c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_GetTick+0x14>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000398 	.word	0x20000398

08003644 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff ffee 	bl	800362c <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d005      	beq.n	800366a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_Delay+0x40>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800366a:	bf00      	nop
 800366c:	f7ff ffde 	bl	800362c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	429a      	cmp	r2, r3
 800367a:	d8f7      	bhi.n	800366c <HAL_Delay+0x28>
  {
  }
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	2000000c 	.word	0x2000000c

08003688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a4:	4013      	ands	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	60d3      	str	r3, [r2, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <__NVIC_GetPriorityGrouping+0x18>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 0307 	and.w	r3, r3, #7
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db0b      	blt.n	8003716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f003 021f 	and.w	r2, r3, #31
 8003704:	4907      	ldr	r1, [pc, #28]	; (8003724 <__NVIC_EnableIRQ+0x38>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2001      	movs	r0, #1
 800370e:	fa00 f202 	lsl.w	r2, r0, r2
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000e100 	.word	0xe000e100

08003728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	; (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	; (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf28      	it	cs
 800379a:	2304      	movcs	r3, #4
 800379c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d902      	bls.n	80037ac <NVIC_EncodePriority+0x30>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3b03      	subs	r3, #3
 80037aa:	e000      	b.n	80037ae <NVIC_EncodePriority+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43d9      	mvns	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	4313      	orrs	r3, r2
         );
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f4:	d301      	bcc.n	80037fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00f      	b.n	800381a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <SysTick_Config+0x40>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003802:	210f      	movs	r1, #15
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f7ff ff8e 	bl	8003728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SysTick_Config+0x40>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003812:	4b04      	ldr	r3, [pc, #16]	; (8003824 <SysTick_Config+0x40>)
 8003814:	2207      	movs	r2, #7
 8003816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	e000e010 	.word	0xe000e010

08003828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff29 	bl	8003688 <__NVIC_SetPriorityGrouping>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003850:	f7ff ff3e 	bl	80036d0 <__NVIC_GetPriorityGrouping>
 8003854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7ff ff8e 	bl	800377c <NVIC_EncodePriority>
 8003860:	4602      	mov	r2, r0
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff5d 	bl	8003728 <__NVIC_SetPriority>
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff31 	bl	80036ec <__NVIC_EnableIRQ>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ffa2 	bl	80037e4 <SysTick_Config>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d005      	beq.n	80038cc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2204      	movs	r2, #4
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e027      	b.n	800391c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 020e 	bic.w	r2, r2, #14
 80038da:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f202 	lsl.w	r2, r1, r2
 80038fa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
    } 
  }
  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_FLASH_Program+0xd8>)
 800395c:	7e1b      	ldrb	r3, [r3, #24]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_FLASH_Program+0x26>
 8003962:	2302      	movs	r3, #2
 8003964:	e054      	b.n	8003a10 <HAL_FLASH_Program+0xd0>
 8003966:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <HAL_FLASH_Program+0xd8>)
 8003968:	2201      	movs	r2, #1
 800396a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800396c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003970:	f000 f8a8 	bl	8003ac4 <FLASH_WaitForLastOperation>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d144      	bne.n	8003a08 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003984:	2301      	movs	r3, #1
 8003986:	757b      	strb	r3, [r7, #21]
 8003988:	e007      	b.n	800399a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d102      	bne.n	8003996 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003990:	2302      	movs	r3, #2
 8003992:	757b      	strb	r3, [r7, #21]
 8003994:	e001      	b.n	800399a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003996:	2304      	movs	r3, #4
 8003998:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800399a:	2300      	movs	r3, #0
 800399c:	75bb      	strb	r3, [r7, #22]
 800399e:	e02d      	b.n	80039fc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80039a0:	7dbb      	ldrb	r3, [r7, #22]
 80039a2:	005a      	lsls	r2, r3, #1
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	eb02 0c03 	add.w	ip, r2, r3
 80039aa:	7dbb      	ldrb	r3, [r7, #22]
 80039ac:	0119      	lsls	r1, r3, #4
 80039ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b2:	f1c1 0620 	rsb	r6, r1, #32
 80039b6:	f1a1 0020 	sub.w	r0, r1, #32
 80039ba:	fa22 f401 	lsr.w	r4, r2, r1
 80039be:	fa03 f606 	lsl.w	r6, r3, r6
 80039c2:	4334      	orrs	r4, r6
 80039c4:	fa23 f000 	lsr.w	r0, r3, r0
 80039c8:	4304      	orrs	r4, r0
 80039ca:	fa23 f501 	lsr.w	r5, r3, r1
 80039ce:	b2a3      	uxth	r3, r4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4660      	mov	r0, ip
 80039d4:	f000 f85a 	bl	8003a8c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039dc:	f000 f872 	bl	8003ac4 <FLASH_WaitForLastOperation>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039e4:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <HAL_FLASH_Program+0xdc>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <HAL_FLASH_Program+0xdc>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d107      	bne.n	8003a06 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80039f6:	7dbb      	ldrb	r3, [r7, #22]
 80039f8:	3301      	adds	r3, #1
 80039fa:	75bb      	strb	r3, [r7, #22]
 80039fc:	7dba      	ldrb	r2, [r7, #22]
 80039fe:	7d7b      	ldrb	r3, [r7, #21]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d3cd      	bcc.n	80039a0 <HAL_FLASH_Program+0x60>
 8003a04:	e000      	b.n	8003a08 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003a06:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_FLASH_Program+0xd8>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	761a      	strb	r2, [r3, #24]

  return status;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a18:	200003a0 	.word	0x200003a0
 8003a1c:	40022000 	.word	0x40022000

08003a20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_FLASH_Unlock+0x40>)
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_FLASH_Unlock+0x40>)
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <HAL_FLASH_Unlock+0x44>)
 8003a3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_FLASH_Unlock+0x40>)
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_FLASH_Unlock+0x48>)
 8003a40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <HAL_FLASH_Unlock+0x40>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003a52:	79fb      	ldrb	r3, [r7, #7]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40022000 	.word	0x40022000
 8003a64:	45670123 	.word	0x45670123
 8003a68:	cdef89ab 	.word	0xcdef89ab

08003a6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_FLASH_Lock+0x1c>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <HAL_FLASH_Lock+0x1c>)
 8003a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40022000 	.word	0x40022000

08003a8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <FLASH_Program_HalfWord+0x30>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <FLASH_Program_HalfWord+0x34>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <FLASH_Program_HalfWord+0x34>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	801a      	strh	r2, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	200003a0 	.word	0x200003a0
 8003ac0:	40022000 	.word	0x40022000

08003ac4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7ff fdae 	bl	800362c <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ad2:	e010      	b.n	8003af6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d00c      	beq.n	8003af6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <FLASH_WaitForLastOperation+0x2e>
 8003ae2:	f7ff fda3 	bl	800362c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d201      	bcs.n	8003af6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e01f      	b.n	8003b36 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <FLASH_WaitForLastOperation+0x7c>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d0e8      	beq.n	8003ad4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <FLASH_WaitForLastOperation+0x7c>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d102      	bne.n	8003b14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <FLASH_WaitForLastOperation+0x7c>)
 8003b10:	2220      	movs	r2, #32
 8003b12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <FLASH_WaitForLastOperation+0x7c>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d005      	beq.n	8003b2c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <FLASH_WaitForLastOperation+0x7c>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d103      	bne.n	8003b34 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b2c:	f000 f80a 	bl	8003b44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40022000 	.word	0x40022000

08003b44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <FLASH_SetErrorCode+0x5c>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d109      	bne.n	8003b6e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <FLASH_SetErrorCode+0x60>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <FLASH_SetErrorCode+0x60>)
 8003b64:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f043 0310 	orr.w	r3, r3, #16
 8003b6c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <FLASH_SetErrorCode+0x5c>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d109      	bne.n	8003b8e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <FLASH_SetErrorCode+0x60>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <FLASH_SetErrorCode+0x60>)
 8003b84:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <FLASH_SetErrorCode+0x5c>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60d3      	str	r3, [r2, #12]
}  
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	200003a0 	.word	0x200003a0

08003ba8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <FLASH_PageErase+0x38>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <FLASH_PageErase+0x3c>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <FLASH_PageErase+0x3c>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003bc2:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <FLASH_PageErase+0x3c>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <FLASH_PageErase+0x3c>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <FLASH_PageErase+0x3c>)
 8003bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd2:	6113      	str	r3, [r2, #16]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	200003a0 	.word	0x200003a0
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf6:	e154      	b.n	8003ea2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8146 	beq.w	8003e9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d00b      	beq.n	8003c30 <HAL_GPIO_Init+0x48>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d007      	beq.n	8003c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c24:	2b11      	cmp	r3, #17
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b12      	cmp	r3, #18
 8003c2e:	d130      	bne.n	8003c92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c66:	2201      	movs	r2, #1
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0201 	and.w	r2, r3, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0xea>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b12      	cmp	r3, #18
 8003cd0:	d123      	bne.n	8003d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	08da      	lsrs	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3208      	adds	r2, #8
 8003cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	08da      	lsrs	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3208      	adds	r2, #8
 8003d14:	6939      	ldr	r1, [r7, #16]
 8003d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80a0 	beq.w	8003e9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5c:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_GPIO_Init+0x2d8>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_GPIO_Init+0x2d8>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_GPIO_Init+0x2d8>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d74:	4a53      	ldr	r2, [pc, #332]	; (8003ec4 <HAL_GPIO_Init+0x2dc>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d9e:	d019      	beq.n	8003dd4 <HAL_GPIO_Init+0x1ec>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a49      	ldr	r2, [pc, #292]	; (8003ec8 <HAL_GPIO_Init+0x2e0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_GPIO_Init+0x1e8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a48      	ldr	r2, [pc, #288]	; (8003ecc <HAL_GPIO_Init+0x2e4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00d      	beq.n	8003dcc <HAL_GPIO_Init+0x1e4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <HAL_GPIO_Init+0x2e8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <HAL_GPIO_Init+0x1e0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a46      	ldr	r2, [pc, #280]	; (8003ed4 <HAL_GPIO_Init+0x2ec>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_GPIO_Init+0x1dc>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e008      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dc4:	2305      	movs	r3, #5
 8003dc6:	e006      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e004      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	f002 0203 	and.w	r2, r2, #3
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	4093      	lsls	r3, r2
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003de6:	4937      	ldr	r1, [pc, #220]	; (8003ec4 <HAL_GPIO_Init+0x2dc>)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	3302      	adds	r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df4:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e18:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e42:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f47f aea3 	bne.w	8003bf8 <HAL_GPIO_Init+0x10>
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	48000400 	.word	0x48000400
 8003ecc:	48000800 	.word	0x48000800
 8003ed0:	48000c00 	.word	0x48000c00
 8003ed4:	48001000 	.word	0x48001000
 8003ed8:	40010400 	.word	0x40010400

08003edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e001      	b.n	8003efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f1c:	787b      	ldrb	r3, [r7, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f22:	887a      	ldrh	r2, [r7, #2]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f28:	e002      	b.n	8003f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e081      	b.n	8004052 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff f8fe 	bl	8003164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	; 0x24
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	e006      	b.n	8003fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d104      	bne.n	8003fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	ea42 0103 	orr.w	r1, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69d9      	ldr	r1, [r3, #28]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	817b      	strh	r3, [r7, #10]
 800406e:	460b      	mov	r3, r1
 8004070:	813b      	strh	r3, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	f040 80f9 	bne.w	8004276 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_I2C_Mem_Write+0x34>
 800408a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0ed      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2C_Mem_Write+0x4e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0e6      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040b2:	f7ff fabb 	bl	800362c <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2319      	movs	r3, #25
 80040be:	2201      	movs	r2, #1
 80040c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 ffd8 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0d1      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2221      	movs	r2, #33	; 0x21
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2240      	movs	r2, #64	; 0x40
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040fc:	88f8      	ldrh	r0, [r7, #6]
 80040fe:	893a      	ldrh	r2, [r7, #8]
 8004100:	8979      	ldrh	r1, [r7, #10]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4603      	mov	r3, r0
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fb91 	bl	8004834 <I2C_RequestMemoryWrite>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0a9      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d90e      	bls.n	800414c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	b2da      	uxtb	r2, r3
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	2300      	movs	r3, #0
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f001 f8bb 	bl	80052c0 <I2C_TransferConfig>
 800414a:	e00f      	b.n	800416c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	b2da      	uxtb	r2, r3
 800415c:	8979      	ldrh	r1, [r7, #10]
 800415e:	2300      	movs	r3, #0
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f001 f8aa 	bl	80052c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 ffc2 	bl	80050fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e07b      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d034      	beq.n	8004224 <HAL_I2C_Mem_Write+0x1c8>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d130      	bne.n	8004224 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	2200      	movs	r2, #0
 80041ca:	2180      	movs	r1, #128	; 0x80
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 ff54 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e04d      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2bff      	cmp	r3, #255	; 0xff
 80041e4:	d90e      	bls.n	8004204 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	22ff      	movs	r2, #255	; 0xff
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	8979      	ldrh	r1, [r7, #10]
 80041f4:	2300      	movs	r3, #0
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f001 f85f 	bl	80052c0 <I2C_TransferConfig>
 8004202:	e00f      	b.n	8004224 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	b2da      	uxtb	r2, r3
 8004214:	8979      	ldrh	r1, [r7, #10]
 8004216:	2300      	movs	r3, #0
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f001 f84e 	bl	80052c0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d19e      	bne.n	800416c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 ffa1 	bl	800517a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e01a      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2220      	movs	r2, #32
 8004248:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_I2C_Mem_Write+0x224>)
 8004256:	400b      	ands	r3, r1
 8004258:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	fe00e800 	.word	0xfe00e800

08004284 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	f040 80fd 	bne.w	80044a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x34>
 80042b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0f1      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Mem_Read+0x4e>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0ea      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042da:	f7ff f9a7 	bl	800362c <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2319      	movs	r3, #25
 80042e6:	2201      	movs	r2, #1
 80042e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fec4 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d5      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2222      	movs	r2, #34	; 0x22
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004324:	88f8      	ldrh	r0, [r7, #6]
 8004326:	893a      	ldrh	r2, [r7, #8]
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	4603      	mov	r3, r0
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fad1 	bl	80048dc <I2C_RequestMemoryRead>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0ad      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2bff      	cmp	r3, #255	; 0xff
 8004354:	d90e      	bls.n	8004374 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	b2da      	uxtb	r2, r3
 8004362:	8979      	ldrh	r1, [r7, #10]
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_I2C_Mem_Read+0x22c>)
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 ffa7 	bl	80052c0 <I2C_TransferConfig>
 8004372:	e00f      	b.n	8004394 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	b2da      	uxtb	r2, r3
 8004384:	8979      	ldrh	r1, [r7, #10]
 8004386:	4b4a      	ldr	r3, [pc, #296]	; (80044b0 <HAL_I2C_Mem_Read+0x22c>)
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 ff96 	bl	80052c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2200      	movs	r2, #0
 800439c:	2104      	movs	r1, #4
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fe6b 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07c      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d034      	beq.n	8004454 <HAL_I2C_Mem_Read+0x1d0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d130      	bne.n	8004454 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	2200      	movs	r2, #0
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fe3c 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e04d      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2bff      	cmp	r3, #255	; 0xff
 8004414:	d90e      	bls.n	8004434 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	22ff      	movs	r2, #255	; 0xff
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	b2da      	uxtb	r2, r3
 8004422:	8979      	ldrh	r1, [r7, #10]
 8004424:	2300      	movs	r3, #0
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 ff47 	bl	80052c0 <I2C_TransferConfig>
 8004432:	e00f      	b.n	8004454 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	b2da      	uxtb	r2, r3
 8004444:	8979      	ldrh	r1, [r7, #10]
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 ff36 	bl	80052c0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d19a      	bne.n	8004394 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fe89 	bl	800517a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e01a      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2220      	movs	r2, #32
 8004478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_I2C_Mem_Read+0x230>)
 8004486:	400b      	ands	r3, r1
 8004488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	80002400 	.word	0x80002400
 80044b4:	fe00e800 	.word	0xfe00e800

080044b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
  }
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <HAL_I2C_ER_IRQHandler+0x46>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004530:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	0a9b      	lsrs	r3, r3, #10
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d010      	beq.n	8004560 <HAL_I2C_ER_IRQHandler+0x74>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	09db      	lsrs	r3, r3, #7
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	f043 0208 	orr.w	r2, r3, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	0a5b      	lsrs	r3, r3, #9
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d010      	beq.n	800458e <HAL_I2C_ER_IRQHandler+0xa2>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	09db      	lsrs	r3, r3, #7
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	f043 0202 	orr.w	r2, r3, #2
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 030b 	and.w	r3, r3, #11
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fc31 	bl	8004e08 <I2C_ITError>
  }
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	70fb      	strb	r3, [r7, #3]
 80045e2:	4613      	mov	r3, r2
 80045e4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <I2C_Slave_ISR_IT+0x24>
 800464e:	2302      	movs	r3, #2
 8004650:	e0ec      	b.n	800482c <I2C_Slave_ISR_IT+0x1fe>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <I2C_Slave_ISR_IT+0x4c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004672:	6939      	ldr	r1, [r7, #16]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fa67 	bl	8004b48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04d      	beq.n	8004722 <I2C_Slave_ISR_IT+0xf4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d047      	beq.n	8004722 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d128      	bne.n	80046ee <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b28      	cmp	r3, #40	; 0x28
 80046a6:	d108      	bne.n	80046ba <I2C_Slave_ISR_IT+0x8c>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ae:	d104      	bne.n	80046ba <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fb52 	bl	8004d5c <I2C_ITListenCplt>
 80046b8:	e032      	b.n	8004720 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b29      	cmp	r3, #41	; 0x29
 80046c4:	d10e      	bne.n	80046e4 <I2C_Slave_ISR_IT+0xb6>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046cc:	d00a      	beq.n	80046e4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2210      	movs	r2, #16
 80046d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fc8d 	bl	8004ff6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9d5 	bl	8004a8c <I2C_ITSlaveSeqCplt>
 80046e2:	e01d      	b.n	8004720 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2210      	movs	r2, #16
 80046ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80046ec:	e096      	b.n	800481c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2210      	movs	r2, #16
 80046f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <I2C_Slave_ISR_IT+0xe4>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470e:	f040 8085 	bne.w	800481c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	4619      	mov	r1, r3
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fb75 	bl	8004e08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800471e:	e07d      	b.n	800481c <I2C_Slave_ISR_IT+0x1ee>
 8004720:	e07c      	b.n	800481c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d030      	beq.n	8004790 <I2C_Slave_ISR_IT+0x162>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02a      	beq.n	8004790 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d018      	beq.n	8004776 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d14f      	bne.n	8004820 <I2C_Slave_ISR_IT+0x1f2>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004786:	d04b      	beq.n	8004820 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f97f 	bl	8004a8c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800478e:	e047      	b.n	8004820 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	08db      	lsrs	r3, r3, #3
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	08db      	lsrs	r3, r3, #3
 80047a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f8ea 	bl	8004984 <I2C_ITAddrCplt>
 80047b0:	e037      	b.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d031      	beq.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02b      	beq.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d018      	beq.n	8004806 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	851a      	strh	r2, [r3, #40]	; 0x28
 8004804:	e00d      	b.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800480c:	d002      	beq.n	8004814 <I2C_Slave_ISR_IT+0x1e6>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f939 	bl	8004a8c <I2C_ITSlaveSeqCplt>
 800481a:	e002      	b.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800481c:	bf00      	nop
 800481e:	e000      	b.n	8004822 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004820:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4603      	mov	r3, r0
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	460b      	mov	r3, r1
 8004848:	813b      	strh	r3, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	8979      	ldrh	r1, [r7, #10]
 8004854:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <I2C_RequestMemoryWrite+0xa4>)
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fd2f 	bl	80052c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fc47 	bl	80050fa <I2C_WaitOnTXISFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e02c      	b.n	80048d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
 8004886:	e015      	b.n	80048b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	b29b      	uxth	r3, r3
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fc2d 	bl	80050fa <I2C_WaitOnTXISFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e012      	b.n	80048d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048aa:	893b      	ldrh	r3, [r7, #8]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fbdb 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	80002000 	.word	0x80002000

080048dc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	8979      	ldrh	r1, [r7, #10]
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <I2C_RequestMemoryRead+0xa4>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fcdc 	bl	80052c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fbf4 	bl	80050fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e02c      	b.n	8004976 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004922:	893b      	ldrh	r3, [r7, #8]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	629a      	str	r2, [r3, #40]	; 0x28
 800492c:	e015      	b.n	800495a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800492e:	893b      	ldrh	r3, [r7, #8]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	b29b      	uxth	r3, r3
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fbda 	bl	80050fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e012      	b.n	8004976 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004950:	893b      	ldrh	r3, [r7, #8]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2200      	movs	r2, #0
 8004962:	2140      	movs	r1, #64	; 0x40
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb88 	bl	800507a <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	80002000 	.word	0x80002000

08004984 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800499a:	2b28      	cmp	r3, #40	; 0x28
 800499c:	d16a      	bne.n	8004a74 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049bc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049d8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d138      	bne.n	8004a54 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80049e2:	897b      	ldrh	r3, [r7, #10]
 80049e4:	09db      	lsrs	r3, r3, #7
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	89bb      	ldrh	r3, [r7, #12]
 80049ea:	4053      	eors	r3, r2
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11c      	bne.n	8004a30 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80049f6:	897b      	ldrh	r3, [r7, #10]
 80049f8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d13b      	bne.n	8004a84 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2208      	movs	r2, #8
 8004a18:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a22:	89ba      	ldrh	r2, [r7, #12]
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fdd4 	bl	80045d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a2e:	e029      	b.n	8004a84 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fc6f 	bl	800531c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a46:	89ba      	ldrh	r2, [r7, #12]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fdc2 	bl	80045d6 <HAL_I2C_AddrCallback>
}
 8004a52:	e017      	b.n	8004a84 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fc5f 	bl	800531c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a66:	89ba      	ldrh	r2, [r7, #12]
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fdb2 	bl	80045d6 <HAL_I2C_AddrCallback>
}
 8004a72:	e007      	b.n	8004a84 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0b9b      	lsrs	r3, r3, #14
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e00d      	b.n	8004ade <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	0bdb      	lsrs	r3, r3, #15
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004adc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b29      	cmp	r3, #41	; 0x29
 8004ae8:	d112      	bne.n	8004b10 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2228      	movs	r2, #40	; 0x28
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2221      	movs	r2, #33	; 0x21
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004af8:	2101      	movs	r1, #1
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fc0e 	bl	800531c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd50 	bl	80045ae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b0e:	e017      	b.n	8004b40 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1a:	d111      	bne.n	8004b40 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2228      	movs	r2, #40	; 0x28
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2222      	movs	r2, #34	; 0x22
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fbf5 	bl	800531c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fd41 	bl	80045c2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b64:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b21      	cmp	r3, #33	; 0x21
 8004b72:	d002      	beq.n	8004b7a <I2C_ITSlaveCplt+0x32>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b29      	cmp	r3, #41	; 0x29
 8004b78:	d108      	bne.n	8004b8c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b7a:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fbcc 	bl	800531c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2221      	movs	r2, #33	; 0x21
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
 8004b8a:	e00d      	b.n	8004ba8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b22      	cmp	r3, #34	; 0x22
 8004b90:	d002      	beq.n	8004b98 <I2C_ITSlaveCplt+0x50>
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b2a      	cmp	r3, #42	; 0x2a
 8004b96:	d107      	bne.n	8004ba8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b98:	f248 0102 	movw	r1, #32770	; 0x8002
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fbbd 	bl	800531c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2222      	movs	r2, #34	; 0x22
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b64      	ldr	r3, [pc, #400]	; (8004d54 <I2C_ITSlaveCplt+0x20c>)
 8004bc4:	400b      	ands	r3, r1
 8004bc6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fa14 	bl	8004ff6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	0b9b      	lsrs	r3, r3, #14
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d013      	beq.n	8004c02 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004be8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c00:	e018      	b.n	8004c34 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	0bdb      	lsrs	r3, r3, #15
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d012      	beq.n	8004c34 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0304 	bic.w	r3, r3, #4
 8004c46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8a7 	bl	8004e08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b28      	cmp	r3, #40	; 0x28
 8004cc4:	d141      	bne.n	8004d4a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f847 	bl	8004d5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cce:	e03c      	b.n	8004d4a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cd8:	d014      	beq.n	8004d04 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fed6 	bl	8004a8c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <I2C_ITSlaveCplt+0x210>)
 8004ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fc78 	bl	80045f2 <HAL_I2C_ListenCpltCallback>
}
 8004d02:	e022      	b.n	8004d4a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b22      	cmp	r3, #34	; 0x22
 8004d0e:	d10e      	bne.n	8004d2e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fc4b 	bl	80045c2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d2c:	e00d      	b.n	8004d4a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff fc32 	bl	80045ae <HAL_I2C_SlaveTxCpltCallback>
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	fe00e800 	.word	0xfe00e800
 8004d58:	ffff0000 	.word	0xffff0000

08004d5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a26      	ldr	r2, [pc, #152]	; (8004e04 <I2C_ITListenCplt+0xa8>)
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d022      	beq.n	8004dda <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	f043 0204 	orr.w	r2, r3, #4
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dda:	f248 0103 	movw	r1, #32771	; 0x8003
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa9c 	bl	800531c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2210      	movs	r2, #16
 8004dea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fbfc 	bl	80045f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	ffff0000 	.word	0xffff0000

08004e08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a5d      	ldr	r2, [pc, #372]	; (8004f9c <I2C_ITError+0x194>)
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	2b28      	cmp	r3, #40	; 0x28
 8004e3e:	d005      	beq.n	8004e4c <I2C_ITError+0x44>
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b29      	cmp	r3, #41	; 0x29
 8004e44:	d002      	beq.n	8004e4c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d10b      	bne.n	8004e64 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e4c:	2103      	movs	r1, #3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa64 	bl	800531c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2228      	movs	r2, #40	; 0x28
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a50      	ldr	r2, [pc, #320]	; (8004fa0 <I2C_ITError+0x198>)
 8004e60:	635a      	str	r2, [r3, #52]	; 0x34
 8004e62:	e011      	b.n	8004e88 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e64:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa57 	bl	800531c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b60      	cmp	r3, #96	; 0x60
 8004e78:	d003      	beq.n	8004e82 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d039      	beq.n	8004f0a <I2C_ITError+0x102>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b11      	cmp	r3, #17
 8004e9a:	d002      	beq.n	8004ea2 <I2C_ITError+0x9a>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b21      	cmp	r3, #33	; 0x21
 8004ea0:	d133      	bne.n	8004f0a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb0:	d107      	bne.n	8004ec2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ec0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fd2d 	bl	8003926 <HAL_DMA_GetState>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d017      	beq.n	8004f02 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <I2C_ITError+0x19c>)
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fcdf 	bl	80038aa <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d04d      	beq.n	8004f8e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004efc:	4610      	mov	r0, r2
 8004efe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f00:	e045      	b.n	8004f8e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f850 	bl	8004fa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f08:	e041      	b.n	8004f8e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d039      	beq.n	8004f86 <I2C_ITError+0x17e>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b12      	cmp	r3, #18
 8004f16:	d002      	beq.n	8004f1e <I2C_ITError+0x116>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b22      	cmp	r3, #34	; 0x22
 8004f1c:	d133      	bne.n	8004f86 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	d107      	bne.n	8004f3e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f3c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fcef 	bl	8003926 <HAL_DMA_GetState>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d017      	beq.n	8004f7e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <I2C_ITError+0x19c>)
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fca1 	bl	80038aa <HAL_DMA_Abort_IT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f7c:	e009      	b.n	8004f92 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f812 	bl	8004fa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f84:	e005      	b.n	8004f92 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f80e 	bl	8004fa8 <I2C_TreatErrorCallback>
  }
}
 8004f8c:	e002      	b.n	8004f94 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f92:	bf00      	nop
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	ffff0000 	.word	0xffff0000
 8004fa0:	0800462f 	.word	0x0800462f
 8004fa4:	0800503f 	.word	0x0800503f

08004fa8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b60      	cmp	r3, #96	; 0x60
 8004fba:	d10e      	bne.n	8004fda <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fb21 	bl	800461a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fd8:	e009      	b.n	8004fee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fb0c 	bl	8004606 <HAL_I2C_ErrorCallback>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d103      	bne.n	8005014 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2200      	movs	r2, #0
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d007      	beq.n	8005032 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	619a      	str	r2, [r3, #24]
  }
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2200      	movs	r2, #0
 800505a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	2200      	movs	r2, #0
 800506a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff ff9b 	bl	8004fa8 <I2C_TreatErrorCallback>
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800508a:	e022      	b.n	80050d2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d01e      	beq.n	80050d2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7fe faca 	bl	800362c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d113      	bne.n	80050d2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00f      	b.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4013      	ands	r3, r2
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d0cd      	beq.n	800508c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005106:	e02c      	b.n	8005162 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f871 	bl	80051f4 <I2C_IsAcknowledgeFailed>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e02a      	b.n	8005172 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d01e      	beq.n	8005162 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005124:	f7fe fa82 	bl	800362c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d113      	bne.n	8005162 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e007      	b.n	8005172 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d1cb      	bne.n	8005108 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005186:	e028      	b.n	80051da <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f831 	bl	80051f4 <I2C_IsAcknowledgeFailed>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e026      	b.n	80051ea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519c:	f7fe fa46 	bl	800362c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d113      	bne.n	80051da <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e007      	b.n	80051ea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d1cf      	bne.n	8005188 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d151      	bne.n	80052b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800520e:	e022      	b.n	8005256 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d01e      	beq.n	8005256 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005218:	f7fe fa08 	bl	800362c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <I2C_IsAcknowledgeFailed+0x3a>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d113      	bne.n	8005256 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e02e      	b.n	80052b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b20      	cmp	r3, #32
 8005262:	d1d5      	bne.n	8005210 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2210      	movs	r2, #16
 800526a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2220      	movs	r2, #32
 8005272:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff febe 	bl	8004ff6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <I2C_IsAcknowledgeFailed+0xc8>)
 8005286:	400b      	ands	r3, r1
 8005288:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f043 0204 	orr.w	r2, r3, #4
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	fe00e800 	.word	0xfe00e800

080052c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	4613      	mov	r3, r2
 80052d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	0d5b      	lsrs	r3, r3, #21
 80052dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <I2C_TransferConfig+0x58>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	43db      	mvns	r3, r3
 80052e6:	ea02 0103 	and.w	r1, r2, r3
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052f0:	7a7b      	ldrb	r3, [r7, #9]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	03ff63ff 	.word	0x03ff63ff

0800531c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00f      	beq.n	8005356 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800533c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800534a:	2b28      	cmp	r3, #40	; 0x28
 800534c:	d003      	beq.n	8005356 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005354:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005356:	887b      	ldrh	r3, [r7, #2]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00f      	beq.n	8005380 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005366:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005374:	2b28      	cmp	r3, #40	; 0x28
 8005376:	d003      	beq.n	8005380 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800537e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005380:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005384:	2b00      	cmp	r3, #0
 8005386:	da03      	bge.n	8005390 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800538e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005390:	887b      	ldrh	r3, [r7, #2]
 8005392:	2b10      	cmp	r3, #16
 8005394:	d103      	bne.n	800539e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d103      	bne.n	80053ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f043 0320 	orr.w	r3, r3, #32
 80053aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d103      	bne.n	80053ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	43da      	mvns	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	400a      	ands	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d138      	bne.n	8005460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e032      	b.n	8005462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800542a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b20      	cmp	r3, #32
 8005482:	d139      	bne.n	80054f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800548e:	2302      	movs	r3, #2
 8005490:	e033      	b.n	80054fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	; 0x24
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	6193      	str	r3, [r2, #24]
 800551c:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4905      	ldr	r1, [pc, #20]	; (8005544 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4313      	orrs	r3, r2
 8005532:	600b      	str	r3, [r1, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40021000 	.word	0x40021000
 8005544:	40010000 	.word	0x40010000

08005548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800554e:	af00      	add	r7, sp, #0
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f000 bef4 	b.w	800634a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 816a 	beq.w	8005846 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005572:	4bb3      	ldr	r3, [pc, #716]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b04      	cmp	r3, #4
 800557c:	d00c      	beq.n	8005598 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800557e:	4bb0      	ldr	r3, [pc, #704]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	2b08      	cmp	r3, #8
 8005588:	d159      	bne.n	800563e <HAL_RCC_OscConfig+0xf6>
 800558a:	4bad      	ldr	r3, [pc, #692]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005596:	d152      	bne.n	800563e <HAL_RCC_OscConfig+0xf6>
 8005598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800559c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80055a4:	fa93 f3a3 	rbit	r3, r3
 80055a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <HAL_RCC_OscConfig+0x82>
 80055c4:	4b9e      	ldr	r3, [pc, #632]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	e015      	b.n	80055f6 <HAL_RCC_OscConfig+0xae>
 80055ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80055d6:	fa93 f3a3 	rbit	r3, r3
 80055da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80055de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80055e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80055ea:	fa93 f3a3 	rbit	r3, r3
 80055ee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80055f2:	4b93      	ldr	r3, [pc, #588]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80055fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005602:	fa92 f2a2 	rbit	r2, r2
 8005606:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800560a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800560e:	fab2 f282 	clz	r2, r2
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	f042 0220 	orr.w	r2, r2, #32
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	f002 021f 	and.w	r2, r2, #31
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f202 	lsl.w	r2, r1, r2
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 810c 	beq.w	8005844 <HAL_RCC_OscConfig+0x2fc>
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 8106 	bne.w	8005844 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f000 be86 	b.w	800634a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x110>
 800564a:	4b7d      	ldr	r3, [pc, #500]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e030      	b.n	80056ba <HAL_RCC_OscConfig+0x172>
 8005658:	1d3b      	adds	r3, r7, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x134>
 8005662:	4b77      	ldr	r3, [pc, #476]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a76      	ldr	r2, [pc, #472]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b74      	ldr	r3, [pc, #464]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a73      	ldr	r2, [pc, #460]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e01e      	b.n	80056ba <HAL_RCC_OscConfig+0x172>
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005686:	d10c      	bne.n	80056a2 <HAL_RCC_OscConfig+0x15a>
 8005688:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6c      	ldr	r2, [pc, #432]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 800568e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a69      	ldr	r2, [pc, #420]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 800569a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e00b      	b.n	80056ba <HAL_RCC_OscConfig+0x172>
 80056a2:	4b67      	ldr	r3, [pc, #412]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a66      	ldr	r2, [pc, #408]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80056a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b64      	ldr	r3, [pc, #400]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a63      	ldr	r2, [pc, #396]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80056b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056ba:	4b61      	ldr	r3, [pc, #388]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	f023 020f 	bic.w	r2, r3, #15
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	495d      	ldr	r1, [pc, #372]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d059      	beq.n	800578c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd ffa8 	bl	800362c <HAL_GetTick>
 80056dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e2:	f7fd ffa3 	bl	800362c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b64      	cmp	r3, #100	; 0x64
 80056f0:	d902      	bls.n	80056f8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	f000 be29 	b.w	800634a <HAL_RCC_OscConfig+0xe02>
 80056f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005704:	fa93 f3a3 	rbit	r3, r3
 8005708:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800570c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d102      	bne.n	800572a <HAL_RCC_OscConfig+0x1e2>
 8005724:	4b46      	ldr	r3, [pc, #280]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	e015      	b.n	8005756 <HAL_RCC_OscConfig+0x20e>
 800572a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800572e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005736:	fa93 f3a3 	rbit	r3, r3
 800573a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800573e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005742:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005746:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005752:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800575a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800575e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005762:	fa92 f2a2 	rbit	r2, r2
 8005766:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800576a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800576e:	fab2 f282 	clz	r2, r2
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	f042 0220 	orr.w	r2, r2, #32
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	f002 021f 	and.w	r2, r2, #31
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f202 	lsl.w	r2, r1, r2
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ab      	beq.n	80056e2 <HAL_RCC_OscConfig+0x19a>
 800578a:	e05c      	b.n	8005846 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fd ff4e 	bl	800362c <HAL_GetTick>
 8005790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005796:	f7fd ff49 	bl	800362c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d902      	bls.n	80057ac <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	f000 bdcf 	b.w	800634a <HAL_RCC_OscConfig+0xe02>
 80057ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80057b8:	fa93 f3a3 	rbit	r3, r3
 80057bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80057c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c4:	fab3 f383 	clz	r3, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d102      	bne.n	80057de <HAL_RCC_OscConfig+0x296>
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	e015      	b.n	800580a <HAL_RCC_OscConfig+0x2c2>
 80057de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80057f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80057fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80057fe:	fa93 f3a3 	rbit	r3, r3
 8005802:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005806:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <HAL_RCC_OscConfig+0x2f8>)
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800580e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005812:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005816:	fa92 f2a2 	rbit	r2, r2
 800581a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800581e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005822:	fab2 f282 	clz	r2, r2
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	f042 0220 	orr.w	r2, r2, #32
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	f002 021f 	and.w	r2, r2, #31
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f202 	lsl.w	r2, r1, r2
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1ab      	bne.n	8005796 <HAL_RCC_OscConfig+0x24e>
 800583e:	e002      	b.n	8005846 <HAL_RCC_OscConfig+0x2fe>
 8005840:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 816f 	beq.w	8005b34 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005856:	4bd0      	ldr	r3, [pc, #832]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005862:	4bcd      	ldr	r3, [pc, #820]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b08      	cmp	r3, #8
 800586c:	d16c      	bne.n	8005948 <HAL_RCC_OscConfig+0x400>
 800586e:	4bca      	ldr	r3, [pc, #808]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d166      	bne.n	8005948 <HAL_RCC_OscConfig+0x400>
 800587a:	2302      	movs	r3, #2
 800587c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005880:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005884:	fa93 f3a3 	rbit	r3, r3
 8005888:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800588c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005890:	fab3 f383 	clz	r3, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	b2db      	uxtb	r3, r3
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d102      	bne.n	80058aa <HAL_RCC_OscConfig+0x362>
 80058a4:	4bbc      	ldr	r3, [pc, #752]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	e013      	b.n	80058d2 <HAL_RCC_OscConfig+0x38a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80058bc:	2302      	movs	r3, #2
 80058be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80058c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80058ce:	4bb2      	ldr	r3, [pc, #712]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2202      	movs	r2, #2
 80058d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80058d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80058dc:	fa92 f2a2 	rbit	r2, r2
 80058e0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80058e4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80058e8:	fab2 f282 	clz	r2, r2
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	f042 0220 	orr.w	r2, r2, #32
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	f002 021f 	and.w	r2, r2, #31
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f202 	lsl.w	r2, r1, r2
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <HAL_RCC_OscConfig+0x3cc>
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d002      	beq.n	8005914 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f000 bd1b 	b.w	800634a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4ba0      	ldr	r3, [pc, #640]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	21f8      	movs	r1, #248	; 0xf8
 8005924:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800592c:	fa91 f1a1 	rbit	r1, r1
 8005930:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005934:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005938:	fab1 f181 	clz	r1, r1
 800593c:	b2c9      	uxtb	r1, r1
 800593e:	408b      	lsls	r3, r1
 8005940:	4995      	ldr	r1, [pc, #596]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005946:	e0f5      	b.n	8005b34 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8085 	beq.w	8005a5e <HAL_RCC_OscConfig+0x516>
 8005954:	2301      	movs	r3, #1
 8005956:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800595e:	fa93 f3a3 	rbit	r3, r3
 8005962:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005966:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800596a:	fab3 f383 	clz	r3, r3
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	461a      	mov	r2, r3
 800597c:	2301      	movs	r3, #1
 800597e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fd fe54 	bl	800362c <HAL_GetTick>
 8005984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005988:	e00a      	b.n	80059a0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598a:	f7fd fe4f 	bl	800362c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d902      	bls.n	80059a0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	f000 bcd5 	b.w	800634a <HAL_RCC_OscConfig+0xe02>
 80059a0:	2302      	movs	r3, #2
 80059a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80059aa:	fa93 f3a3 	rbit	r3, r3
 80059ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80059b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b6:	fab3 f383 	clz	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d102      	bne.n	80059d0 <HAL_RCC_OscConfig+0x488>
 80059ca:	4b73      	ldr	r3, [pc, #460]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	e013      	b.n	80059f8 <HAL_RCC_OscConfig+0x4b0>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80059e2:	2302      	movs	r3, #2
 80059e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80059e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80059f4:	4b68      	ldr	r3, [pc, #416]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2202      	movs	r2, #2
 80059fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80059fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a02:	fa92 f2a2 	rbit	r2, r2
 8005a06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005a0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005a0e:	fab2 f282 	clz	r2, r2
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	f002 021f 	and.w	r2, r2, #31
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0af      	beq.n	800598a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	21f8      	movs	r1, #248	; 0xf8
 8005a3a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a42:	fa91 f1a1 	rbit	r1, r1
 8005a46:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005a4a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005a4e:	fab1 f181 	clz	r1, r1
 8005a52:	b2c9      	uxtb	r1, r1
 8005a54:	408b      	lsls	r3, r1
 8005a56:	4950      	ldr	r1, [pc, #320]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]
 8005a5c:	e06a      	b.n	8005b34 <HAL_RCC_OscConfig+0x5ec>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a68:	fa93 f3a3 	rbit	r3, r3
 8005a6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a74:	fab3 f383 	clz	r3, r3
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8a:	f7fd fdcf 	bl	800362c <HAL_GetTick>
 8005a8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a92:	e00a      	b.n	8005aaa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a94:	f7fd fdca 	bl	800362c <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d902      	bls.n	8005aaa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	f000 bc50 	b.w	800634a <HAL_RCC_OscConfig+0xe02>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ab4:	fa93 f3a3 	rbit	r3, r3
 8005ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_RCC_OscConfig+0x592>
 8005ad4:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	e013      	b.n	8005b02 <HAL_RCC_OscConfig+0x5ba>
 8005ada:	2302      	movs	r3, #2
 8005adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ae4:	fa93 f3a3 	rbit	r3, r3
 8005ae8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005aec:	2302      	movs	r3, #2
 8005aee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005af2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005afe:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <HAL_RCC_OscConfig+0x650>)
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2202      	movs	r2, #2
 8005b04:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005b08:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b0c:	fa92 f2a2 	rbit	r2, r2
 8005b10:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005b14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005b18:	fab2 f282 	clz	r2, r2
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	f042 0220 	orr.w	r2, r2, #32
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	f002 021f 	and.w	r2, r2, #31
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1af      	bne.n	8005a94 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80da 	beq.w	8005cf8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d069      	beq.n	8005c22 <HAL_RCC_OscConfig+0x6da>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b64:	fab3 f383 	clz	r3, r3
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCC_OscConfig+0x654>)
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	461a      	mov	r2, r3
 8005b74:	2301      	movs	r3, #1
 8005b76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b78:	f7fd fd58 	bl	800362c <HAL_GetTick>
 8005b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b80:	e00e      	b.n	8005ba0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b82:	f7fd fd53 	bl	800362c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d906      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e3d9      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	10908120 	.word	0x10908120
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	fa93 f2a3 	rbit	r2, r3
 8005bc4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005bce:	2202      	movs	r2, #2
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	fa93 f2a3 	rbit	r2, r3
 8005bdc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005be0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	4ba5      	ldr	r3, [pc, #660]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005bea:	2102      	movs	r1, #2
 8005bec:	6019      	str	r1, [r3, #0]
 8005bee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	fa93 f1a3 	rbit	r1, r3
 8005bf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005bfc:	6019      	str	r1, [r3, #0]
  return result;
 8005bfe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fab3 f383 	clz	r3, r3
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0b0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x63a>
 8005c20:	e06a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x7b0>
 8005c22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	fa93 f2a3 	rbit	r2, r3
 8005c34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005c38:	601a      	str	r2, [r3, #0]
  return result;
 8005c3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005c3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c40:	fab3 f383 	clz	r3, r3
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	4b8c      	ldr	r3, [pc, #560]	; (8005e7c <HAL_RCC_OscConfig+0x934>)
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c54:	f7fd fcea 	bl	800362c <HAL_GetTick>
 8005c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5c:	e009      	b.n	8005c72 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5e:	f7fd fce5 	bl	800362c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e36b      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 8005c72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005c76:	2202      	movs	r2, #2
 8005c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	fa93 f2a3 	rbit	r2, r3
 8005c84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005c8e:	2202      	movs	r2, #2
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	fa93 f2a3 	rbit	r2, r3
 8005c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	fa93 f2a3 	rbit	r2, r3
 8005cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005cb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cba:	4b6f      	ldr	r3, [pc, #444]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	6019      	str	r1, [r3, #0]
 8005cc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	fa93 f1a3 	rbit	r1, r3
 8005cd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005cd4:	6019      	str	r1, [r3, #0]
  return result;
 8005cd6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	fab3 f383 	clz	r3, r3
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	2101      	movs	r1, #1
 8005cee:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1b2      	bne.n	8005c5e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8158 	beq.w	8005fb8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0e:	4b5a      	ldr	r3, [pc, #360]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d112      	bne.n	8005d40 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	4a56      	ldr	r2, [pc, #344]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	61d3      	str	r3, [r2, #28]
 8005d26:	4b54      	ldr	r3, [pc, #336]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f107 0308 	add.w	r3, r7, #8
 8005d38:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d40:	4b4f      	ldr	r3, [pc, #316]	; (8005e80 <HAL_RCC_OscConfig+0x938>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11a      	bne.n	8005d82 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4c:	4b4c      	ldr	r3, [pc, #304]	; (8005e80 <HAL_RCC_OscConfig+0x938>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a4b      	ldr	r2, [pc, #300]	; (8005e80 <HAL_RCC_OscConfig+0x938>)
 8005d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d58:	f7fd fc68 	bl	800362c <HAL_GetTick>
 8005d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d60:	e009      	b.n	8005d76 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d62:	f7fd fc63 	bl	800362c <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	; 0x64
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e2e9      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d76:	4b42      	ldr	r3, [pc, #264]	; (8005e80 <HAL_RCC_OscConfig+0x938>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ef      	beq.n	8005d62 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d106      	bne.n	8005d9a <HAL_RCC_OscConfig+0x852>
 8005d8c:	4b3a      	ldr	r3, [pc, #232]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	4a39      	ldr	r2, [pc, #228]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	6213      	str	r3, [r2, #32]
 8005d98:	e02f      	b.n	8005dfa <HAL_RCC_OscConfig+0x8b2>
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCC_OscConfig+0x876>
 8005da4:	4b34      	ldr	r3, [pc, #208]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	4a33      	ldr	r2, [pc, #204]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	6213      	str	r3, [r2, #32]
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a30      	ldr	r2, [pc, #192]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005db6:	f023 0304 	bic.w	r3, r3, #4
 8005dba:	6213      	str	r3, [r2, #32]
 8005dbc:	e01d      	b.n	8005dfa <HAL_RCC_OscConfig+0x8b2>
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b05      	cmp	r3, #5
 8005dc6:	d10c      	bne.n	8005de2 <HAL_RCC_OscConfig+0x89a>
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005dce:	f043 0304 	orr.w	r3, r3, #4
 8005dd2:	6213      	str	r3, [r2, #32]
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6213      	str	r3, [r2, #32]
 8005de0:	e00b      	b.n	8005dfa <HAL_RCC_OscConfig+0x8b2>
 8005de2:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	4a24      	ldr	r2, [pc, #144]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	6213      	str	r3, [r2, #32]
 8005dee:	4b22      	ldr	r3, [pc, #136]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005df4:	f023 0304 	bic.w	r3, r3, #4
 8005df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d06b      	beq.n	8005edc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e04:	f7fd fc12 	bl	800362c <HAL_GetTick>
 8005e08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	e00b      	b.n	8005e26 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e0e:	f7fd fc0d 	bl	800362c <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e291      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 8005e26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	fa93 f2a3 	rbit	r2, r3
 8005e38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005e42:	2202      	movs	r2, #2
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	fa93 f2a3 	rbit	r2, r3
 8005e50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e54:	601a      	str	r2, [r3, #0]
  return result;
 8005e56:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5c:	fab3 f383 	clz	r3, r3
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d109      	bne.n	8005e84 <HAL_RCC_OscConfig+0x93c>
 8005e70:	4b01      	ldr	r3, [pc, #4]	; (8005e78 <HAL_RCC_OscConfig+0x930>)
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	e014      	b.n	8005ea0 <HAL_RCC_OscConfig+0x958>
 8005e76:	bf00      	nop
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	10908120 	.word	0x10908120
 8005e80:	40007000 	.word	0x40007000
 8005e84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005e88:	2202      	movs	r2, #2
 8005e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	fa93 f2a3 	rbit	r2, r3
 8005e96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	4bbb      	ldr	r3, [pc, #748]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	6011      	str	r1, [r2, #0]
 8005ea8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	fa92 f1a2 	rbit	r1, r2
 8005eb2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005eb6:	6011      	str	r1, [r2, #0]
  return result;
 8005eb8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	fab2 f282 	clz	r2, r2
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	f002 021f 	and.w	r2, r2, #31
 8005ece:	2101      	movs	r1, #1
 8005ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d099      	beq.n	8005e0e <HAL_RCC_OscConfig+0x8c6>
 8005eda:	e063      	b.n	8005fa4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005edc:	f7fd fba6 	bl	800362c <HAL_GetTick>
 8005ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee4:	e00b      	b.n	8005efe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee6:	f7fd fba1 	bl	800362c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e225      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 8005efe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f02:	2202      	movs	r2, #2
 8005f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	fa93 f2a3 	rbit	r2, r3
 8005f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	fa93 f2a3 	rbit	r2, r3
 8005f28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005f2c:	601a      	str	r2, [r3, #0]
  return result;
 8005f2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005f32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f34:	fab3 f383 	clz	r3, r3
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d102      	bne.n	8005f4e <HAL_RCC_OscConfig+0xa06>
 8005f48:	4b90      	ldr	r3, [pc, #576]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	e00d      	b.n	8005f6a <HAL_RCC_OscConfig+0xa22>
 8005f4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f52:	2202      	movs	r2, #2
 8005f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	fa93 f2a3 	rbit	r2, r3
 8005f60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	4b89      	ldr	r3, [pc, #548]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f6e:	2102      	movs	r1, #2
 8005f70:	6011      	str	r1, [r2, #0]
 8005f72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	fa92 f1a2 	rbit	r1, r2
 8005f7c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005f80:	6011      	str	r1, [r2, #0]
  return result;
 8005f82:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	fab2 f282 	clz	r2, r2
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	f002 021f 	and.w	r2, r2, #31
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1a0      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fa4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fac:	4b77      	ldr	r3, [pc, #476]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4a76      	ldr	r2, [pc, #472]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8005fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 81c2 	beq.w	8006348 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fc4:	4b71      	ldr	r3, [pc, #452]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	f000 819c 	beq.w	800630a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	f040 8114 	bne.w	8006206 <HAL_RCC_OscConfig+0xcbe>
 8005fde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	fa93 f2a3 	rbit	r2, r3
 8005ff2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ff6:	601a      	str	r2, [r3, #0]
  return result;
 8005ff8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ffc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	fab3 f383 	clz	r3, r3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006008:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	461a      	mov	r2, r3
 8006010:	2300      	movs	r3, #0
 8006012:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fd fb0a 	bl	800362c <HAL_GetTick>
 8006018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800601c:	e009      	b.n	8006032 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601e:	f7fd fb05 	bl	800362c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e18b      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 8006032:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	fa93 f2a3 	rbit	r2, r3
 8006046:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800604a:	601a      	str	r2, [r3, #0]
  return result;
 800604c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006050:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006052:	fab3 f383 	clz	r3, r3
 8006056:	b2db      	uxtb	r3, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d102      	bne.n	800606c <HAL_RCC_OscConfig+0xb24>
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	e01b      	b.n	80060a4 <HAL_RCC_OscConfig+0xb5c>
 800606c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	fa93 f2a3 	rbit	r2, r3
 8006080:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800608a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	fa93 f2a3 	rbit	r2, r3
 800609a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	4b3a      	ldr	r3, [pc, #232]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	fa92 f1a2 	rbit	r1, r2
 80060b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80060bc:	6011      	str	r1, [r2, #0]
  return result;
 80060be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	fab2 f282 	clz	r2, r2
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	f042 0220 	orr.w	r2, r2, #32
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	f002 021f 	and.w	r2, r2, #31
 80060d4:	2101      	movs	r1, #1
 80060d6:	fa01 f202 	lsl.w	r2, r1, r2
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d19e      	bne.n	800601e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060e8:	1d3b      	adds	r3, r7, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	430b      	orrs	r3, r1
 80060f6:	4925      	ldr	r1, [pc, #148]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	604b      	str	r3, [r1, #4]
 80060fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006106:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	fa93 f2a3 	rbit	r2, r3
 8006110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006114:	601a      	str	r2, [r3, #0]
  return result;
 8006116:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800611a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800611c:	fab3 f383 	clz	r3, r3
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006126:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	461a      	mov	r2, r3
 800612e:	2301      	movs	r3, #1
 8006130:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006132:	f7fd fa7b 	bl	800362c <HAL_GetTick>
 8006136:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800613a:	e009      	b.n	8006150 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800613c:	f7fd fa76 	bl	800362c <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e0fc      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 8006150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	fa93 f2a3 	rbit	r2, r3
 8006164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006168:	601a      	str	r2, [r3, #0]
  return result;
 800616a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800616e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006170:	fab3 f383 	clz	r3, r3
 8006174:	b2db      	uxtb	r3, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <HAL_RCC_OscConfig+0xc48>
 8006184:	4b01      	ldr	r3, [pc, #4]	; (800618c <HAL_RCC_OscConfig+0xc44>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	e01e      	b.n	80061c8 <HAL_RCC_OscConfig+0xc80>
 800618a:	bf00      	nop
 800618c:	40021000 	.word	0x40021000
 8006190:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fa93 f2a3 	rbit	r2, r3
 80061a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	fa93 f2a3 	rbit	r2, r3
 80061be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	4b63      	ldr	r3, [pc, #396]	; (8006354 <HAL_RCC_OscConfig+0xe0c>)
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80061cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	fa92 f1a2 	rbit	r1, r2
 80061dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80061e0:	6011      	str	r1, [r2, #0]
  return result;
 80061e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	fab2 f282 	clz	r2, r2
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	f042 0220 	orr.w	r2, r2, #32
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	f002 021f 	and.w	r2, r2, #31
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f202 	lsl.w	r2, r1, r2
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d09b      	beq.n	800613c <HAL_RCC_OscConfig+0xbf4>
 8006204:	e0a0      	b.n	8006348 <HAL_RCC_OscConfig+0xe00>
 8006206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800620a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800620e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	fa93 f2a3 	rbit	r2, r3
 800621a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800621e:	601a      	str	r2, [r3, #0]
  return result;
 8006220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006224:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006226:	fab3 f383 	clz	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	461a      	mov	r2, r3
 8006238:	2300      	movs	r3, #0
 800623a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fd f9f6 	bl	800362c <HAL_GetTick>
 8006240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006244:	e009      	b.n	800625a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006246:	f7fd f9f1 	bl	800362c <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e077      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
 800625a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800625e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	fa93 f2a3 	rbit	r2, r3
 800626e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006272:	601a      	str	r2, [r3, #0]
  return result;
 8006274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006278:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800627a:	fab3 f383 	clz	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d102      	bne.n	8006294 <HAL_RCC_OscConfig+0xd4c>
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <HAL_RCC_OscConfig+0xe0c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	e01b      	b.n	80062cc <HAL_RCC_OscConfig+0xd84>
 8006294:	f107 0320 	add.w	r3, r7, #32
 8006298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800629c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629e:	f107 0320 	add.w	r3, r7, #32
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	fa93 f2a3 	rbit	r2, r3
 80062a8:	f107 031c 	add.w	r3, r7, #28
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f107 0318 	add.w	r3, r7, #24
 80062b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f107 0318 	add.w	r3, r7, #24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	fa93 f2a3 	rbit	r2, r3
 80062c2:	f107 0314 	add.w	r3, r7, #20
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <HAL_RCC_OscConfig+0xe0c>)
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f107 0210 	add.w	r2, r7, #16
 80062d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	f107 0210 	add.w	r2, r7, #16
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	fa92 f1a2 	rbit	r1, r2
 80062e0:	f107 020c 	add.w	r2, r7, #12
 80062e4:	6011      	str	r1, [r2, #0]
  return result;
 80062e6:	f107 020c 	add.w	r2, r7, #12
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	fab2 f282 	clz	r2, r2
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	f042 0220 	orr.w	r2, r2, #32
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	f002 021f 	and.w	r2, r2, #31
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d19e      	bne.n	8006246 <HAL_RCC_OscConfig+0xcfe>
 8006308:	e01e      	b.n	8006348 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e018      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <HAL_RCC_OscConfig+0xe0c>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006320:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	429a      	cmp	r2, r3
 8006330:	d108      	bne.n	8006344 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006332:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006340:	429a      	cmp	r2, r3
 8006342:	d001      	beq.n	8006348 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40021000 	.word	0x40021000

08006358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b09e      	sub	sp, #120	; 0x78
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e162      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006370:	4b90      	ldr	r3, [pc, #576]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d910      	bls.n	80063a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637e:	4b8d      	ldr	r3, [pc, #564]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f023 0207 	bic.w	r2, r3, #7
 8006386:	498b      	ldr	r1, [pc, #556]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	4313      	orrs	r3, r2
 800638c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b89      	ldr	r3, [pc, #548]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e14a      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ac:	4b82      	ldr	r3, [pc, #520]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	497f      	ldr	r1, [pc, #508]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80dc 	beq.w	8006584 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d13c      	bne.n	800644e <HAL_RCC_ClockConfig+0xf6>
 80063d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063dc:	fa93 f3a3 	rbit	r3, r3
 80063e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80063e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e4:	fab3 f383 	clz	r3, r3
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d102      	bne.n	80063fe <HAL_RCC_ClockConfig+0xa6>
 80063f8:	4b6f      	ldr	r3, [pc, #444]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	e00f      	b.n	800641e <HAL_RCC_ClockConfig+0xc6>
 80063fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006402:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	667b      	str	r3, [r7, #100]	; 0x64
 800640c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006410:	663b      	str	r3, [r7, #96]	; 0x60
 8006412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006414:	fa93 f3a3 	rbit	r3, r3
 8006418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800641a:	4b67      	ldr	r3, [pc, #412]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006422:	65ba      	str	r2, [r7, #88]	; 0x58
 8006424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006426:	fa92 f2a2 	rbit	r2, r2
 800642a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800642c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800642e:	fab2 f282 	clz	r2, r2
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	f042 0220 	orr.w	r2, r2, #32
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	f002 021f 	and.w	r2, r2, #31
 800643e:	2101      	movs	r1, #1
 8006440:	fa01 f202 	lsl.w	r2, r1, r2
 8006444:	4013      	ands	r3, r2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d17b      	bne.n	8006542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e0f3      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d13c      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x178>
 8006456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800645a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800645e:	fa93 f3a3 	rbit	r3, r3
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006466:	fab3 f383 	clz	r3, r3
 800646a:	b2db      	uxtb	r3, r3
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	d102      	bne.n	8006480 <HAL_RCC_ClockConfig+0x128>
 800647a:	4b4f      	ldr	r3, [pc, #316]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	e00f      	b.n	80064a0 <HAL_RCC_ClockConfig+0x148>
 8006480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006488:	fa93 f3a3 	rbit	r3, r3
 800648c:	647b      	str	r3, [r7, #68]	; 0x44
 800648e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006492:	643b      	str	r3, [r7, #64]	; 0x40
 8006494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006496:	fa93 f3a3 	rbit	r3, r3
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649c:	4b46      	ldr	r3, [pc, #280]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80064a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064a8:	fa92 f2a2 	rbit	r2, r2
 80064ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80064ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b0:	fab2 f282 	clz	r2, r2
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	f042 0220 	orr.w	r2, r2, #32
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	f002 021f 	and.w	r2, r2, #31
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f202 	lsl.w	r2, r1, r2
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d13a      	bne.n	8006542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0b2      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
 80064d0:	2302      	movs	r3, #2
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064de:	fab3 f383 	clz	r3, r3
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d102      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x1a0>
 80064f2:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	e00d      	b.n	8006514 <HAL_RCC_ClockConfig+0x1bc>
 80064f8:	2302      	movs	r3, #2
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	fa93 f3a3 	rbit	r3, r3
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
 8006504:	2302      	movs	r3, #2
 8006506:	623b      	str	r3, [r7, #32]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	fa93 f3a3 	rbit	r3, r3
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2202      	movs	r2, #2
 8006516:	61ba      	str	r2, [r7, #24]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	fa92 f2a2 	rbit	r2, r2
 800651e:	617a      	str	r2, [r7, #20]
  return result;
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	fab2 f282 	clz	r2, r2
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	f042 0220 	orr.w	r2, r2, #32
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	f002 021f 	and.w	r2, r2, #31
 8006532:	2101      	movs	r1, #1
 8006534:	fa01 f202 	lsl.w	r2, r1, r2
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e079      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f023 0203 	bic.w	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	491a      	ldr	r1, [pc, #104]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006554:	f7fd f86a 	bl	800362c <HAL_GetTick>
 8006558:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	e00a      	b.n	8006572 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800655c:	f7fd f866 	bl	800362c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	; 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e061      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <HAL_RCC_ClockConfig+0x260>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f003 020c 	and.w	r2, r3, #12
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	429a      	cmp	r2, r3
 8006582:	d1eb      	bne.n	800655c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d214      	bcs.n	80065bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006592:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f023 0207 	bic.w	r2, r3, #7
 800659a:	4906      	ldr	r1, [pc, #24]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <HAL_RCC_ClockConfig+0x25c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d005      	beq.n	80065bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e040      	b.n	8006636 <HAL_RCC_ClockConfig+0x2de>
 80065b4:	40022000 	.word	0x40022000
 80065b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c8:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <HAL_RCC_ClockConfig+0x2e8>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	491a      	ldr	r1, [pc, #104]	; (8006640 <HAL_RCC_ClockConfig+0x2e8>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065e6:	4b16      	ldr	r3, [pc, #88]	; (8006640 <HAL_RCC_ClockConfig+0x2e8>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4912      	ldr	r1, [pc, #72]	; (8006640 <HAL_RCC_ClockConfig+0x2e8>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065fa:	f000 f829 	bl	8006650 <HAL_RCC_GetSysClockFreq>
 80065fe:	4601      	mov	r1, r0
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <HAL_RCC_ClockConfig+0x2e8>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006608:	22f0      	movs	r2, #240	; 0xf0
 800660a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	fa92 f2a2 	rbit	r2, r2
 8006612:	60fa      	str	r2, [r7, #12]
  return result;
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	fab2 f282 	clz	r2, r2
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	40d3      	lsrs	r3, r2
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <HAL_RCC_ClockConfig+0x2ec>)
 8006620:	5cd3      	ldrb	r3, [r2, r3]
 8006622:	fa21 f303 	lsr.w	r3, r1, r3
 8006626:	4a08      	ldr	r2, [pc, #32]	; (8006648 <HAL_RCC_ClockConfig+0x2f0>)
 8006628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <HAL_RCC_ClockConfig+0x2f4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7fc ffb8 	bl	80035a4 <HAL_InitTick>
  
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3778      	adds	r7, #120	; 0x78
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
 8006644:	08009578 	.word	0x08009578
 8006648:	20000004 	.word	0x20000004
 800664c:	20000008 	.word	0x20000008

08006650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006650:	b480      	push	{r7}
 8006652:	b08b      	sub	sp, #44	; 0x2c
 8006654:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800666a:	4b29      	ldr	r3, [pc, #164]	; (8006710 <HAL_RCC_GetSysClockFreq+0xc0>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b04      	cmp	r3, #4
 8006678:	d002      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x30>
 800667a:	2b08      	cmp	r3, #8
 800667c:	d003      	beq.n	8006686 <HAL_RCC_GetSysClockFreq+0x36>
 800667e:	e03c      	b.n	80066fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006680:	4b24      	ldr	r3, [pc, #144]	; (8006714 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006682:	623b      	str	r3, [r7, #32]
      break;
 8006684:	e03c      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800668c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006690:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	fa92 f2a2 	rbit	r2, r2
 8006698:	607a      	str	r2, [r7, #4]
  return result;
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	fab2 f282 	clz	r2, r2
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	40d3      	lsrs	r3, r2
 80066a4:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <HAL_RCC_GetSysClockFreq+0xc8>)
 80066a6:	5cd3      	ldrb	r3, [r2, r3]
 80066a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	220f      	movs	r2, #15
 80066b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	fa92 f2a2 	rbit	r2, r2
 80066bc:	60fa      	str	r2, [r7, #12]
  return result;
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	fab2 f282 	clz	r2, r2
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	40d3      	lsrs	r3, r2
 80066c8:	4a14      	ldr	r2, [pc, #80]	; (800671c <HAL_RCC_GetSysClockFreq+0xcc>)
 80066ca:	5cd3      	ldrb	r3, [r2, r3]
 80066cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80066d8:	4a0e      	ldr	r2, [pc, #56]	; (8006714 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
 80066e8:	e004      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4a0c      	ldr	r2, [pc, #48]	; (8006720 <HAL_RCC_GetSysClockFreq+0xd0>)
 80066ee:	fb02 f303 	mul.w	r3, r2, r3
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	623b      	str	r3, [r7, #32]
      break;
 80066f8:	e002      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066fc:	623b      	str	r3, [r7, #32]
      break;
 80066fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006700:	6a3b      	ldr	r3, [r7, #32]
}
 8006702:	4618      	mov	r0, r3
 8006704:	372c      	adds	r7, #44	; 0x2c
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000
 8006714:	007a1200 	.word	0x007a1200
 8006718:	08009590 	.word	0x08009590
 800671c:	080095a0 	.word	0x080095a0
 8006720:	003d0900 	.word	0x003d0900

08006724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <HAL_RCC_GetHCLKFreq+0x14>)
 800672a:	681b      	ldr	r3, [r3, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000004 	.word	0x20000004

0800673c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006742:	f7ff ffef 	bl	8006724 <HAL_RCC_GetHCLKFreq>
 8006746:	4601      	mov	r1, r0
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006750:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006754:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	fa92 f2a2 	rbit	r2, r2
 800675c:	603a      	str	r2, [r7, #0]
  return result;
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	fab2 f282 	clz	r2, r2
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	40d3      	lsrs	r3, r2
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <HAL_RCC_GetPCLK1Freq+0x40>)
 800676a:	5cd3      	ldrb	r3, [r2, r3]
 800676c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40021000 	.word	0x40021000
 800677c:	08009588 	.word	0x08009588

08006780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006786:	f7ff ffcd 	bl	8006724 <HAL_RCC_GetHCLKFreq>
 800678a:	4601      	mov	r1, r0
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006794:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006798:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	fa92 f2a2 	rbit	r2, r2
 80067a0:	603a      	str	r2, [r7, #0]
  return result;
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	fab2 f282 	clz	r2, r2
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	40d3      	lsrs	r3, r2
 80067ac:	4a04      	ldr	r2, [pc, #16]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80067ae:	5cd3      	ldrb	r3, [r2, r3]
 80067b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40021000 	.word	0x40021000
 80067c0:	08009588 	.word	0x08009588

080067c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b092      	sub	sp, #72	; 0x48
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80d7 	beq.w	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e8:	4b4e      	ldr	r3, [pc, #312]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10e      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f4:	4b4b      	ldr	r3, [pc, #300]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	4a4a      	ldr	r2, [pc, #296]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fe:	61d3      	str	r3, [r2, #28]
 8006800:	4b48      	ldr	r3, [pc, #288]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006812:	4b45      	ldr	r3, [pc, #276]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d118      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800681e:	4b42      	ldr	r3, [pc, #264]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a41      	ldr	r2, [pc, #260]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006828:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800682a:	f7fc feff 	bl	800362c <HAL_GetTick>
 800682e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006830:	e008      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006832:	f7fc fefb 	bl	800362c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b64      	cmp	r3, #100	; 0x64
 800683e:	d901      	bls.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e169      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006844:	4b38      	ldr	r3, [pc, #224]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006850:	4b34      	ldr	r3, [pc, #208]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8084 	beq.w	800696a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800686c:	429a      	cmp	r2, r3
 800686e:	d07c      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006870:	4b2c      	ldr	r3, [pc, #176]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	fa93 f3a3 	rbit	r3, r3
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800688a:	fab3 f383 	clz	r3, r3
 800688e:	b2db      	uxtb	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	461a      	mov	r2, r3
 800689a:	2301      	movs	r3, #1
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	fa93 f3a3 	rbit	r3, r3
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068ae:	fab3 f383 	clz	r3, r3
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	4b1d      	ldr	r3, [pc, #116]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	461a      	mov	r2, r3
 80068be:	2300      	movs	r3, #0
 80068c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068c2:	4a18      	ldr	r2, [pc, #96]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d04b      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fc feab 	bl	800362c <HAL_GetTick>
 80068d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d8:	e00a      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068da:	f7fc fea7 	bl	800362c <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e113      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80068f0:	2302      	movs	r3, #2
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	fa93 f3a3 	rbit	r3, r3
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
 80068fc:	2302      	movs	r3, #2
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	fa93 f3a3 	rbit	r3, r3
 8006906:	61fb      	str	r3, [r7, #28]
  return result;
 8006908:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690a:	fab3 f383 	clz	r3, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d108      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800691e:	4b01      	ldr	r3, [pc, #4]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	e00d      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006924:	40021000 	.word	0x40021000
 8006928:	40007000 	.word	0x40007000
 800692c:	10908100 	.word	0x10908100
 8006930:	2302      	movs	r3, #2
 8006932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	fa93 f3a3 	rbit	r3, r3
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	4b78      	ldr	r3, [pc, #480]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2202      	movs	r2, #2
 8006942:	613a      	str	r2, [r7, #16]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	fa92 f2a2 	rbit	r2, r2
 800694a:	60fa      	str	r2, [r7, #12]
  return result;
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	fab2 f282 	clz	r2, r2
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	f002 021f 	and.w	r2, r2, #31
 800695e:	2101      	movs	r1, #1
 8006960:	fa01 f202 	lsl.w	r2, r1, r2
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0b7      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800696a:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	496a      	ldr	r1, [pc, #424]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006978:	4313      	orrs	r3, r2
 800697a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800697c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006980:	2b01      	cmp	r3, #1
 8006982:	d105      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006984:	4b66      	ldr	r3, [pc, #408]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800698e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800699c:	4b60      	ldr	r3, [pc, #384]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	f023 0203 	bic.w	r2, r3, #3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	495d      	ldr	r1, [pc, #372]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069ba:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	4956      	ldr	r1, [pc, #344]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069d8:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	494e      	ldr	r1, [pc, #312]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f023 0210 	bic.w	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4947      	ldr	r1, [pc, #284]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006a14:	4b42      	ldr	r3, [pc, #264]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	493f      	ldr	r1, [pc, #252]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a32:	4b3b      	ldr	r3, [pc, #236]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f023 0220 	bic.w	r2, r3, #32
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	4938      	ldr	r1, [pc, #224]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a50:	4b33      	ldr	r3, [pc, #204]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	4930      	ldr	r1, [pc, #192]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d008      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	4929      	ldr	r1, [pc, #164]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4921      	ldr	r1, [pc, #132]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006aaa:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	491a      	ldr	r1, [pc, #104]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006ac8:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	4912      	ldr	r1, [pc, #72]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006ae6:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	490b      	ldr	r1, [pc, #44]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b10:	4903      	ldr	r1, [pc, #12]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3748      	adds	r7, #72	; 0x48
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40021000 	.word	0x40021000

08006b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e01d      	b.n	8006b72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fc fbae 	bl	80032ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f000 fd9a 	bl	800769c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e01d      	b.n	8006bc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f815 	bl	8006bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f000 fd6f 	bl	800769c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 fa6e 	bl	80080d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <HAL_TIM_PWM_Start+0x98>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x4a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <HAL_TIM_PWM_Start+0x9c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x4a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1b      	ldr	r2, [pc, #108]	; (8006c84 <HAL_TIM_PWM_Start+0xa0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x4a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	; (8006c88 <HAL_TIM_PWM_Start+0xa4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x4a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_TIM_PWM_Start+0xa8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_PWM_Start+0x4e>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <HAL_TIM_PWM_Start+0x50>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_TIM_PWM_Start+0xac>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b06      	cmp	r3, #6
 8006c58:	d00b      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x8e>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d007      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40013400 	.word	0x40013400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800
 8006c90:	00010007 	.word	0x00010007

08006c94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e01d      	b.n	8006ce2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fc faae 	bl	800321c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f000 fce2 	bl	800769c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	d841      	bhi.n	8006d80 <HAL_TIM_IC_Start_IT+0x94>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <HAL_TIM_IC_Start_IT+0x18>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d39 	.word	0x08006d39
 8006d08:	08006d81 	.word	0x08006d81
 8006d0c:	08006d81 	.word	0x08006d81
 8006d10:	08006d81 	.word	0x08006d81
 8006d14:	08006d4b 	.word	0x08006d4b
 8006d18:	08006d81 	.word	0x08006d81
 8006d1c:	08006d81 	.word	0x08006d81
 8006d20:	08006d81 	.word	0x08006d81
 8006d24:	08006d5d 	.word	0x08006d5d
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d81 	.word	0x08006d81
 8006d30:	08006d81 	.word	0x08006d81
 8006d34:	08006d6f 	.word	0x08006d6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0202 	orr.w	r2, r2, #2
 8006d46:	60da      	str	r2, [r3, #12]
      break;
 8006d48:	e01b      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0204 	orr.w	r2, r2, #4
 8006d58:	60da      	str	r2, [r3, #12]
      break;
 8006d5a:	e012      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0208 	orr.w	r2, r2, #8
 8006d6a:	60da      	str	r2, [r3, #12]
      break;
 8006d6c:	e009      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0210 	orr.w	r2, r2, #16
 8006d7c:	60da      	str	r2, [r3, #12]
      break;
 8006d7e:	e000      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006d80:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2201      	movs	r2, #1
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f9a4 	bl	80080d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <HAL_TIM_IC_Start_IT+0xd8>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d00b      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0xce>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da8:	d007      	beq.n	8006dba <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	00010007 	.word	0x00010007

08006dc8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d841      	bhi.n	8006e5c <HAL_TIM_IC_Stop_IT+0x94>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <HAL_TIM_IC_Stop_IT+0x18>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e15 	.word	0x08006e15
 8006de4:	08006e5d 	.word	0x08006e5d
 8006de8:	08006e5d 	.word	0x08006e5d
 8006dec:	08006e5d 	.word	0x08006e5d
 8006df0:	08006e27 	.word	0x08006e27
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006e5d 	.word	0x08006e5d
 8006dfc:	08006e5d 	.word	0x08006e5d
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e5d 	.word	0x08006e5d
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006e5d 	.word	0x08006e5d
 8006e10:	08006e4b 	.word	0x08006e4b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0202 	bic.w	r2, r2, #2
 8006e22:	60da      	str	r2, [r3, #12]
      break;
 8006e24:	e01b      	b.n	8006e5e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0204 	bic.w	r2, r2, #4
 8006e34:	60da      	str	r2, [r3, #12]
      break;
 8006e36:	e012      	b.n	8006e5e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0208 	bic.w	r2, r2, #8
 8006e46:	60da      	str	r2, [r3, #12]
      break;
 8006e48:	e009      	b.n	8006e5e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0210 	bic.w	r2, r2, #16
 8006e58:	60da      	str	r2, [r3, #12]
      break;
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8006e5c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f936 	bl	80080d8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10f      	bne.n	8006e9c <HAL_TIM_IC_Stop_IT+0xd4>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6a1a      	ldr	r2, [r3, #32]
 8006e82:	f240 4344 	movw	r3, #1092	; 0x444
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_TIM_IC_Stop_IT+0xd4>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0201 	bic.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop

08006ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0202 	mvn.w	r2, #2
 8006ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fa f990 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fbb4 	bl	8007660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fbbb 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d122      	bne.n	8006f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d11b      	bne.n	8006f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0204 	mvn.w	r2, #4
 8006f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fa f966 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb8a 	bl	8007660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb91 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0208 	mvn.w	r2, #8
 8006f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2204      	movs	r2, #4
 8006f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fa f93c 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb60 	bl	8007660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fb67 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d122      	bne.n	8007000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0210 	mvn.w	r2, #16
 8006fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa f912 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fb36 	bl	8007660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb3d 	bl	8007674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b01      	cmp	r3, #1
 800700c:	d10e      	bne.n	800702c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b01      	cmp	r3, #1
 800701a:	d107      	bne.n	800702c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0201 	mvn.w	r2, #1
 8007024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fb10 	bl	800764c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b80      	cmp	r3, #128	; 0x80
 8007038:	d10e      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d107      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f8f0 	bl	8008238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007066:	d10e      	bne.n	8007086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d107      	bne.n	8007086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f8e3 	bl	800824c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b40      	cmp	r3, #64	; 0x40
 8007092:	d10e      	bne.n	80070b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d107      	bne.n	80070b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 faeb 	bl	8007688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d10e      	bne.n	80070de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d107      	bne.n	80070de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f06f 0220 	mvn.w	r2, #32
 80070d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f8a3 	bl	8008224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070de:	bf00      	nop
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_TIM_IC_ConfigChannel+0x1a>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e08a      	b.n	8007216 <HAL_TIM_IC_ConfigChannel+0x130>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11b      	bne.n	800714e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6819      	ldr	r1, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f000 fe1f 	bl	8007d68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 020c 	bic.w	r2, r2, #12
 8007138:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6999      	ldr	r1, [r3, #24]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	619a      	str	r2, [r3, #24]
 800714c:	e05a      	b.n	8007204 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d11c      	bne.n	800718e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6819      	ldr	r1, [r3, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f000 fe97 	bl	8007e96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007176:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6999      	ldr	r1, [r3, #24]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	021a      	lsls	r2, r3, #8
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
 800718c:	e03a      	b.n	8007204 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6819      	ldr	r1, [r3, #0]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f000 fee4 	bl	8007f70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69da      	ldr	r2, [r3, #28]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 020c 	bic.w	r2, r2, #12
 80071b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69d9      	ldr	r1, [r3, #28]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	61da      	str	r2, [r3, #28]
 80071ca:	e01b      	b.n	8007204 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f000 ff04 	bl	8007fe8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69d9      	ldr	r1, [r3, #28]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	021a      	lsls	r2, r3, #8
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007236:	2302      	movs	r3, #2
 8007238:	e105      	b.n	8007446 <HAL_TIM_PWM_ConfigChannel+0x226>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b14      	cmp	r3, #20
 800724e:	f200 80f0 	bhi.w	8007432 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007252:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	080072ad 	.word	0x080072ad
 800725c:	08007433 	.word	0x08007433
 8007260:	08007433 	.word	0x08007433
 8007264:	08007433 	.word	0x08007433
 8007268:	080072ed 	.word	0x080072ed
 800726c:	08007433 	.word	0x08007433
 8007270:	08007433 	.word	0x08007433
 8007274:	08007433 	.word	0x08007433
 8007278:	0800732f 	.word	0x0800732f
 800727c:	08007433 	.word	0x08007433
 8007280:	08007433 	.word	0x08007433
 8007284:	08007433 	.word	0x08007433
 8007288:	0800736f 	.word	0x0800736f
 800728c:	08007433 	.word	0x08007433
 8007290:	08007433 	.word	0x08007433
 8007294:	08007433 	.word	0x08007433
 8007298:	080073b1 	.word	0x080073b1
 800729c:	08007433 	.word	0x08007433
 80072a0:	08007433 	.word	0x08007433
 80072a4:	08007433 	.word	0x08007433
 80072a8:	080073f1 	.word	0x080073f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fa82 	bl	80077bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0208 	orr.w	r2, r2, #8
 80072c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699a      	ldr	r2, [r3, #24]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0204 	bic.w	r2, r2, #4
 80072d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6999      	ldr	r1, [r3, #24]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	619a      	str	r2, [r3, #24]
      break;
 80072ea:	e0a3      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 faf2 	bl	80078dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6999      	ldr	r1, [r3, #24]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	021a      	lsls	r2, r3, #8
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	619a      	str	r2, [r3, #24]
      break;
 800732c:	e082      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fb5b 	bl	80079f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f042 0208 	orr.w	r2, r2, #8
 8007348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69da      	ldr	r2, [r3, #28]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0204 	bic.w	r2, r2, #4
 8007358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69d9      	ldr	r1, [r3, #28]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	61da      	str	r2, [r3, #28]
      break;
 800736c:	e062      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fbc3 	bl	8007b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69d9      	ldr	r1, [r3, #28]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	021a      	lsls	r2, r3, #8
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	61da      	str	r2, [r3, #28]
      break;
 80073ae:	e041      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fc0c 	bl	8007bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0208 	orr.w	r2, r2, #8
 80073ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0204 	bic.w	r2, r2, #4
 80073da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073ee:	e021      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fc50 	bl	8007c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	021a      	lsls	r2, r3, #8
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007430:	e000      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007432:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_TIM_ConfigClockSource+0x18>
 8007464:	2302      	movs	r3, #2
 8007466:	e0a8      	b.n	80075ba <HAL_TIM_ConfigClockSource+0x16a>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800748a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b40      	cmp	r3, #64	; 0x40
 80074a2:	d067      	beq.n	8007574 <HAL_TIM_ConfigClockSource+0x124>
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d80b      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x70>
 80074a8:	2b10      	cmp	r3, #16
 80074aa:	d073      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x144>
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d802      	bhi.n	80074b6 <HAL_TIM_ConfigClockSource+0x66>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d06f      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80074b4:	e078      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d06c      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x144>
 80074ba:	2b30      	cmp	r3, #48	; 0x30
 80074bc:	d06a      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80074be:	e073      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074c0:	2b70      	cmp	r3, #112	; 0x70
 80074c2:	d00d      	beq.n	80074e0 <HAL_TIM_ConfigClockSource+0x90>
 80074c4:	2b70      	cmp	r3, #112	; 0x70
 80074c6:	d804      	bhi.n	80074d2 <HAL_TIM_ConfigClockSource+0x82>
 80074c8:	2b50      	cmp	r3, #80	; 0x50
 80074ca:	d033      	beq.n	8007534 <HAL_TIM_ConfigClockSource+0xe4>
 80074cc:	2b60      	cmp	r3, #96	; 0x60
 80074ce:	d041      	beq.n	8007554 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80074d0:	e06a      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d6:	d066      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x156>
 80074d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074dc:	d017      	beq.n	800750e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80074de:	e063      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6899      	ldr	r1, [r3, #8]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f000 fdd2 	bl	8008098 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007502:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	609a      	str	r2, [r3, #8]
      break;
 800750c:	e04c      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6899      	ldr	r1, [r3, #8]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f000 fdbb 	bl	8008098 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007530:	609a      	str	r2, [r3, #8]
      break;
 8007532:	e039      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	6859      	ldr	r1, [r3, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	461a      	mov	r2, r3
 8007542:	f000 fc79 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2150      	movs	r1, #80	; 0x50
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fd88 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007552:	e029      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	461a      	mov	r2, r3
 8007562:	f000 fcd5 	bl	8007f10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2160      	movs	r1, #96	; 0x60
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fd78 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007572:	e019      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	6859      	ldr	r1, [r3, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	461a      	mov	r2, r3
 8007582:	f000 fc59 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2140      	movs	r1, #64	; 0x40
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fd68 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007592:	e009      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f000 fd5f 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 80075a4:	e000      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80075a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b0c      	cmp	r3, #12
 80075d6:	d831      	bhi.n	800763c <HAL_TIM_ReadCapturedValue+0x78>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007615 	.word	0x08007615
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	0800763d 	.word	0x0800763d
 80075f0:	0800761f 	.word	0x0800761f
 80075f4:	0800763d 	.word	0x0800763d
 80075f8:	0800763d 	.word	0x0800763d
 80075fc:	0800763d 	.word	0x0800763d
 8007600:	08007629 	.word	0x08007629
 8007604:	0800763d 	.word	0x0800763d
 8007608:	0800763d 	.word	0x0800763d
 800760c:	0800763d 	.word	0x0800763d
 8007610:	08007633 	.word	0x08007633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	60fb      	str	r3, [r7, #12]

      break;
 800761c:	e00f      	b.n	800763e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	60fb      	str	r3, [r7, #12]

      break;
 8007626:	e00a      	b.n	800763e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	60fb      	str	r3, [r7, #12]

      break;
 8007630:	e005      	b.n	800763e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	60fb      	str	r3, [r7, #12]

      break;
 800763a:	e000      	b.n	800763e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800763c:	bf00      	nop
  }

  return tmpreg;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <TIM_Base_SetConfig+0x104>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00f      	beq.n	80076d4 <TIM_Base_SetConfig+0x38>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ba:	d00b      	beq.n	80076d4 <TIM_Base_SetConfig+0x38>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a39      	ldr	r2, [pc, #228]	; (80077a4 <TIM_Base_SetConfig+0x108>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <TIM_Base_SetConfig+0x38>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a38      	ldr	r2, [pc, #224]	; (80077a8 <TIM_Base_SetConfig+0x10c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_Base_SetConfig+0x38>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a37      	ldr	r2, [pc, #220]	; (80077ac <TIM_Base_SetConfig+0x110>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d108      	bne.n	80076e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <TIM_Base_SetConfig+0x104>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01b      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f4:	d017      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2a      	ldr	r2, [pc, #168]	; (80077a4 <TIM_Base_SetConfig+0x108>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a29      	ldr	r2, [pc, #164]	; (80077a8 <TIM_Base_SetConfig+0x10c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00f      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a28      	ldr	r2, [pc, #160]	; (80077ac <TIM_Base_SetConfig+0x110>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00b      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a27      	ldr	r2, [pc, #156]	; (80077b0 <TIM_Base_SetConfig+0x114>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d007      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <TIM_Base_SetConfig+0x118>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d003      	beq.n	8007726 <TIM_Base_SetConfig+0x8a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <TIM_Base_SetConfig+0x11c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d108      	bne.n	8007738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a10      	ldr	r2, [pc, #64]	; (80077a0 <TIM_Base_SetConfig+0x104>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00f      	beq.n	8007784 <TIM_Base_SetConfig+0xe8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a11      	ldr	r2, [pc, #68]	; (80077ac <TIM_Base_SetConfig+0x110>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00b      	beq.n	8007784 <TIM_Base_SetConfig+0xe8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a10      	ldr	r2, [pc, #64]	; (80077b0 <TIM_Base_SetConfig+0x114>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d007      	beq.n	8007784 <TIM_Base_SetConfig+0xe8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a0f      	ldr	r2, [pc, #60]	; (80077b4 <TIM_Base_SetConfig+0x118>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_Base_SetConfig+0xe8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <TIM_Base_SetConfig+0x11c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d103      	bne.n	800778c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	615a      	str	r2, [r3, #20]
}
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40012c00 	.word	0x40012c00
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40013400 	.word	0x40013400
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40014400 	.word	0x40014400
 80077b8:	40014800 	.word	0x40014800

080077bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f023 0201 	bic.w	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 0302 	bic.w	r3, r3, #2
 8007808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a2c      	ldr	r2, [pc, #176]	; (80078c8 <TIM_OC1_SetConfig+0x10c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00f      	beq.n	800783c <TIM_OC1_SetConfig+0x80>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a2b      	ldr	r2, [pc, #172]	; (80078cc <TIM_OC1_SetConfig+0x110>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00b      	beq.n	800783c <TIM_OC1_SetConfig+0x80>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a2a      	ldr	r2, [pc, #168]	; (80078d0 <TIM_OC1_SetConfig+0x114>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_OC1_SetConfig+0x80>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a29      	ldr	r2, [pc, #164]	; (80078d4 <TIM_OC1_SetConfig+0x118>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_OC1_SetConfig+0x80>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a28      	ldr	r2, [pc, #160]	; (80078d8 <TIM_OC1_SetConfig+0x11c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d10c      	bne.n	8007856 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f023 0308 	bic.w	r3, r3, #8
 8007842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 0304 	bic.w	r3, r3, #4
 8007854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a1b      	ldr	r2, [pc, #108]	; (80078c8 <TIM_OC1_SetConfig+0x10c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00f      	beq.n	800787e <TIM_OC1_SetConfig+0xc2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a1a      	ldr	r2, [pc, #104]	; (80078cc <TIM_OC1_SetConfig+0x110>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00b      	beq.n	800787e <TIM_OC1_SetConfig+0xc2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <TIM_OC1_SetConfig+0x114>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d007      	beq.n	800787e <TIM_OC1_SetConfig+0xc2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <TIM_OC1_SetConfig+0x118>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_OC1_SetConfig+0xc2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <TIM_OC1_SetConfig+0x11c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d111      	bne.n	80078a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	621a      	str	r2, [r3, #32]
}
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40013400 	.word	0x40013400
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40014400 	.word	0x40014400
 80078d8:	40014800 	.word	0x40014800

080078dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0210 	bic.w	r2, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800790a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f023 0320 	bic.w	r3, r3, #32
 800792a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a28      	ldr	r2, [pc, #160]	; (80079dc <TIM_OC2_SetConfig+0x100>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d003      	beq.n	8007948 <TIM_OC2_SetConfig+0x6c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a27      	ldr	r2, [pc, #156]	; (80079e0 <TIM_OC2_SetConfig+0x104>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10d      	bne.n	8007964 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800794e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a1d      	ldr	r2, [pc, #116]	; (80079dc <TIM_OC2_SetConfig+0x100>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00f      	beq.n	800798c <TIM_OC2_SetConfig+0xb0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a1c      	ldr	r2, [pc, #112]	; (80079e0 <TIM_OC2_SetConfig+0x104>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00b      	beq.n	800798c <TIM_OC2_SetConfig+0xb0>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <TIM_OC2_SetConfig+0x108>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_OC2_SetConfig+0xb0>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a1a      	ldr	r2, [pc, #104]	; (80079e8 <TIM_OC2_SetConfig+0x10c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_OC2_SetConfig+0xb0>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a19      	ldr	r2, [pc, #100]	; (80079ec <TIM_OC2_SetConfig+0x110>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d113      	bne.n	80079b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007992:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800799a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40013400 	.word	0x40013400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800

080079f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a27      	ldr	r2, [pc, #156]	; (8007aec <TIM_OC3_SetConfig+0xfc>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d003      	beq.n	8007a5a <TIM_OC3_SetConfig+0x6a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a26      	ldr	r2, [pc, #152]	; (8007af0 <TIM_OC3_SetConfig+0x100>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d10d      	bne.n	8007a76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a74:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <TIM_OC3_SetConfig+0xfc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00f      	beq.n	8007a9e <TIM_OC3_SetConfig+0xae>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <TIM_OC3_SetConfig+0x100>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00b      	beq.n	8007a9e <TIM_OC3_SetConfig+0xae>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a1a      	ldr	r2, [pc, #104]	; (8007af4 <TIM_OC3_SetConfig+0x104>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <TIM_OC3_SetConfig+0xae>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a19      	ldr	r2, [pc, #100]	; (8007af8 <TIM_OC3_SetConfig+0x108>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_OC3_SetConfig+0xae>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a18      	ldr	r2, [pc, #96]	; (8007afc <TIM_OC3_SetConfig+0x10c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d113      	bne.n	8007ac6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	621a      	str	r2, [r3, #32]
}
 8007ae0:	bf00      	nop
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800

08007b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	031b      	lsls	r3, r3, #12
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a18      	ldr	r2, [pc, #96]	; (8007bc0 <TIM_OC4_SetConfig+0xc0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_OC4_SetConfig+0x84>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a17      	ldr	r2, [pc, #92]	; (8007bc4 <TIM_OC4_SetConfig+0xc4>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <TIM_OC4_SetConfig+0x84>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <TIM_OC4_SetConfig+0xc8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_OC4_SetConfig+0x84>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <TIM_OC4_SetConfig+0xcc>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC4_SetConfig+0x84>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a14      	ldr	r2, [pc, #80]	; (8007bd0 <TIM_OC4_SetConfig+0xd0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d109      	bne.n	8007b98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	019b      	lsls	r3, r3, #6
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_OC5_SetConfig+0xb4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <TIM_OC5_SetConfig+0xb8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <TIM_OC5_SetConfig+0xbc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <TIM_OC5_SetConfig+0xc0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_OC5_SetConfig+0x7a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <TIM_OC5_SetConfig+0xc4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d109      	bne.n	8007c62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40012c00 	.word	0x40012c00
 8007c8c:	40013400 	.word	0x40013400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800

08007c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	051b      	lsls	r3, r3, #20
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <TIM_OC6_SetConfig+0xb8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00f      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <TIM_OC6_SetConfig+0xbc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <TIM_OC6_SetConfig+0xc0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <TIM_OC6_SetConfig+0xc4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC6_SetConfig+0x7c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <TIM_OC6_SetConfig+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d109      	bne.n	8007d2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40014400 	.word	0x40014400
 8007d64:	40014800 	.word	0x40014800

08007d68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a24      	ldr	r2, [pc, #144]	; (8007e24 <TIM_TI1_SetConfig+0xbc>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <TIM_TI1_SetConfig+0x56>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9c:	d00f      	beq.n	8007dbe <TIM_TI1_SetConfig+0x56>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4a21      	ldr	r2, [pc, #132]	; (8007e28 <TIM_TI1_SetConfig+0xc0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00b      	beq.n	8007dbe <TIM_TI1_SetConfig+0x56>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4a20      	ldr	r2, [pc, #128]	; (8007e2c <TIM_TI1_SetConfig+0xc4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d007      	beq.n	8007dbe <TIM_TI1_SetConfig+0x56>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a1f      	ldr	r2, [pc, #124]	; (8007e30 <TIM_TI1_SetConfig+0xc8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_TI1_SetConfig+0x56>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4a1e      	ldr	r2, [pc, #120]	; (8007e34 <TIM_TI1_SetConfig+0xcc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d101      	bne.n	8007dc2 <TIM_TI1_SetConfig+0x5a>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <TIM_TI1_SetConfig+0x5c>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e003      	b.n	8007de2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f023 030a 	bic.w	r3, r3, #10
 8007dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f003 030a 	and.w	r3, r3, #10
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	621a      	str	r2, [r3, #32]
}
 8007e16:	bf00      	nop
 8007e18:	371c      	adds	r7, #28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40013400 	.word	0x40013400
 8007e34:	40014000 	.word	0x40014000

08007e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	f023 0201 	bic.w	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 030a 	bic.w	r3, r3, #10
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	621a      	str	r2, [r3, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	f023 0210 	bic.w	r2, r3, #16
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	031b      	lsls	r3, r3, #12
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ee8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	621a      	str	r2, [r3, #32]
}
 8007f04:	bf00      	nop
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f023 0210 	bic.w	r2, r3, #16
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	031b      	lsls	r3, r3, #12
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	621a      	str	r2, [r3, #32]
}
 8007f64:	bf00      	nop
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	621a      	str	r2, [r3, #32]
}
 8007fdc:	bf00      	nop
 8007fde:	371c      	adds	r7, #28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008014:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008026:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	031b      	lsls	r3, r3, #12
 800802c:	b29b      	uxth	r3, r3
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800803a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	031b      	lsls	r3, r3, #12
 8008040:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	f043 0307 	orr.w	r3, r3, #7
 8008084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	609a      	str	r2, [r3, #8]
}
 800808c:	bf00      	nop
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	021a      	lsls	r2, r3, #8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4313      	orrs	r3, r2
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	609a      	str	r2, [r3, #8]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 031f 	and.w	r3, r3, #31
 80080ea:	2201      	movs	r2, #1
 80080ec:	fa02 f303 	lsl.w	r3, r2, r3
 80080f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	401a      	ands	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1a      	ldr	r2, [r3, #32]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	fa01 f303 	lsl.w	r3, r1, r3
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008138:	2302      	movs	r3, #2
 800813a:	e063      	b.n	8008204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a2b      	ldr	r2, [pc, #172]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d004      	beq.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d108      	bne.n	8008182 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008176:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d018      	beq.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ae:	d013      	beq.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a18      	ldr	r2, [pc, #96]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00e      	beq.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a17      	ldr	r2, [pc, #92]	; (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d009      	beq.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a12      	ldr	r2, [pc, #72]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a13      	ldr	r2, [pc, #76]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d10c      	bne.n	80081f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	40012c00 	.word	0x40012c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40000400 	.word	0x40000400
 800821c:	40000800 	.word	0x40000800
 8008220:	40014000 	.word	0x40014000

08008224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e040      	b.n	80082f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fb f88c 	bl	80033a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2224      	movs	r2, #36	; 0x24
 800828c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fa1a 	bl	80086d8 <UART_SetConfig>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e022      	b.n	80082f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fc28 	bl	8008b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fcaf 	bl	8008c50 <UART_CheckIdleState>
 80082f2:	4603      	mov	r3, r0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08a      	sub	sp, #40	; 0x28
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	4613      	mov	r3, r2
 800830a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008310:	2b20      	cmp	r3, #32
 8008312:	f040 8081 	bne.w	8008418 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <HAL_UART_Transmit+0x26>
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e079      	b.n	800841a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_UART_Transmit+0x38>
 8008330:	2302      	movs	r3, #2
 8008332:	e072      	b.n	800841a <HAL_UART_Transmit+0x11e>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2221      	movs	r2, #33	; 0x21
 8008346:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008348:	f7fb f970 	bl	800362c <HAL_GetTick>
 800834c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d108      	bne.n	800837a <HAL_UART_Transmit+0x7e>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	61bb      	str	r3, [r7, #24]
 8008378:	e003      	b.n	8008382 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008382:	e02d      	b.n	80083e0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2200      	movs	r2, #0
 800838c:	2180      	movs	r1, #128	; 0x80
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fca3 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e03d      	b.n	800841a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	881a      	ldrh	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083b0:	b292      	uxth	r2, r2
 80083b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	3302      	adds	r3, #2
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e008      	b.n	80083ce <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	b292      	uxth	r2, r2
 80083c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	3301      	adds	r3, #1
 80083cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1cb      	bne.n	8008384 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2200      	movs	r2, #0
 80083f4:	2140      	movs	r1, #64	; 0x40
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fc6f 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e009      	b.n	800841a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	e000      	b.n	800841a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008418:	2302      	movs	r3, #2
  }
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	f640 030f 	movw	r3, #2063	; 0x80f
 800844a:	4013      	ands	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d113      	bne.n	800847c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00e      	beq.n	800847c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8114 	beq.w	800869a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
      }
      return;
 800847a:	e10e      	b.n	800869a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 80d6 	beq.w	8008630 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80cb 	beq.w	8008630 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00e      	beq.n	80084c2 <HAL_UART_IRQHandler+0x9e>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2201      	movs	r2, #1
 80084b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ba:	f043 0201 	orr.w	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00e      	beq.n	80084ea <HAL_UART_IRQHandler+0xc6>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2202      	movs	r2, #2
 80084dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e2:	f043 0204 	orr.w	r2, r3, #4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00e      	beq.n	8008512 <HAL_UART_IRQHandler+0xee>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2204      	movs	r2, #4
 8008504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850a:	f043 0202 	orr.w	r2, r3, #2
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d013      	beq.n	8008544 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2208      	movs	r2, #8
 8008536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853c:	f043 0208 	orr.w	r2, r3, #8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00f      	beq.n	800856e <HAL_UART_IRQHandler+0x14a>
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008566:	f043 0220 	orr.w	r2, r3, #32
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8093 	beq.w	800869e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00c      	beq.n	800859c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d004      	beq.n	80085ba <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d031      	beq.n	800861e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fc08 	bl	8008dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b40      	cmp	r3, #64	; 0x40
 80085cc:	d123      	bne.n	8008616 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d013      	beq.n	800860e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ea:	4a30      	ldr	r2, [pc, #192]	; (80086ac <HAL_UART_IRQHandler+0x288>)
 80085ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fb f959 	bl	80038aa <HAL_DMA_Abort_IT>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d016      	beq.n	800862c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860c:	e00e      	b.n	800862c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f858 	bl	80086c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	e00a      	b.n	800862c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f854 	bl	80086c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861c:	e006      	b.n	800862c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f850 	bl	80086c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800862a:	e038      	b.n	800869e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	bf00      	nop
    return;
 800862e:	e036      	b.n	800869e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00d      	beq.n	8008656 <HAL_UART_IRQHandler+0x232>
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800864c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc0d 	bl	8008e6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008654:	e026      	b.n	80086a4 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00d      	beq.n	800867c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d008      	beq.n	800867c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800866e:	2b00      	cmp	r3, #0
 8008670:	d017      	beq.n	80086a2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
    }
    return;
 800867a:	e012      	b.n	80086a2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00e      	beq.n	80086a4 <HAL_UART_IRQHandler+0x280>
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fbd3 	bl	8008e3c <UART_EndTransmit_IT>
    return;
 8008696:	bf00      	nop
 8008698:	e004      	b.n	80086a4 <HAL_UART_IRQHandler+0x280>
      return;
 800869a:	bf00      	nop
 800869c:	e002      	b.n	80086a4 <HAL_UART_IRQHandler+0x280>
    return;
 800869e:	bf00      	nop
 80086a0:	e000      	b.n	80086a4 <HAL_UART_IRQHandler+0x280>
    return;
 80086a2:	bf00      	nop
  }

}
 80086a4:	3720      	adds	r7, #32
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	08008e11 	.word	0x08008e11

080086b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800870a:	f023 030c 	bic.w	r3, r3, #12
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6812      	ldr	r2, [r2, #0]
 8008712:	6939      	ldr	r1, [r7, #16]
 8008714:	430b      	orrs	r3, r1
 8008716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4aa9      	ldr	r2, [pc, #676]	; (80089fc <UART_SetConfig+0x324>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d121      	bne.n	80087a0 <UART_SetConfig+0xc8>
 800875c:	4ba8      	ldr	r3, [pc, #672]	; (8008a00 <UART_SetConfig+0x328>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f003 0303 	and.w	r3, r3, #3
 8008764:	2b03      	cmp	r3, #3
 8008766:	d817      	bhi.n	8008798 <UART_SetConfig+0xc0>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x98>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008781 	.word	0x08008781
 8008774:	0800878d 	.word	0x0800878d
 8008778:	08008793 	.word	0x08008793
 800877c:	08008787 	.word	0x08008787
 8008780:	2301      	movs	r3, #1
 8008782:	77fb      	strb	r3, [r7, #31]
 8008784:	e0b2      	b.n	80088ec <UART_SetConfig+0x214>
 8008786:	2302      	movs	r3, #2
 8008788:	77fb      	strb	r3, [r7, #31]
 800878a:	e0af      	b.n	80088ec <UART_SetConfig+0x214>
 800878c:	2304      	movs	r3, #4
 800878e:	77fb      	strb	r3, [r7, #31]
 8008790:	e0ac      	b.n	80088ec <UART_SetConfig+0x214>
 8008792:	2308      	movs	r3, #8
 8008794:	77fb      	strb	r3, [r7, #31]
 8008796:	e0a9      	b.n	80088ec <UART_SetConfig+0x214>
 8008798:	2310      	movs	r3, #16
 800879a:	77fb      	strb	r3, [r7, #31]
 800879c:	bf00      	nop
 800879e:	e0a5      	b.n	80088ec <UART_SetConfig+0x214>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a97      	ldr	r2, [pc, #604]	; (8008a04 <UART_SetConfig+0x32c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d123      	bne.n	80087f2 <UART_SetConfig+0x11a>
 80087aa:	4b95      	ldr	r3, [pc, #596]	; (8008a00 <UART_SetConfig+0x328>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b6:	d012      	beq.n	80087de <UART_SetConfig+0x106>
 80087b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087bc:	d802      	bhi.n	80087c4 <UART_SetConfig+0xec>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <UART_SetConfig+0xfa>
 80087c2:	e012      	b.n	80087ea <UART_SetConfig+0x112>
 80087c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c8:	d00c      	beq.n	80087e4 <UART_SetConfig+0x10c>
 80087ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087ce:	d003      	beq.n	80087d8 <UART_SetConfig+0x100>
 80087d0:	e00b      	b.n	80087ea <UART_SetConfig+0x112>
 80087d2:	2300      	movs	r3, #0
 80087d4:	77fb      	strb	r3, [r7, #31]
 80087d6:	e089      	b.n	80088ec <UART_SetConfig+0x214>
 80087d8:	2302      	movs	r3, #2
 80087da:	77fb      	strb	r3, [r7, #31]
 80087dc:	e086      	b.n	80088ec <UART_SetConfig+0x214>
 80087de:	2304      	movs	r3, #4
 80087e0:	77fb      	strb	r3, [r7, #31]
 80087e2:	e083      	b.n	80088ec <UART_SetConfig+0x214>
 80087e4:	2308      	movs	r3, #8
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e080      	b.n	80088ec <UART_SetConfig+0x214>
 80087ea:	2310      	movs	r3, #16
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	bf00      	nop
 80087f0:	e07c      	b.n	80088ec <UART_SetConfig+0x214>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a84      	ldr	r2, [pc, #528]	; (8008a08 <UART_SetConfig+0x330>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d123      	bne.n	8008844 <UART_SetConfig+0x16c>
 80087fc:	4b80      	ldr	r3, [pc, #512]	; (8008a00 <UART_SetConfig+0x328>)
 80087fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008800:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008808:	d012      	beq.n	8008830 <UART_SetConfig+0x158>
 800880a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800880e:	d802      	bhi.n	8008816 <UART_SetConfig+0x13e>
 8008810:	2b00      	cmp	r3, #0
 8008812:	d007      	beq.n	8008824 <UART_SetConfig+0x14c>
 8008814:	e012      	b.n	800883c <UART_SetConfig+0x164>
 8008816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800881a:	d00c      	beq.n	8008836 <UART_SetConfig+0x15e>
 800881c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008820:	d003      	beq.n	800882a <UART_SetConfig+0x152>
 8008822:	e00b      	b.n	800883c <UART_SetConfig+0x164>
 8008824:	2300      	movs	r3, #0
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e060      	b.n	80088ec <UART_SetConfig+0x214>
 800882a:	2302      	movs	r3, #2
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e05d      	b.n	80088ec <UART_SetConfig+0x214>
 8008830:	2304      	movs	r3, #4
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e05a      	b.n	80088ec <UART_SetConfig+0x214>
 8008836:	2308      	movs	r3, #8
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e057      	b.n	80088ec <UART_SetConfig+0x214>
 800883c:	2310      	movs	r3, #16
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	bf00      	nop
 8008842:	e053      	b.n	80088ec <UART_SetConfig+0x214>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a70      	ldr	r2, [pc, #448]	; (8008a0c <UART_SetConfig+0x334>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d123      	bne.n	8008896 <UART_SetConfig+0x1be>
 800884e:	4b6c      	ldr	r3, [pc, #432]	; (8008a00 <UART_SetConfig+0x328>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885a:	d012      	beq.n	8008882 <UART_SetConfig+0x1aa>
 800885c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008860:	d802      	bhi.n	8008868 <UART_SetConfig+0x190>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d007      	beq.n	8008876 <UART_SetConfig+0x19e>
 8008866:	e012      	b.n	800888e <UART_SetConfig+0x1b6>
 8008868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800886c:	d00c      	beq.n	8008888 <UART_SetConfig+0x1b0>
 800886e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008872:	d003      	beq.n	800887c <UART_SetConfig+0x1a4>
 8008874:	e00b      	b.n	800888e <UART_SetConfig+0x1b6>
 8008876:	2300      	movs	r3, #0
 8008878:	77fb      	strb	r3, [r7, #31]
 800887a:	e037      	b.n	80088ec <UART_SetConfig+0x214>
 800887c:	2302      	movs	r3, #2
 800887e:	77fb      	strb	r3, [r7, #31]
 8008880:	e034      	b.n	80088ec <UART_SetConfig+0x214>
 8008882:	2304      	movs	r3, #4
 8008884:	77fb      	strb	r3, [r7, #31]
 8008886:	e031      	b.n	80088ec <UART_SetConfig+0x214>
 8008888:	2308      	movs	r3, #8
 800888a:	77fb      	strb	r3, [r7, #31]
 800888c:	e02e      	b.n	80088ec <UART_SetConfig+0x214>
 800888e:	2310      	movs	r3, #16
 8008890:	77fb      	strb	r3, [r7, #31]
 8008892:	bf00      	nop
 8008894:	e02a      	b.n	80088ec <UART_SetConfig+0x214>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a5d      	ldr	r2, [pc, #372]	; (8008a10 <UART_SetConfig+0x338>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d123      	bne.n	80088e8 <UART_SetConfig+0x210>
 80088a0:	4b57      	ldr	r3, [pc, #348]	; (8008a00 <UART_SetConfig+0x328>)
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80088a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ac:	d012      	beq.n	80088d4 <UART_SetConfig+0x1fc>
 80088ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088b2:	d802      	bhi.n	80088ba <UART_SetConfig+0x1e2>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <UART_SetConfig+0x1f0>
 80088b8:	e012      	b.n	80088e0 <UART_SetConfig+0x208>
 80088ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088be:	d00c      	beq.n	80088da <UART_SetConfig+0x202>
 80088c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088c4:	d003      	beq.n	80088ce <UART_SetConfig+0x1f6>
 80088c6:	e00b      	b.n	80088e0 <UART_SetConfig+0x208>
 80088c8:	2300      	movs	r3, #0
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	e00e      	b.n	80088ec <UART_SetConfig+0x214>
 80088ce:	2302      	movs	r3, #2
 80088d0:	77fb      	strb	r3, [r7, #31]
 80088d2:	e00b      	b.n	80088ec <UART_SetConfig+0x214>
 80088d4:	2304      	movs	r3, #4
 80088d6:	77fb      	strb	r3, [r7, #31]
 80088d8:	e008      	b.n	80088ec <UART_SetConfig+0x214>
 80088da:	2308      	movs	r3, #8
 80088dc:	77fb      	strb	r3, [r7, #31]
 80088de:	e005      	b.n	80088ec <UART_SetConfig+0x214>
 80088e0:	2310      	movs	r3, #16
 80088e2:	77fb      	strb	r3, [r7, #31]
 80088e4:	bf00      	nop
 80088e6:	e001      	b.n	80088ec <UART_SetConfig+0x214>
 80088e8:	2310      	movs	r3, #16
 80088ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f4:	f040 808e 	bne.w	8008a14 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80088f8:	7ffb      	ldrb	r3, [r7, #31]
 80088fa:	2b08      	cmp	r3, #8
 80088fc:	d85e      	bhi.n	80089bc <UART_SetConfig+0x2e4>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x22c>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	08008929 	.word	0x08008929
 8008908:	08008949 	.word	0x08008949
 800890c:	08008969 	.word	0x08008969
 8008910:	080089bd 	.word	0x080089bd
 8008914:	08008985 	.word	0x08008985
 8008918:	080089bd 	.word	0x080089bd
 800891c:	080089bd 	.word	0x080089bd
 8008920:	080089bd 	.word	0x080089bd
 8008924:	080089a5 	.word	0x080089a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008928:	f7fd ff08 	bl	800673c <HAL_RCC_GetPCLK1Freq>
 800892c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	005a      	lsls	r2, r3, #1
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	085b      	lsrs	r3, r3, #1
 8008938:	441a      	add	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008942:	b29b      	uxth	r3, r3
 8008944:	61bb      	str	r3, [r7, #24]
        break;
 8008946:	e03c      	b.n	80089c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008948:	f7fd ff1a 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 800894c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	005a      	lsls	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	441a      	add	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	61bb      	str	r3, [r7, #24]
        break;
 8008966:	e02c      	b.n	80089c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008972:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6852      	ldr	r2, [r2, #4]
 800897a:	fbb3 f3f2 	udiv	r3, r3, r2
 800897e:	b29b      	uxth	r3, r3
 8008980:	61bb      	str	r3, [r7, #24]
        break;
 8008982:	e01e      	b.n	80089c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008984:	f7fd fe64 	bl	8006650 <HAL_RCC_GetSysClockFreq>
 8008988:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	005a      	lsls	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	441a      	add	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	fbb2 f3f3 	udiv	r3, r2, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	61bb      	str	r3, [r7, #24]
        break;
 80089a2:	e00e      	b.n	80089c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	61bb      	str	r3, [r7, #24]
        break;
 80089ba:	e002      	b.n	80089c2 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	75fb      	strb	r3, [r7, #23]
        break;
 80089c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b0f      	cmp	r3, #15
 80089c6:	d916      	bls.n	80089f6 <UART_SetConfig+0x31e>
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ce:	d212      	bcs.n	80089f6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f023 030f 	bic.w	r3, r3, #15
 80089d8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	b29b      	uxth	r3, r3
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	897b      	ldrh	r3, [r7, #10]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	897a      	ldrh	r2, [r7, #10]
 80089f2:	60da      	str	r2, [r3, #12]
 80089f4:	e07e      	b.n	8008af4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	75fb      	strb	r3, [r7, #23]
 80089fa:	e07b      	b.n	8008af4 <UART_SetConfig+0x41c>
 80089fc:	40013800 	.word	0x40013800
 8008a00:	40021000 	.word	0x40021000
 8008a04:	40004400 	.word	0x40004400
 8008a08:	40004800 	.word	0x40004800
 8008a0c:	40004c00 	.word	0x40004c00
 8008a10:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008a14:	7ffb      	ldrb	r3, [r7, #31]
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d85b      	bhi.n	8008ad2 <UART_SetConfig+0x3fa>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x348>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a63 	.word	0x08008a63
 8008a28:	08008a81 	.word	0x08008a81
 8008a2c:	08008ad3 	.word	0x08008ad3
 8008a30:	08008a9d 	.word	0x08008a9d
 8008a34:	08008ad3 	.word	0x08008ad3
 8008a38:	08008ad3 	.word	0x08008ad3
 8008a3c:	08008ad3 	.word	0x08008ad3
 8008a40:	08008abb 	.word	0x08008abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a44:	f7fd fe7a 	bl	800673c <HAL_RCC_GetPCLK1Freq>
 8008a48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	085a      	lsrs	r2, r3, #1
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	441a      	add	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	61bb      	str	r3, [r7, #24]
        break;
 8008a60:	e03a      	b.n	8008ad8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a62:	f7fd fe8d 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 8008a66:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	085a      	lsrs	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	441a      	add	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	61bb      	str	r3, [r7, #24]
        break;
 8008a7e:	e02b      	b.n	8008ad8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8008a8a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6852      	ldr	r2, [r2, #4]
 8008a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	61bb      	str	r3, [r7, #24]
        break;
 8008a9a:	e01d      	b.n	8008ad8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a9c:	f7fd fdd8 	bl	8006650 <HAL_RCC_GetSysClockFreq>
 8008aa0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	085a      	lsrs	r2, r3, #1
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	441a      	add	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	61bb      	str	r3, [r7, #24]
        break;
 8008ab8:	e00e      	b.n	8008ad8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	61bb      	str	r3, [r7, #24]
        break;
 8008ad0:	e002      	b.n	8008ad8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	75fb      	strb	r3, [r7, #23]
        break;
 8008ad6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b0f      	cmp	r3, #15
 8008adc:	d908      	bls.n	8008af0 <UART_SetConfig+0x418>
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae4:	d204      	bcs.n	8008af0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	e001      	b.n	8008af4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop

08008b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01a      	beq.n	8008c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0a:	d10a      	bne.n	8008c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	605a      	str	r2, [r3, #4]
  }
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c5e:	f7fa fce5 	bl	800362c <HAL_GetTick>
 8008c62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0308 	and.w	r3, r3, #8
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d10e      	bne.n	8008c90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f82a 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e020      	b.n	8008cd2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d10e      	bne.n	8008cbc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f814 	bl	8008cda <UART_WaitOnFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e00a      	b.n	8008cd2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	603b      	str	r3, [r7, #0]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cea:	e05d      	b.n	8008da8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf2:	d059      	beq.n	8008da8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf4:	f7fa fc9a 	bl	800362c <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d302      	bcc.n	8008d0a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11b      	bne.n	8008d42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0201 	bic.w	r2, r2, #1
 8008d28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2220      	movs	r2, #32
 8008d34:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e042      	b.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d02b      	beq.n	8008da8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d5e:	d123      	bne.n	8008da8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d68:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0201 	bic.w	r2, r2, #1
 8008d88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e00f      	b.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	69da      	ldr	r2, [r3, #28]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	4013      	ands	r3, r2
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	bf0c      	ite	eq
 8008db8:	2301      	moveq	r3, #1
 8008dba:	2300      	movne	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d092      	beq.n	8008cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008de6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0201 	bic.w	r2, r2, #1
 8008df6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff fc48 	bl	80086c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e52:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff fc25 	bl	80086b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
	...

08008e84 <__libc_init_array>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0d      	ldr	r6, [pc, #52]	; (8008ebc <__libc_init_array+0x38>)
 8008e88:	4c0d      	ldr	r4, [pc, #52]	; (8008ec0 <__libc_init_array+0x3c>)
 8008e8a:	1ba4      	subs	r4, r4, r6
 8008e8c:	10a4      	asrs	r4, r4, #2
 8008e8e:	2500      	movs	r5, #0
 8008e90:	42a5      	cmp	r5, r4
 8008e92:	d109      	bne.n	8008ea8 <__libc_init_array+0x24>
 8008e94:	4e0b      	ldr	r6, [pc, #44]	; (8008ec4 <__libc_init_array+0x40>)
 8008e96:	4c0c      	ldr	r4, [pc, #48]	; (8008ec8 <__libc_init_array+0x44>)
 8008e98:	f000 f82c 	bl	8008ef4 <_init>
 8008e9c:	1ba4      	subs	r4, r4, r6
 8008e9e:	10a4      	asrs	r4, r4, #2
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	42a5      	cmp	r5, r4
 8008ea4:	d105      	bne.n	8008eb2 <__libc_init_array+0x2e>
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eac:	4798      	blx	r3
 8008eae:	3501      	adds	r5, #1
 8008eb0:	e7ee      	b.n	8008e90 <__libc_init_array+0xc>
 8008eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eb6:	4798      	blx	r3
 8008eb8:	3501      	adds	r5, #1
 8008eba:	e7f2      	b.n	8008ea2 <__libc_init_array+0x1e>
 8008ebc:	080095b0 	.word	0x080095b0
 8008ec0:	080095b0 	.word	0x080095b0
 8008ec4:	080095b0 	.word	0x080095b0
 8008ec8:	080095b4 	.word	0x080095b4

08008ecc <memcpy>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	1e43      	subs	r3, r0, #1
 8008ed0:	440a      	add	r2, r1
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	d100      	bne.n	8008ed8 <memcpy+0xc>
 8008ed6:	bd10      	pop	{r4, pc}
 8008ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee0:	e7f7      	b.n	8008ed2 <memcpy+0x6>

08008ee2 <memset>:
 8008ee2:	4402      	add	r2, r0
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d100      	bne.n	8008eec <memset+0xa>
 8008eea:	4770      	bx	lr
 8008eec:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef0:	e7f9      	b.n	8008ee6 <memset+0x4>
	...

08008ef4 <_init>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	bf00      	nop
 8008ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efa:	bc08      	pop	{r3}
 8008efc:	469e      	mov	lr, r3
 8008efe:	4770      	bx	lr

08008f00 <_fini>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr
