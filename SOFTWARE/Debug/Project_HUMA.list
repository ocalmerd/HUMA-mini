
Project_HUMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e10  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08008f98  08008f98  00018f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009634  08009634  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009634  08009634  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009634  08009634  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800963c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000010  0800964c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800964c  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c75  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003415  00000000  00000000  00039cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  0003d0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  0003e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdf2  00000000  00000000  0003f368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ac0  00000000  00000000  0005c15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f09e  00000000  00000000  0006dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ccb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  0010cd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f80 	.word	0x08008f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008f80 	.word	0x08008f80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ESC_Calibration>:
//
extern uint8_t eeprom_data[32];


void ESC_Calibration ( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	PWM_Output_Start();
 8000a08:	f000 fd9a 	bl	8001540 <PWM_Output_Start>

	while ( true )
	{
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f811 	bl	8000a34 <Convert_Receiver_Channel>
 8000a12:	4602      	mov	r2, r0
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <ESC_Calibration+0x28>)
 8000a16:	601a      	str	r2, [r3, #0]

		esc_3 = receiver_input_channel_3;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <ESC_Calibration+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a1e:	6013      	str	r3, [r2, #0]

		PWM_Output_ESC_Calibration( esc_3 );
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fdbf 	bl	80015a8 <PWM_Output_ESC_Calibration>
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a2a:	e7ef      	b.n	8000a0c <ESC_Calibration+0x8>
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	200000fc 	.word	0x200000fc

08000a34 <Convert_Receiver_Channel>:
	}
}

int Convert_Receiver_Channel( uint8_t function )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       	//First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           		//What channel corresponds with the specific function
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3317      	adds	r3, #23
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000 )	{	reverse = 1;	}               //Reverse channel when most significant bit is set
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3317      	adds	r3, #23
 8000a50:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da03      	bge.n	8000a62 <Convert_Receiver_Channel+0x2e>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a60:	e002      	b.n	8000a68 <Convert_Receiver_Channel+0x34>
	else	{	reverse = 0;	}                                                       //If the most significant is not set there is no reverse
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            		//Read the actual receiver value for the corresponding function
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	4a3e      	ldr	r2, [pc, #248]	; (8000b64 <Convert_Receiver_Channel+0x130>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	623b      	str	r3, [r7, #32]
	low	   = ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14];  	//Store the low value for the specific receiver input channel
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	330f      	adds	r3, #15
 8000a78:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	7ffa      	ldrb	r2, [r7, #31]
 8000a80:	3207      	adds	r2, #7
 8000a82:	0052      	lsls	r2, r2, #1
 8000a84:	4936      	ldr	r1, [pc, #216]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a86:	5c8a      	ldrb	r2, [r1, r2]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
	center = ( eeprom_data[channel * 2 - 1]  << 8 ) | eeprom_data[channel * 2 - 2 ]; 	//Store the center value for the specific receiver input channel
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a33      	ldr	r2, [pc, #204]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	7ffa      	ldrb	r2, [r7, #31]
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	4930      	ldr	r1, [pc, #192]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aa0:	5c8a      	ldrb	r2, [r1, r2]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	617b      	str	r3, [r7, #20]
	high   = ( eeprom_data[channel * 2 + 7]  << 8 ) | eeprom_data[channel * 2 + 6 ];  	//Store the high value for the specific receiver input channel
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3307      	adds	r3, #7
 8000aac:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	7ffa      	ldrb	r2, [r7, #31]
 8000ab4:	3203      	adds	r2, #3
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	4929      	ldr	r1, [pc, #164]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aba:	5c8a      	ldrb	r2, [r1, r2]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000ac0:	6a3a      	ldr	r2, [r7, #32]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	da1f      	bge.n	8000b08 <Convert_Receiver_Channel+0xd4>
	{                                                         							//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                                       //Limit the lowest value to the value that was detected during setup
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	da01      	bge.n	8000ad4 <Convert_Receiver_Channel+0xa0>
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);       	//Calculate and scale the actual value to a 1000 - 2000us value
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ade:	fb02 f203 	mul.w	r2, r2, r3
 8000ae2:	6979      	ldr	r1, [r7, #20]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aec:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                           //If the channel is reversed
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <Convert_Receiver_Channel+0xca>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000afc:	e02a      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else 	 {	return 1500 - difference;	}                                       //If the channel is not reversed
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b04:	3304      	adds	r3, #4
 8000b06:	e025      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else if( actual > center )
 8000b08:	6a3a      	ldr	r2, [r7, #32]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dd1f      	ble.n	8000b50 <Convert_Receiver_Channel+0x11c>
	{                                                                        			//The actual receiver value is higher than the center value
		if( actual > high )	{	actual = high;	}                                       //Limit the lowest value to the value that was detected during setup
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dd01      	ble.n	8000b1c <Convert_Receiver_Channel+0xe8>
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center);      	//Calculate and scale the actual value to a 1000 - 2000us value
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b26:	fb02 f203 	mul.w	r2, r2, r3
 8000b2a:	6939      	ldr	r1, [r7, #16]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                           //If the channel is reversed
 8000b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <Convert_Receiver_Channel+0x114>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b44:	3304      	adds	r3, #4
 8000b46:	e005      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else	{	return 1500 + difference;	}                                       //If the channel is not reversed
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000b4e:	e001      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else	{	return 1500;	}
 8000b50:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	372c      	adds	r7, #44	; 0x2c
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	2000007c 	.word	0x2000007c
 8000b64:	200000a4 	.word	0x200000a4

08000b68 <Flash_ErasePage>:

uint32_t PageError;


void Flash_ErasePage( uint32_t pageaddress )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b70:	f002 ff9c 	bl	8003aac <HAL_FLASH_Unlock>

//	HAL_FLASHEx_Erase( (FLASH_EraseInitTypeDef *) FLASH_TYPEERASE_MASSERASE, (uint32_t *) PageError);
	FLASH_PageErase( pageaddress );
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f003 f85d 	bl	8003c34 <FLASH_PageErase>

	HAL_FLASH_Lock();
 8000b7a:	f002 ffbd 	bl	8003af8 <HAL_FLASH_Lock>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Flash_EEPROM_Data_Write>:

void Flash_EEPROM_Data_Write( uint8_t page, uint32_t address, uint32_t index, void *writeBuffer )
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b087      	sub	sp, #28
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + (index*2);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]

	//Unlock Flash
	HAL_FLASH_Unlock();
 8000ba0:	f002 ff84 	bl	8003aac <HAL_FLASH_Unlock>

	//Write to Flash
	for( uint32_t i = 0; i < 1; i++ )
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e010      	b.n	8000bcc <Flash_EEPROM_Data_Write+0x46>
	{
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ( (uint16_t *)writeBuffer)[i] );
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	f04f 0400 	mov.w	r4, #0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4623      	mov	r3, r4
 8000bbe:	6939      	ldr	r1, [r7, #16]
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f002 ff03 	bl	80039cc <HAL_FLASH_Program>
	for( uint32_t i = 0; i < 1; i++ )
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0eb      	beq.n	8000baa <Flash_EEPROM_Data_Write+0x24>
	}

	//Lock the Flash space
	HAL_FLASH_Lock();
 8000bd2:	f002 ff91 	bl	8003af8 <HAL_FLASH_Lock>
}
 8000bd6:	bf00      	nop
 8000bd8:	371c      	adds	r7, #28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd90      	pop	{r4, r7, pc}

08000bde <Flash_EEPROM_Data_Read>:

void Flash_EEPROM_Data_Read( uint8_t page, uint32_t address, uint32_t index, void *readBuffer )
{
 8000bde:	b480      	push	{r7}
 8000be0:	b087      	sub	sp, #28
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4603      	mov	r3, r0
 8000bec:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + (index*2);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]

		*((uint16_t *)readBuffer) = *(uint32_t *)flashAddress;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	801a      	strh	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <Flight_Control_Setup>:
//
extern uint8_t eeprom_data[32];


void Flight_Control_Setup( void )
{
 8000c10:	b598      	push	{r3, r4, r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_Delay( 3000 );
 8000c14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c18:	f002 fd5a 	bl	80036d0 <HAL_Delay>

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <Flight_Control_Setup+0x10c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e033      	b.n	8000c8c <Flight_Control_Setup+0x7c>
	{
		Flight_Gyro_Signalen();                                           //Read the gyro output.
 8000c24:	f000 f888 	bl	8000d38 <Flight_Gyro_Signalen>

		gyro_axis_cal[1] += gyro_axis[1];                          //Ad roll value to gyro_roll_cal.
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <Flight_Control_Setup+0x114>)
 8000c30:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	f7ff facc 	bl	80001d4 <__adddf3>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	460c      	mov	r4, r1
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c42:	e9c2 3402 	strd	r3, r4, [r2, #8]
		gyro_axis_cal[2] += gyro_axis[2];                          //Ad pitch value to gyro_pitch_cal.
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <Flight_Control_Setup+0x114>)
 8000c4e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4623      	mov	r3, r4
 8000c56:	f7ff fabd 	bl	80001d4 <__adddf3>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c60:	e9c2 3404 	strd	r3, r4, [r2, #16]
		gyro_axis_cal[3] += gyro_axis[3];                          //Ad yaw value to gyro_yaw_cal.                                               //Wait 3 milliseconds before the next loop.
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c66:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <Flight_Control_Setup+0x114>)
 8000c6c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	f7ff faae 	bl	80001d4 <__adddf3>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c7e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <Flight_Control_Setup+0x10c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <Flight_Control_Setup+0x10c>)
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <Flight_Control_Setup+0x10c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c94:	dbc6      	blt.n	8000c24 <Flight_Control_Setup+0x14>
	}

	//Now that we have 2000 measures, we need to divide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                    //Divide the roll total by 2000.
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000c98:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <Flight_Control_Setup+0x118>)
 8000ca2:	f7ff fd77 	bl	8000794 <__aeabi_ddiv>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460c      	mov	r4, r1
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000cac:	e9c2 3402 	strd	r3, r4, [r2, #8]
	gyro_axis_cal[2] /= 2000;                                    //Divide the pitch total by 2000.
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000cb2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <Flight_Control_Setup+0x118>)
 8000cbc:	f7ff fd6a 	bl	8000794 <__aeabi_ddiv>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000cc6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	gyro_axis_cal[3] /= 2000;                                    //Divide the yaw total by 2000.
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000ccc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <Flight_Control_Setup+0x118>)
 8000cd6:	f7ff fd5d 	bl	8000794 <__aeabi_ddiv>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460c      	mov	r4, r1
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <Flight_Control_Setup+0x110>)
 8000ce0:	e9c2 3406 	strd	r3, r4, [r2, #24]

	//Wait until the receiver is active and the throttle is set to the lower position.
	while( receiver_input_channel_3 > 1100 )
 8000ce4:	e00b      	b.n	8000cfe <Flight_Control_Setup+0xee>
	{
		receiver_input_channel_3 = Convert_Receiver_Channels(3);    //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 f8de 	bl	8000ea8 <Convert_Receiver_Channels>
 8000cec:	4602      	mov	r2, r0
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <Flight_Control_Setup+0x11c>)
 8000cf0:	601a      	str	r2, [r3, #0]
		receiver_input_channel_4 = Convert_Receiver_Channels(4);    //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f000 f8d8 	bl	8000ea8 <Convert_Receiver_Channels>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <Flight_Control_Setup+0x120>)
 8000cfc:	601a      	str	r2, [r3, #0]
	while( receiver_input_channel_3 > 1100 )
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <Flight_Control_Setup+0x11c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f240 424c 	movw	r2, #1100	; 0x44c
 8000d06:	4293      	cmp	r3, r2
 8000d08:	dced      	bgt.n	8000ce6 <Flight_Control_Setup+0xd6>
	}

	PWM_Output_Start();
 8000d0a:	f000 fc19 	bl	8001540 <PWM_Output_Start>
	PWM_Output_Idle();
 8000d0e:	f000 fc2d 	bl	800156c <PWM_Output_Idle>

	start = 0;           //Set start back to 0.
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <Flight_Control_Setup+0x124>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	bd98      	pop	{r3, r4, r7, pc}
 8000d1c:	2000002c 	.word	0x2000002c
 8000d20:	200001c8 	.word	0x200001c8
 8000d24:	200001a0 	.word	0x200001a0
 8000d28:	409f4000 	.word	0x409f4000
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	20000388 	.word	0x20000388
 8000d34:	20000290 	.word	0x20000290

08000d38 <Flight_Gyro_Signalen>:
		PWM_Output_Idle();
	}
}

void Flight_Gyro_Signalen( void )
{
 8000d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d3c:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8000d3e:	f000 f9cd 	bl	80010dc <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_axis[1] = gX_Raw;
 8000d42:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <Flight_Gyro_Signalen+0x148>)
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fb8f 	bl	800046c <__aeabi_i2d>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	494c      	ldr	r1, [pc, #304]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000d54:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_axis[2] = gY_Raw;
 8000d58:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <Flight_Gyro_Signalen+0x150>)
 8000d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fb84 	bl	800046c <__aeabi_i2d>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4946      	ldr	r1, [pc, #280]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000d6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gyro_axis[3] = gZ_Raw;
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <Flight_Gyro_Signalen+0x154>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb79 	bl	800046c <__aeabi_i2d>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4941      	ldr	r1, [pc, #260]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000d80:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(cal_int == 2000)
 8000d84:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <Flight_Gyro_Signalen+0x158>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d8c:	d126      	bne.n	8000ddc <Flight_Gyro_Signalen+0xa4>
	{
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000d90:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <Flight_Gyro_Signalen+0x15c>)
 8000d96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d9a:	f7ff fa19 	bl	80001d0 <__aeabi_dsub>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4938      	ldr	r1, [pc, #224]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000da4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000daa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <Flight_Gyro_Signalen+0x15c>)
 8000db0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000db4:	f7ff fa0c 	bl	80001d0 <__aeabi_dsub>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4931      	ldr	r1, [pc, #196]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000dbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000dc4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <Flight_Gyro_Signalen+0x15c>)
 8000dca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000dce:	f7ff f9ff 	bl	80001d0 <__aeabi_dsub>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	492b      	ldr	r1, [pc, #172]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000dd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	gyro_roll  = gyro_axis[eeprom_data[28] & 0b00000011];
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <Flight_Gyro_Signalen+0x160>)
 8000dde:	7f1b      	ldrb	r3, [r3, #28]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4413      	add	r3, r2
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	492b      	ldr	r1, [pc, #172]	; (8000e9c <Flight_Gyro_Signalen+0x164>)
 8000df0:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[28] & 0b10000000 )	{	gyro_roll *= -1;	}
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <Flight_Gyro_Signalen+0x160>)
 8000df6:	7f1b      	ldrb	r3, [r3, #28]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	da08      	bge.n	8000e10 <Flight_Gyro_Signalen+0xd8>
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <Flight_Gyro_Signalen+0x164>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	4692      	mov	sl, r2
 8000e06:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <Flight_Gyro_Signalen+0x164>)
 8000e0c:	e9c3 ab00 	strd	sl, fp, [r3]

	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <Flight_Gyro_Signalen+0x160>)
 8000e12:	7f5b      	ldrb	r3, [r3, #29]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	4a1a      	ldr	r2, [pc, #104]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	491f      	ldr	r1, [pc, #124]	; (8000ea0 <Flight_Gyro_Signalen+0x168>)
 8000e24:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[29] & 0b10000000 )	{	gyro_pitch *= -1;	}
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <Flight_Gyro_Signalen+0x160>)
 8000e2a:	7f5b      	ldrb	r3, [r3, #29]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da08      	bge.n	8000e44 <Flight_Gyro_Signalen+0x10c>
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <Flight_Gyro_Signalen+0x168>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	4690      	mov	r8, r2
 8000e3a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <Flight_Gyro_Signalen+0x168>)
 8000e40:	e9c3 8900 	strd	r8, r9, [r3]

	gyro_yaw   = gyro_axis[eeprom_data[30] & 0b00000011];
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <Flight_Gyro_Signalen+0x160>)
 8000e46:	7f9b      	ldrb	r3, [r3, #30]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <Flight_Gyro_Signalen+0x14c>)
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4413      	add	r3, r2
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	4913      	ldr	r1, [pc, #76]	; (8000ea4 <Flight_Gyro_Signalen+0x16c>)
 8000e58:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[30] & 0b10000000 )	{	gyro_yaw *= -1;		}
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <Flight_Gyro_Signalen+0x160>)
 8000e5e:	7f9b      	ldrb	r3, [r3, #30]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da08      	bge.n	8000e78 <Flight_Gyro_Signalen+0x140>
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <Flight_Gyro_Signalen+0x16c>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	4614      	mov	r4, r2
 8000e6e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <Flight_Gyro_Signalen+0x16c>)
 8000e74:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000e78:	bf00      	nop
 8000e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000386 	.word	0x20000386
 8000e84:	200001a0 	.word	0x200001a0
 8000e88:	20000384 	.word	0x20000384
 8000e8c:	20000368 	.word	0x20000368
 8000e90:	2000002c 	.word	0x2000002c
 8000e94:	200001c8 	.word	0x200001c8
 8000e98:	2000007c 	.word	0x2000007c
 8000e9c:	20000390 	.word	0x20000390
 8000ea0:	20000370 	.word	0x20000370
 8000ea4:	20000378 	.word	0x20000378

08000ea8 <Convert_Receiver_Channels>:

	pid_last_yaw_d_error = pid_error_temp;
}

int Convert_Receiver_Channels( uint8_t function )
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           //What channel corresponds with the specific function
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3317      	adds	r3, #23
 8000eb6:	4a47      	ldr	r2, [pc, #284]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000eb8:	5cd3      	ldrb	r3, [r2, r3]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000  )	{	reverse = 1;	}            //Reverse channel when most significant bit is set
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	3317      	adds	r3, #23
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da03      	bge.n	8000ed6 <Convert_Receiver_Channels+0x2e>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ed4:	e002      	b.n	8000edc <Convert_Receiver_Channels+0x34>
	else	{	reverse = 0;	}                                                            //If the most significant is not set there is no reverse
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            //Read the actual receiver value for the corresponding function
 8000edc:	7ffb      	ldrb	r3, [r7, #31]
 8000ede:	4a3e      	ldr	r2, [pc, #248]	; (8000fd8 <Convert_Receiver_Channels+0x130>)
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	623b      	str	r3, [r7, #32]
	low 	= ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14]; 	//Store the low value for the specific receiver input channel
 8000ee6:	7ffb      	ldrb	r3, [r7, #31]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	330f      	adds	r3, #15
 8000eec:	4a39      	ldr	r2, [pc, #228]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	7ffa      	ldrb	r2, [r7, #31]
 8000ef4:	3207      	adds	r2, #7
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	4936      	ldr	r1, [pc, #216]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000efa:	5c8a      	ldrb	r2, [r1, r2]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
	center 	= ( eeprom_data[channel * 2 - 1] << 8 )  | eeprom_data[channel * 2 - 2];	//Store the center value for the specific receiver input channel
 8000f00:	7ffb      	ldrb	r3, [r7, #31]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	3b01      	subs	r3, #1
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	7ffa      	ldrb	r2, [r7, #31]
 8000f0e:	3a01      	subs	r2, #1
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	4930      	ldr	r1, [pc, #192]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000f14:	5c8a      	ldrb	r2, [r1, r2]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]
	high 	= ( eeprom_data[channel * 2 + 7] << 8 )  | eeprom_data[channel * 2 + 6];   	//Store the high value for the specific receiver input channel
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3307      	adds	r3, #7
 8000f20:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	7ffa      	ldrb	r2, [r7, #31]
 8000f28:	3203      	adds	r2, #3
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	4929      	ldr	r1, [pc, #164]	; (8000fd4 <Convert_Receiver_Channels+0x12c>)
 8000f2e:	5c8a      	ldrb	r2, [r1, r2]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000f34:	6a3a      	ldr	r2, [r7, #32]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	da1f      	bge.n	8000f7c <Convert_Receiver_Channels+0xd4>
	{                                             	//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                              	//Limit the lowest value to the value that was detected during setup
 8000f3c:	6a3a      	ldr	r2, [r7, #32]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	da01      	bge.n	8000f48 <Convert_Receiver_Channels+0xa0>
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);  //Calculate and scale the actual value to a 1000 - 2000us value
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f52:	fb02 f203 	mul.w	r2, r2, r3
 8000f56:	6979      	ldr	r1, [r7, #20]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	1acb      	subs	r3, r1, r3
 8000f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f60:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                   //If the channel is reversed
 8000f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d103      	bne.n	8000f72 <Convert_Receiver_Channels+0xca>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000f70:	e02a      	b.n	8000fc8 <Convert_Receiver_Channels+0x120>
		else	{	return 1500 - difference;	}                               //If the channel is not reversed
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000f78:	3304      	adds	r3, #4
 8000f7a:	e025      	b.n	8000fc8 <Convert_Receiver_Channels+0x120>
	}
	else if(actual > center)
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dd1f      	ble.n	8000fc4 <Convert_Receiver_Channels+0x11c>
	{                                           	//The actual receiver value is higher than the center value
		if(actual > high)	{	actual = high;	}                               //Limit the lowest value to the value that was detected during setup
 8000f84:	6a3a      	ldr	r2, [r7, #32]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dd01      	ble.n	8000f90 <Convert_Receiver_Channels+0xe8>
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center); //Calculate and scale the actual value to a 1000 - 2000us value
 8000f90:	6a3a      	ldr	r2, [r7, #32]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f9a:	fb02 f203 	mul.w	r2, r2, r3
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	1acb      	subs	r3, r1, r3
 8000fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa8:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                  	//If the channel is reversed
 8000faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d104      	bne.n	8000fbc <Convert_Receiver_Channels+0x114>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000fb8:	3304      	adds	r3, #4
 8000fba:	e005      	b.n	8000fc8 <Convert_Receiver_Channels+0x120>
		else	{	return 1500 + difference;	}                               //If the channel is not reversed
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000fc2:	e001      	b.n	8000fc8 <Convert_Receiver_Channels+0x120>
	}
	else	{	return 1500;	}
 8000fc4:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	372c      	adds	r7, #44	; 0x2c
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	2000007c 	.word	0x2000007c
 8000fd8:	200000a4 	.word	0x200000a4

08000fdc <L3GD20H_Init>:
//
extern bool gyro_error;


void L3GD20H_Init( void )
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af04      	add	r7, sp, #16
	uint8_t L3GD20H_WHO_AM_I_Check = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD , L3GD20H_REG_WHO_AM_I, 1, &L3GD20H_WHO_AM_I_Check, 1, 100 );
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	21d7      	movs	r1, #215	; 0xd7
 8000ff8:	482f      	ldr	r0, [pc, #188]	; (80010b8 <L3GD20H_Init+0xdc>)
 8000ffa:	f003 f989 	bl	8004310 <HAL_I2C_Mem_Read>

	if ( L3GD20H_WHO_AM_I_Check == L3GD20H_WHO_AM_I )
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2bd4      	cmp	r3, #212	; 0xd4
 8001002:	d137      	bne.n	8001074 <L3GD20H_Init+0x98>
	{
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL1, 1, &L3GD20H_SET_CTRL1,	1, 10 );
 8001004:	230a      	movs	r3, #10
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <L3GD20H_Init+0xe0>)
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2220      	movs	r2, #32
 8001014:	21d6      	movs	r1, #214	; 0xd6
 8001016:	4828      	ldr	r0, [pc, #160]	; (80010b8 <L3GD20H_Init+0xdc>)
 8001018:	f003 f866 	bl	80040e8 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL4, 1, &L3GD20H_SET_CTRL4, 1, 10 );
 800101c:	230a      	movs	r3, #10
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <L3GD20H_Init+0xe4>)
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2223      	movs	r2, #35	; 0x23
 800102c:	21d6      	movs	r1, #214	; 0xd6
 800102e:	4822      	ldr	r0, [pc, #136]	; (80010b8 <L3GD20H_Init+0xdc>)
 8001030:	f003 f85a 	bl	80040e8 <HAL_I2C_Mem_Write>

		sprintf(uartTX, "                                                                                                    ");
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <L3GD20H_Init+0xe8>)
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <L3GD20H_Init+0xec>)
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	2365      	movs	r3, #101	; 0x65
 800103e:	461a      	mov	r2, r3
 8001040:	f007 ff8a 	bl	8008f58 <memcpy>
		sprintf(uartTX, "\nL3GD20H is found and settled!\n");
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <L3GD20H_Init+0xe8>)
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <L3GD20H_Init+0xf0>)
 8001048:	4614      	mov	r4, r2
 800104a:	461d      	mov	r5, r3
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	6020      	str	r0, [r4, #0]
 8001050:	6061      	str	r1, [r4, #4]
 8001052:	60a2      	str	r2, [r4, #8]
 8001054:	60e3      	str	r3, [r4, #12]
 8001056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001058:	6120      	str	r0, [r4, #16]
 800105a:	6161      	str	r1, [r4, #20]
 800105c:	61a2      	str	r2, [r4, #24]
 800105e:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	2265      	movs	r2, #101	; 0x65
 8001064:	4917      	ldr	r1, [pc, #92]	; (80010c4 <L3GD20H_Init+0xe8>)
 8001066:	481a      	ldr	r0, [pc, #104]	; (80010d0 <L3GD20H_Init+0xf4>)
 8001068:	f007 f98e 	bl	8008388 <HAL_UART_Transmit>

		gyro_error = false;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <L3GD20H_Init+0xf8>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );

		gyro_error = true;
	}
}
 8001072:	e01c      	b.n	80010ae <L3GD20H_Init+0xd2>
		sprintf(uartTX, "                                                                                                    ");
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <L3GD20H_Init+0xe8>)
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <L3GD20H_Init+0xec>)
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	2365      	movs	r3, #101	; 0x65
 800107e:	461a      	mov	r2, r3
 8001080:	f007 ff6a 	bl	8008f58 <memcpy>
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <L3GD20H_Init+0xe8>)
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <L3GD20H_Init+0xfc>)
 8001088:	4615      	mov	r5, r2
 800108a:	461c      	mov	r4, r3
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	6028      	str	r0, [r5, #0]
 8001090:	6069      	str	r1, [r5, #4]
 8001092:	60aa      	str	r2, [r5, #8]
 8001094:	60eb      	str	r3, [r5, #12]
 8001096:	cc03      	ldmia	r4!, {r0, r1}
 8001098:	6128      	str	r0, [r5, #16]
 800109a:	6169      	str	r1, [r5, #20]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	2265      	movs	r2, #101	; 0x65
 80010a0:	4908      	ldr	r1, [pc, #32]	; (80010c4 <L3GD20H_Init+0xe8>)
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <L3GD20H_Init+0xf4>)
 80010a4:	f007 f970 	bl	8008388 <HAL_UART_Transmit>
		gyro_error = true;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <L3GD20H_Init+0xf8>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000150 	.word	0x20000150
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000001 	.word	0x20000001
 80010c4:	200002a4 	.word	0x200002a4
 80010c8:	08008f98 	.word	0x08008f98
 80010cc:	08009000 	.word	0x08009000
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	2000036b 	.word	0x2000036b
 80010d8:	08009020 	.word	0x08009020

080010dc <L3GD20H_Read_Gyro_RAW_Outputs>:

void L3GD20H_Read_Gyro_RAW_Outputs( void )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_L, 1,  &L3GD20H_OUT_X_L, 1, 100);
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	2228      	movs	r2, #40	; 0x28
 80010f2:	21d7      	movs	r1, #215	; 0xd7
 80010f4:	4832      	ldr	r0, [pc, #200]	; (80011c0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 80010f6:	f003 f90b 	bl	8004310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_H, 1, 	&L3GD20H_OUT_X_H, 1, 100);
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	2229      	movs	r2, #41	; 0x29
 800110a:	21d7      	movs	r1, #215	; 0xd7
 800110c:	482c      	ldr	r0, [pc, #176]	; (80011c0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800110e:	f003 f8ff 	bl	8004310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_L, 1,  &L3GD20H_OUT_Y_L, 1, 100);
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	222a      	movs	r2, #42	; 0x2a
 8001122:	21d7      	movs	r1, #215	; 0xd7
 8001124:	4826      	ldr	r0, [pc, #152]	; (80011c0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001126:	f003 f8f3 	bl	8004310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_H, 1,  &L3GD20H_OUT_Y_H, 1, 100);
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	222b      	movs	r2, #43	; 0x2b
 800113a:	21d7      	movs	r1, #215	; 0xd7
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800113e:	f003 f8e7 	bl	8004310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_L, 1,  &L3GD20H_OUT_Z_L, 1, 100);
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	222c      	movs	r2, #44	; 0x2c
 8001152:	21d7      	movs	r1, #215	; 0xd7
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001156:	f003 f8db 	bl	8004310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_H, 1,  &L3GD20H_OUT_Z_H, 1, 100);
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2301      	movs	r3, #1
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	222d      	movs	r2, #45	; 0x2d
 800116a:	21d7      	movs	r1, #215	; 0xd7
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800116e:	f003 f8cf 	bl	8004310 <HAL_I2C_Mem_Read>

	gX_Raw = (int16_t) (L3GD20H_OUT_X_H << 8 | L3GD20H_OUT_X_L);
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <L3GD20H_Read_Gyro_RAW_Outputs+0xfc>)
 8001186:	801a      	strh	r2, [r3, #0]
	gY_Raw = (int16_t) (L3GD20H_OUT_Y_H << 8 | L3GD20H_OUT_Y_L);
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <L3GD20H_Read_Gyro_RAW_Outputs+0x100>)
 800119c:	801a      	strh	r2, [r3, #0]
	gZ_Raw = (int16_t) (L3GD20H_OUT_Z_H << 8 | L3GD20H_OUT_Z_L);
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <L3GD20H_Read_Gyro_RAW_Outputs+0x104>)
 80011b2:	801a      	strh	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000030 	.word	0x20000030
 80011c0:	20000150 	.word	0x20000150
 80011c4:	20000031 	.word	0x20000031
 80011c8:	20000032 	.word	0x20000032
 80011cc:	20000033 	.word	0x20000033
 80011d0:	20000034 	.word	0x20000034
 80011d4:	20000035 	.word	0x20000035
 80011d8:	20000386 	.word	0x20000386
 80011dc:	20000384 	.word	0x20000384
 80011e0:	20000368 	.word	0x20000368

080011e4 <PWM_IC_Start>:
extern int receiver_input_channel_1, receiver_input_channel_2, receiver_input_channel_3, receiver_input_channel_4;
extern int receiver_input[5];


void PWM_IC_Start( void )
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 80011e8:	2100      	movs	r1, #0
 80011ea:	4802      	ldr	r0, [pc, #8]	; (80011f4 <PWM_IC_Start+0x10>)
 80011ec:	f005 fdc4 	bl	8006d78 <HAL_TIM_IC_Start_IT>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000100 	.word	0x20000100

080011f8 <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3);
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4);
}

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 )   // if the interrupt source is channel1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7f1b      	ldrb	r3, [r3, #28]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d158      	bne.n	80012ba <HAL_TIM_IC_CaptureCallback+0xc2>
	{
		if ( First_Captured == false ) 												// if the first value is not captured
 8001208:	4b6c      	ldr	r3, [pc, #432]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d11a      	bne.n	8001246 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			Roll_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 ); 	// read the first value
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f006 fa1c 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 8001218:	4602      	mov	r2, r0
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800121c:	601a      	str	r2, [r3, #0]
			First_Captured = true;  											// set the first captured as true
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a1a      	ldr	r2, [r3, #32]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020a 	bic.w	r2, r2, #10
 8001232:	621a      	str	r2, [r3, #32]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0202 	orr.w	r2, r2, #2
 8001242:	621a      	str	r2, [r3, #32]
 8001244:	e039      	b.n	80012ba <HAL_TIM_IC_CaptureCallback+0xc2>
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d135      	bne.n	80012ba <HAL_TIM_IC_CaptureCallback+0xc2>
		{
			Roll_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 );  // read second value
 800124e:	2100      	movs	r1, #0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f006 f9fd 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 8001256:	4602      	mov	r2, r0
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800125a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Roll_IC_Val2 > Roll_IC_Val1 )
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d90b      	bls.n	8001288 <HAL_TIM_IC_CaptureCallback+0x90>
			{
				receiver_input_channel_1 = Roll_IC_Val2 - Roll_IC_Val1;
 8001270:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b52      	ldr	r3, [pc, #328]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	461a      	mov	r2, r3
 800127c:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800127e:	601a      	str	r2, [r3, #0]
				receiver_input[1] = receiver_input_channel_1;
 8001280:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a51      	ldr	r2, [pc, #324]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001286:	6053      	str	r3, [r2, #4]
			}

			First_Captured = false;	// set it back to false
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING );	// set polarity to rising edge
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020a 	bic.w	r2, r2, #10
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a12      	ldr	r2, [r2, #32]
 80012a8:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_1 );
 80012aa:	2100      	movs	r1, #0
 80012ac:	4848      	ldr	r0, [pc, #288]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012ae:	f005 fdd1 	bl	8006e54 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_2 );
 80012b2:	2104      	movs	r1, #4
 80012b4:	4846      	ldr	r0, [pc, #280]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012b6:	f005 fd5f 	bl	8006d78 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2 )   // if the interrupt source is channel2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7f1b      	ldrb	r3, [r3, #28]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d158      	bne.n	8001374 <HAL_TIM_IC_CaptureCallback+0x17c>
	{
		if ( First_Captured == false ) // if the first value is not captured
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11a      	bne.n	8001300 <HAL_TIM_IC_CaptureCallback+0x108>
		{
			Pitch_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 ); 	// read the first value
 80012ca:	2104      	movs	r1, #4
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f006 f9bf 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80012d6:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80012ec:	621a      	str	r2, [r3, #32]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	621a      	str	r2, [r3, #32]
 80012fe:	e039      	b.n	8001374 <HAL_TIM_IC_CaptureCallback+0x17c>
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d135      	bne.n	8001374 <HAL_TIM_IC_CaptureCallback+0x17c>
		{
			Pitch_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 );  // read second value
 8001308:	2104      	movs	r1, #4
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f006 f9a0 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 8001310:	4602      	mov	r2, r0
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001314:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Pitch_IC_Val2 > Pitch_IC_Val1 )
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d90b      	bls.n	8001342 <HAL_TIM_IC_CaptureCallback+0x14a>
			{
				receiver_input_channel_2 = Pitch_IC_Val2 - Pitch_IC_Val1;
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001338:	601a      	str	r2, [r3, #0]
				receiver_input[2] = receiver_input_channel_2;
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001340:	6093      	str	r3, [r2, #8]
			}

			First_Captured = false; // set it back to false
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a1a      	ldr	r2, [r3, #32]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001356:	621a      	str	r2, [r3, #32]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a12      	ldr	r2, [r2, #32]
 8001362:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_2 );
 8001364:	2104      	movs	r1, #4
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001368:	f005 fd74 	bl	8006e54 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_3 );
 800136c:	2108      	movs	r1, #8
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001370:	f005 fd02 	bl	8006d78 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3 )   // if the interrupt source is channel2
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7f1b      	ldrb	r3, [r3, #28]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d16d      	bne.n	8001458 <HAL_TIM_IC_CaptureCallback+0x260>
	{
		if ( First_Captured == false ) // if the first value is not captured
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d12f      	bne.n	80013e4 <HAL_TIM_IC_CaptureCallback+0x1ec>
		{
			Throttle_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 ); 	// read the first value
 8001384:	2108      	movs	r1, #8
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f006 f962 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 800138c:	4602      	mov	r2, r0
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8001390:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80013a6:	621a      	str	r2, [r3, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b6:	621a      	str	r2, [r3, #32]
 80013b8:	e04e      	b.n	8001458 <HAL_TIM_IC_CaptureCallback+0x260>
 80013ba:	bf00      	nop
 80013bc:	20000036 	.word	0x20000036
 80013c0:	20000038 	.word	0x20000038
 80013c4:	2000003c 	.word	0x2000003c
 80013c8:	2000038c 	.word	0x2000038c
 80013cc:	200000a4 	.word	0x200000a4
 80013d0:	20000100 	.word	0x20000100
 80013d4:	20000040 	.word	0x20000040
 80013d8:	20000044 	.word	0x20000044
 80013dc:	20000380 	.word	0x20000380
 80013e0:	20000048 	.word	0x20000048
		}

		else if ( First_Captured == true )   // if the first is already captured
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_TIM_IC_CaptureCallback+0x324>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d135      	bne.n	8001458 <HAL_TIM_IC_CaptureCallback+0x260>
		{
			Throttle_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 );  // read second value
 80013ec:	2108      	movs	r1, #8
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f006 f92e 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <HAL_TIM_IC_CaptureCallback+0x328>)
 80013f8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Throttle_IC_Val2 > Throttle_IC_Val1 )
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d90b      	bls.n	8001426 <HAL_TIM_IC_CaptureCallback+0x22e>
			{
				receiver_input_channel_3 = Throttle_IC_Val2 - Throttle_IC_Val1;
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_TIM_IC_CaptureCallback+0x330>)
 800141c:	601a      	str	r2, [r3, #0]
				receiver_input[3] = receiver_input_channel_3;
 800141e:	4b42      	ldr	r3, [pc, #264]	; (8001528 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a42      	ldr	r2, [pc, #264]	; (800152c <HAL_TIM_IC_CaptureCallback+0x334>)
 8001424:	60d3      	str	r3, [r2, #12]
			}

			First_Captured = false; // set it back to false
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a1a      	ldr	r2, [r3, #32]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800143a:	621a      	str	r2, [r3, #32]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a12      	ldr	r2, [r2, #32]
 8001446:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3 );
 8001448:	2108      	movs	r1, #8
 800144a:	4839      	ldr	r0, [pc, #228]	; (8001530 <HAL_TIM_IC_CaptureCallback+0x338>)
 800144c:	f005 fd02 	bl	8006e54 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_4 );
 8001450:	210c      	movs	r1, #12
 8001452:	4837      	ldr	r0, [pc, #220]	; (8001530 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001454:	f005 fc90 	bl	8006d78 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_4 )   // if the interrupt source is channel2
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f1b      	ldrb	r3, [r3, #28]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d158      	bne.n	8001512 <HAL_TIM_IC_CaptureCallback+0x31a>
	{
		if ( First_Captured == false ) // if the first value is not captured
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d11a      	bne.n	800149e <HAL_TIM_IC_CaptureCallback+0x2a6>
		{
			Yaw_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_4 ); 	// read the first value
 8001468:	210c      	movs	r1, #12
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f006 f8f0 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 8001470:	4602      	mov	r2, r0
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001474:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_TIM_IC_CaptureCallback+0x324>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a1a      	ldr	r2, [r3, #32]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800149a:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
		}
	}
}
 800149c:	e039      	b.n	8001512 <HAL_TIM_IC_CaptureCallback+0x31a>
		else if ( First_Captured == true )   // if the first is already captured
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_TIM_IC_CaptureCallback+0x324>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d135      	bne.n	8001512 <HAL_TIM_IC_CaptureCallback+0x31a>
			Yaw_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80014a6:	210c      	movs	r1, #12
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f006 f8d1 	bl	8007650 <HAL_TIM_ReadCapturedValue>
 80014ae:	4602      	mov	r2, r0
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_TIM_IC_CaptureCallback+0x340>)
 80014b2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
			if ( Yaw_IC_Val2 > Yaw_IC_Val1 )
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_TIM_IC_CaptureCallback+0x340>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d90b      	bls.n	80014e0 <HAL_TIM_IC_CaptureCallback+0x2e8>
				receiver_input_channel_4 = Yaw_IC_Val2 - Yaw_IC_Val1;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_TIM_IC_CaptureCallback+0x340>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_TIM_IC_CaptureCallback+0x344>)
 80014d6:	601a      	str	r2, [r3, #0]
				receiver_input[4] = receiver_input_channel_4;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_TIM_IC_CaptureCallback+0x344>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_TIM_IC_CaptureCallback+0x334>)
 80014de:	6113      	str	r3, [r2, #16]
			First_Captured = false; // set it back to false
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_TIM_IC_CaptureCallback+0x324>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80014f4:	621a      	str	r2, [r3, #32]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a12      	ldr	r2, [r2, #32]
 8001500:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
 8001502:	210c      	movs	r1, #12
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001506:	f005 fca5 	bl	8006e54 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 800150a:	2100      	movs	r1, #0
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <HAL_TIM_IC_CaptureCallback+0x338>)
 800150e:	f005 fc33 	bl	8006d78 <HAL_TIM_IC_Start_IT>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000036 	.word	0x20000036
 8001520:	2000004c 	.word	0x2000004c
 8001524:	20000048 	.word	0x20000048
 8001528:	2000009c 	.word	0x2000009c
 800152c:	200000a4 	.word	0x200000a4
 8001530:	20000100 	.word	0x20000100
 8001534:	20000050 	.word	0x20000050
 8001538:	20000054 	.word	0x20000054
 800153c:	20000388 	.word	0x20000388

08001540 <PWM_Output_Start>:

#include "PWM_Output.h"


void PWM_Output_Start( void )
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1);
 8001544:	2100      	movs	r1, #0
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <PWM_Output_Start+0x28>)
 8001548:	f005 fb92 	bl	8006c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2);
 800154c:	2104      	movs	r1, #4
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <PWM_Output_Start+0x28>)
 8001550:	f005 fb8e 	bl	8006c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_3);
 8001554:	2108      	movs	r1, #8
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <PWM_Output_Start+0x28>)
 8001558:	f005 fb8a 	bl	8006c70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_4);
 800155c:	210c      	movs	r1, #12
 800155e:	4802      	ldr	r0, [pc, #8]	; (8001568 <PWM_Output_Start+0x28>)
 8001560:	f005 fb86 	bl	8006c70 <HAL_TIM_PWM_Start>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200000b8 	.word	0x200000b8

0800156c <PWM_Output_Idle>:

void PWM_Output_Idle( void )
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = 1000;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <PWM_Output_Idle+0x38>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 1000;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <PWM_Output_Idle+0x38>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 1000;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <PWM_Output_Idle+0x38>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 1000;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <PWM_Output_Idle+0x38>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200000b8 	.word	0x200000b8

080015a8 <PWM_Output_ESC_Calibration>:

void PWM_Output_ESC_Calibration( int esc_3 )
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = esc_3;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <PWM_Output_ESC_Calibration+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = esc_3;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <PWM_Output_ESC_Calibration+0x34>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = esc_3;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <PWM_Output_ESC_Calibration+0x34>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = esc_3;
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <PWM_Output_ESC_Calibration+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200000b8 	.word	0x200000b8

080015e0 <Main_Setup>:
extern float gyro_pitch, gyro_roll, gyro_yaw;
extern int16_t gX_Raw, gY_Raw, gZ_Raw;


void Main_Setup( void )
{
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    sprintf(uartTX, "                                                                                                    ");
 80015e4:	4a8f      	ldr	r2, [pc, #572]	; (8001824 <Main_Setup+0x244>)
 80015e6:	4b90      	ldr	r3, [pc, #576]	; (8001828 <Main_Setup+0x248>)
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	2365      	movs	r3, #101	; 0x65
 80015ee:	461a      	mov	r2, r3
 80015f0:	f007 fcb2 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nMove the sticks to the center position within 10 seconds!\n");
 80015f4:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <Main_Setup+0x244>)
 80015f6:	4a8d      	ldr	r2, [pc, #564]	; (800182c <Main_Setup+0x24c>)
 80015f8:	4614      	mov	r4, r2
 80015fa:	469c      	mov	ip, r3
 80015fc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001600:	4665      	mov	r5, ip
 8001602:	4626      	mov	r6, r4
 8001604:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001606:	6028      	str	r0, [r5, #0]
 8001608:	6069      	str	r1, [r5, #4]
 800160a:	60aa      	str	r2, [r5, #8]
 800160c:	60eb      	str	r3, [r5, #12]
 800160e:	3410      	adds	r4, #16
 8001610:	f10c 0c10 	add.w	ip, ip, #16
 8001614:	4574      	cmp	r4, lr
 8001616:	d1f3      	bne.n	8001600 <Main_Setup+0x20>
 8001618:	4665      	mov	r5, ip
 800161a:	4623      	mov	r3, r4
 800161c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800161e:	6028      	str	r0, [r5, #0]
 8001620:	6069      	str	r1, [r5, #4]
 8001622:	60aa      	str	r2, [r5, #8]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	2265      	movs	r2, #101	; 0x65
 8001628:	497e      	ldr	r1, [pc, #504]	; (8001824 <Main_Setup+0x244>)
 800162a:	4881      	ldr	r0, [pc, #516]	; (8001830 <Main_Setup+0x250>)
 800162c:	f006 feac 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001630:	f242 7010 	movw	r0, #10000	; 0x2710
 8001634:	f002 f84c 	bl	80036d0 <HAL_Delay>

    //Store the central stick positions
    center_channel_1 = receiver_input_channel_1;
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <Main_Setup+0x254>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a7e      	ldr	r2, [pc, #504]	; (8001838 <Main_Setup+0x258>)
 800163e:	6013      	str	r3, [r2, #0]
    center_channel_2 = receiver_input_channel_2;
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <Main_Setup+0x25c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a7e      	ldr	r2, [pc, #504]	; (8001840 <Main_Setup+0x260>)
 8001646:	6013      	str	r3, [r2, #0]
    center_channel_3 = receiver_input_channel_3;
 8001648:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <Main_Setup+0x264>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <Main_Setup+0x268>)
 800164e:	6013      	str	r3, [r2, #0]
    center_channel_4 = receiver_input_channel_4;
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <Main_Setup+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a7e      	ldr	r2, [pc, #504]	; (8001850 <Main_Setup+0x270>)
 8001656:	6013      	str	r3, [r2, #0]


    sprintf(uartTX, "                                                                                                    ");
 8001658:	4a72      	ldr	r2, [pc, #456]	; (8001824 <Main_Setup+0x244>)
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <Main_Setup+0x248>)
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	2365      	movs	r3, #101	; 0x65
 8001662:	461a      	mov	r2, r3
 8001664:	f007 fc78 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nMove the sticks to min & max positions then back to center within 10 seconds!\n");
 8001668:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <Main_Setup+0x244>)
 800166a:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <Main_Setup+0x274>)
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	2350      	movs	r3, #80	; 0x50
 8001672:	461a      	mov	r2, r3
 8001674:	f007 fc70 	bl	8008f58 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	2265      	movs	r2, #101	; 0x65
 800167c:	4969      	ldr	r1, [pc, #420]	; (8001824 <Main_Setup+0x244>)
 800167e:	486c      	ldr	r0, [pc, #432]	; (8001830 <Main_Setup+0x250>)
 8001680:	f006 fe82 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 1000 );
 8001684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001688:	f002 f822 	bl	80036d0 <HAL_Delay>
    //Register the min and max values of the receiver channels
    Register_Min_Max();
 800168c:	f000 fea8 	bl	80023e0 <Register_Min_Max>


    sprintf(uartTX, "                                                                                                    ");
 8001690:	4a64      	ldr	r2, [pc, #400]	; (8001824 <Main_Setup+0x244>)
 8001692:	4b65      	ldr	r3, [pc, #404]	; (8001828 <Main_Setup+0x248>)
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	2365      	movs	r3, #101	; 0x65
 800169a:	461a      	mov	r2, r3
 800169c:	f007 fc5c 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nMove the throttle stick to full throttle within 10 seconds!\n");
 80016a0:	4b60      	ldr	r3, [pc, #384]	; (8001824 <Main_Setup+0x244>)
 80016a2:	4a6d      	ldr	r2, [pc, #436]	; (8001858 <Main_Setup+0x278>)
 80016a4:	4614      	mov	r4, r2
 80016a6:	469c      	mov	ip, r3
 80016a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80016ac:	4665      	mov	r5, ip
 80016ae:	4626      	mov	r6, r4
 80016b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016b2:	6028      	str	r0, [r5, #0]
 80016b4:	6069      	str	r1, [r5, #4]
 80016b6:	60aa      	str	r2, [r5, #8]
 80016b8:	60eb      	str	r3, [r5, #12]
 80016ba:	3410      	adds	r4, #16
 80016bc:	f10c 0c10 	add.w	ip, ip, #16
 80016c0:	4574      	cmp	r4, lr
 80016c2:	d1f3      	bne.n	80016ac <Main_Setup+0xcc>
 80016c4:	4665      	mov	r5, ip
 80016c6:	4623      	mov	r3, r4
 80016c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80016ca:	6028      	str	r0, [r5, #0]
 80016cc:	6069      	str	r1, [r5, #4]
 80016ce:	60aa      	str	r2, [r5, #8]
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	2265      	movs	r2, #101	; 0x65
 80016d8:	4952      	ldr	r1, [pc, #328]	; (8001824 <Main_Setup+0x244>)
 80016da:	4855      	ldr	r0, [pc, #340]	; (8001830 <Main_Setup+0x250>)
 80016dc:	f006 fe54 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 80016e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80016e4:	f001 fff4 	bl	80036d0 <HAL_Delay>
    Check_Receiver_Inputs( 1 );			//	Move the throttle stick to full throttle and back to center within 10 seconds
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 ff7f 	bl	80025ec <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 80016ee:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <Main_Setup+0x244>)
 80016f0:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <Main_Setup+0x248>)
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	2365      	movs	r3, #101	; 0x65
 80016f8:	461a      	mov	r2, r3
 80016fa:	f007 fc2d 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nMove the roll stick to simulate left wing up within 10 seconds!\n");
 80016fe:	4a49      	ldr	r2, [pc, #292]	; (8001824 <Main_Setup+0x244>)
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <Main_Setup+0x27c>)
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	2342      	movs	r3, #66	; 0x42
 8001708:	461a      	mov	r2, r3
 800170a:	f007 fc25 	bl	8008f58 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	2265      	movs	r2, #101	; 0x65
 8001712:	4944      	ldr	r1, [pc, #272]	; (8001824 <Main_Setup+0x244>)
 8001714:	4846      	ldr	r0, [pc, #280]	; (8001830 <Main_Setup+0x250>)
 8001716:	f006 fe37 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 800171a:	f242 7010 	movw	r0, #10000	; 0x2710
 800171e:	f001 ffd7 	bl	80036d0 <HAL_Delay>
    Check_Receiver_Inputs( 2 );			//	Move the roll stick to simulate left wing up and back to center within 10 seconds
 8001722:	2002      	movs	r0, #2
 8001724:	f000 ff62 	bl	80025ec <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 8001728:	4a3e      	ldr	r2, [pc, #248]	; (8001824 <Main_Setup+0x244>)
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <Main_Setup+0x248>)
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	2365      	movs	r3, #101	; 0x65
 8001732:	461a      	mov	r2, r3
 8001734:	f007 fc10 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nMove the pitch stick to simulate nose up within 10 seconds!\n");
 8001738:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <Main_Setup+0x244>)
 800173a:	4a49      	ldr	r2, [pc, #292]	; (8001860 <Main_Setup+0x280>)
 800173c:	4614      	mov	r4, r2
 800173e:	469c      	mov	ip, r3
 8001740:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001744:	4665      	mov	r5, ip
 8001746:	4626      	mov	r6, r4
 8001748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800174a:	6028      	str	r0, [r5, #0]
 800174c:	6069      	str	r1, [r5, #4]
 800174e:	60aa      	str	r2, [r5, #8]
 8001750:	60eb      	str	r3, [r5, #12]
 8001752:	3410      	adds	r4, #16
 8001754:	f10c 0c10 	add.w	ip, ip, #16
 8001758:	4574      	cmp	r4, lr
 800175a:	d1f3      	bne.n	8001744 <Main_Setup+0x164>
 800175c:	4665      	mov	r5, ip
 800175e:	4623      	mov	r3, r4
 8001760:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001762:	6028      	str	r0, [r5, #0]
 8001764:	6069      	str	r1, [r5, #4]
 8001766:	60aa      	str	r2, [r5, #8]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	2265      	movs	r2, #101	; 0x65
 8001770:	492c      	ldr	r1, [pc, #176]	; (8001824 <Main_Setup+0x244>)
 8001772:	482f      	ldr	r0, [pc, #188]	; (8001830 <Main_Setup+0x250>)
 8001774:	f006 fe08 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001778:	f242 7010 	movw	r0, #10000	; 0x2710
 800177c:	f001 ffa8 	bl	80036d0 <HAL_Delay>
    Check_Receiver_Inputs( 3 );			//	Move the pitch stick to simulate left wing up and back to center within 10 seconds
 8001780:	2003      	movs	r0, #3
 8001782:	f000 ff33 	bl	80025ec <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 8001786:	4a27      	ldr	r2, [pc, #156]	; (8001824 <Main_Setup+0x244>)
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <Main_Setup+0x248>)
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	2365      	movs	r3, #101	; 0x65
 8001790:	461a      	mov	r2, r3
 8001792:	f007 fbe1 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nMove the yaw stick to simulate nose right within 10 seconds!\n");
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <Main_Setup+0x244>)
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <Main_Setup+0x284>)
 800179a:	4615      	mov	r5, r2
 800179c:	469c      	mov	ip, r3
 800179e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80017a2:	4664      	mov	r4, ip
 80017a4:	462e      	mov	r6, r5
 80017a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017a8:	6020      	str	r0, [r4, #0]
 80017aa:	6061      	str	r1, [r4, #4]
 80017ac:	60a2      	str	r2, [r4, #8]
 80017ae:	60e3      	str	r3, [r4, #12]
 80017b0:	3510      	adds	r5, #16
 80017b2:	f10c 0c10 	add.w	ip, ip, #16
 80017b6:	4575      	cmp	r5, lr
 80017b8:	d1f3      	bne.n	80017a2 <Main_Setup+0x1c2>
 80017ba:	4664      	mov	r4, ip
 80017bc:	462b      	mov	r3, r5
 80017be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017c0:	6020      	str	r0, [r4, #0]
 80017c2:	6061      	str	r1, [r4, #4]
 80017c4:	60a2      	str	r2, [r4, #8]
 80017c6:	881a      	ldrh	r2, [r3, #0]
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	81a2      	strh	r2, [r4, #12]
 80017cc:	73a3      	strb	r3, [r4, #14]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	2265      	movs	r2, #101	; 0x65
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <Main_Setup+0x244>)
 80017d4:	4816      	ldr	r0, [pc, #88]	; (8001830 <Main_Setup+0x250>)
 80017d6:	f006 fdd7 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 80017da:	f242 7010 	movw	r0, #10000	; 0x2710
 80017de:	f001 ff77 	bl	80036d0 <HAL_Delay>
    Check_Receiver_Inputs( 4 );			//	Move the yaw stick to simulate nose right and back to center within 10 seconds
 80017e2:	2004      	movs	r0, #4
 80017e4:	f000 ff02 	bl	80025ec <Check_Receiver_Inputs>


    sprintf(uartTX, "                                                                                                    ");
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <Main_Setup+0x244>)
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <Main_Setup+0x248>)
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	2365      	movs	r3, #101	; 0x65
 80017f2:	461a      	mov	r2, r3
 80017f4:	f007 fbb0 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nTaking multiple gyro data samples (calibration) during ~8 seconds!\n");
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <Main_Setup+0x244>)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <Main_Setup+0x288>)
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	2345      	movs	r3, #69	; 0x45
 8001802:	461a      	mov	r2, r3
 8001804:	f007 fba8 	bl	8008f58 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	2265      	movs	r2, #101	; 0x65
 800180c:	4905      	ldr	r1, [pc, #20]	; (8001824 <Main_Setup+0x244>)
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <Main_Setup+0x250>)
 8001810:	f006 fdba 	bl	8008388 <HAL_UART_Transmit>
    HAL_Delay( 5000 );
 8001814:	f241 3088 	movw	r0, #5000	; 0x1388
 8001818:	f001 ff5a 	bl	80036d0 <HAL_Delay>
	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <Main_Setup+0x28c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e04d      	b.n	80018c0 <Main_Setup+0x2e0>
 8001824:	200002a4 	.word	0x200002a4
 8001828:	08009038 	.word	0x08009038
 800182c:	080090a0 	.word	0x080090a0
 8001830:	200001f8 	.word	0x200001f8
 8001834:	2000038c 	.word	0x2000038c
 8001838:	2000035c 	.word	0x2000035c
 800183c:	20000380 	.word	0x20000380
 8001840:	20000328 	.word	0x20000328
 8001844:	2000009c 	.word	0x2000009c
 8001848:	2000034c 	.word	0x2000034c
 800184c:	20000388 	.word	0x20000388
 8001850:	20000314 	.word	0x20000314
 8001854:	080090dc 	.word	0x080090dc
 8001858:	0800912c 	.word	0x0800912c
 800185c:	0800916c 	.word	0x0800916c
 8001860:	080091b0 	.word	0x080091b0
 8001864:	080091f0 	.word	0x080091f0
 8001868:	08009230 	.word	0x08009230
 800186c:	2000002c 	.word	0x2000002c
	{              													//Take 2000 readings for calibration.
		Setup_Gyro_Signalen();                          	//Read the gyro output.
 8001870:	f000 fb9e 	bl	8001fb0 <Setup_Gyro_Signalen>

		gyro_roll_cal += gyro_roll;                               	//Ad roll value to gyro_roll_cal.
 8001874:	4baa      	ldr	r3, [pc, #680]	; (8001b20 <Main_Setup+0x540>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	4baa      	ldr	r3, [pc, #680]	; (8001b24 <Main_Setup+0x544>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	4ba6      	ldr	r3, [pc, #664]	; (8001b20 <Main_Setup+0x540>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch_cal += gyro_pitch;                              	//Ad pitch value to gyro_pitch_cal.
 800188a:	4ba7      	ldr	r3, [pc, #668]	; (8001b28 <Main_Setup+0x548>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	4ba6      	ldr	r3, [pc, #664]	; (8001b2c <Main_Setup+0x54c>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	4ba3      	ldr	r3, [pc, #652]	; (8001b28 <Main_Setup+0x548>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw_cal += gyro_yaw;                                  	//Ad yaw value to gyro_yaw_cal.
 80018a0:	4ba3      	ldr	r3, [pc, #652]	; (8001b30 <Main_Setup+0x550>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4ba3      	ldr	r3, [pc, #652]	; (8001b34 <Main_Setup+0x554>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	4b9f      	ldr	r3, [pc, #636]	; (8001b30 <Main_Setup+0x550>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 80018b6:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <Main_Setup+0x558>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a9e      	ldr	r2, [pc, #632]	; (8001b38 <Main_Setup+0x558>)
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <Main_Setup+0x558>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c8:	dbd2      	blt.n	8001870 <Main_Setup+0x290>
	}

	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_roll_cal /= 2000;                                       //Divide the roll total by 2000.
 80018ca:	4b95      	ldr	r3, [pc, #596]	; (8001b20 <Main_Setup+0x540>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8001b3c <Main_Setup+0x55c>
 80018d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d8:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <Main_Setup+0x540>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch_cal /= 2000;                                      //Divide the pitch total by 2000.
 80018de:	4b92      	ldr	r3, [pc, #584]	; (8001b28 <Main_Setup+0x548>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001b3c <Main_Setup+0x55c>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <Main_Setup+0x548>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw_cal /= 2000;                                        //Divide the yaw total by 2000.
 80018f2:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <Main_Setup+0x550>)
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8001b3c <Main_Setup+0x55c>
 80018fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001900:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <Main_Setup+0x550>)
 8001902:	edc3 7a00 	vstr	s15, [r3]


    sprintf(uartTX, "                                                                                                    ");
 8001906:	4a8e      	ldr	r2, [pc, #568]	; (8001b40 <Main_Setup+0x560>)
 8001908:	4b8e      	ldr	r3, [pc, #568]	; (8001b44 <Main_Setup+0x564>)
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	2365      	movs	r3, #101	; 0x65
 8001910:	461a      	mov	r2, r3
 8001912:	f007 fb21 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nLift the left side of the quadcopter to a 45 degree angle within 5 seconds!\n");
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <Main_Setup+0x560>)
 8001918:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <Main_Setup+0x568>)
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	234e      	movs	r3, #78	; 0x4e
 8001920:	461a      	mov	r2, r3
 8001922:	f007 fb19 	bl	8008f58 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001926:	2364      	movs	r3, #100	; 0x64
 8001928:	2265      	movs	r2, #101	; 0x65
 800192a:	4985      	ldr	r1, [pc, #532]	; (8001b40 <Main_Setup+0x560>)
 800192c:	4887      	ldr	r0, [pc, #540]	; (8001b4c <Main_Setup+0x56c>)
 800192e:	f006 fd2b 	bl	8008388 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 8001932:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001936:	f001 fecb 	bl	80036d0 <HAL_Delay>
	Check_Gyro_Axes( 1 );		//	Lift the left side of the quadcopter to a 45 degree angle within 10 seconds
 800193a:	2001      	movs	r0, #1
 800193c:	f000 fb98 	bl	8002070 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 8001940:	4a7f      	ldr	r2, [pc, #508]	; (8001b40 <Main_Setup+0x560>)
 8001942:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <Main_Setup+0x564>)
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	2365      	movs	r3, #101	; 0x65
 800194a:	461a      	mov	r2, r3
 800194c:	f007 fb04 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nLift the nose of the quadcopter to a 45 degree angle within 5 seconds!\n");
 8001950:	4a7b      	ldr	r2, [pc, #492]	; (8001b40 <Main_Setup+0x560>)
 8001952:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <Main_Setup+0x570>)
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	2349      	movs	r3, #73	; 0x49
 800195a:	461a      	mov	r2, r3
 800195c:	f007 fafc 	bl	8008f58 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	2265      	movs	r2, #101	; 0x65
 8001964:	4976      	ldr	r1, [pc, #472]	; (8001b40 <Main_Setup+0x560>)
 8001966:	4879      	ldr	r0, [pc, #484]	; (8001b4c <Main_Setup+0x56c>)
 8001968:	f006 fd0e 	bl	8008388 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 800196c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001970:	f001 feae 	bl	80036d0 <HAL_Delay>
	Check_Gyro_Axes( 2 );		//	Lift the nose of the quadcopter to a 45 degree angle within 10 seconds
 8001974:	2002      	movs	r0, #2
 8001976:	f000 fb7b 	bl	8002070 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 800197a:	4a71      	ldr	r2, [pc, #452]	; (8001b40 <Main_Setup+0x560>)
 800197c:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <Main_Setup+0x564>)
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	2365      	movs	r3, #101	; 0x65
 8001984:	461a      	mov	r2, r3
 8001986:	f007 fae7 	bl	8008f58 <memcpy>
    sprintf(uartTX, "\nRotate the nose of the quadcopter 45 degree to the right within 5 seconds!\n");
 800198a:	4a6d      	ldr	r2, [pc, #436]	; (8001b40 <Main_Setup+0x560>)
 800198c:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <Main_Setup+0x574>)
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	234d      	movs	r3, #77	; 0x4d
 8001994:	461a      	mov	r2, r3
 8001996:	f007 fadf 	bl	8008f58 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	2265      	movs	r2, #101	; 0x65
 800199e:	4968      	ldr	r1, [pc, #416]	; (8001b40 <Main_Setup+0x560>)
 80019a0:	486a      	ldr	r0, [pc, #424]	; (8001b4c <Main_Setup+0x56c>)
 80019a2:	f006 fcf1 	bl	8008388 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 80019a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019aa:	f001 fe91 	bl	80036d0 <HAL_Delay>
	Check_Gyro_Axes( 3 );		//	Rotate the nose of the quadcopter 45 degree to the right within 10 seconds
 80019ae:	2003      	movs	r0, #3
 80019b0:	f000 fb5e 	bl	8002070 <Check_Gyro_Axes>

    eeprom_data[0]  = center_channel_1 & 0b11111111;
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <Main_Setup+0x578>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <Main_Setup+0x57c>)
 80019bc:	701a      	strb	r2, [r3, #0]
    eeprom_data[1]  = center_channel_1 >> 8;
 80019be:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <Main_Setup+0x578>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	121b      	asrs	r3, r3, #8
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <Main_Setup+0x57c>)
 80019c8:	705a      	strb	r2, [r3, #1]
    eeprom_data[2]  = center_channel_2 & 0b11111111;
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <Main_Setup+0x580>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b62      	ldr	r3, [pc, #392]	; (8001b5c <Main_Setup+0x57c>)
 80019d2:	709a      	strb	r2, [r3, #2]
    eeprom_data[3]  = center_channel_2 >> 8;
 80019d4:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <Main_Setup+0x580>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	121b      	asrs	r3, r3, #8
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <Main_Setup+0x57c>)
 80019de:	70da      	strb	r2, [r3, #3]
    eeprom_data[4]  = center_channel_3 & 0b11111111;
 80019e0:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <Main_Setup+0x584>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <Main_Setup+0x57c>)
 80019e8:	711a      	strb	r2, [r3, #4]
    eeprom_data[5]  = center_channel_3 >> 8;
 80019ea:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <Main_Setup+0x584>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	121b      	asrs	r3, r3, #8
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <Main_Setup+0x57c>)
 80019f4:	715a      	strb	r2, [r3, #5]
    eeprom_data[6]  = center_channel_4 & 0b11111111;
 80019f6:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <Main_Setup+0x588>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <Main_Setup+0x57c>)
 80019fe:	719a      	strb	r2, [r3, #6]
    eeprom_data[7]  = center_channel_4 >> 8;
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <Main_Setup+0x588>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	121b      	asrs	r3, r3, #8
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b54      	ldr	r3, [pc, #336]	; (8001b5c <Main_Setup+0x57c>)
 8001a0a:	71da      	strb	r2, [r3, #7]
    eeprom_data[8]  = high_channel_1 & 0b11111111;
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <Main_Setup+0x58c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <Main_Setup+0x57c>)
 8001a14:	721a      	strb	r2, [r3, #8]
    eeprom_data[9]  = high_channel_1 >> 8;
 8001a16:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <Main_Setup+0x58c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	121b      	asrs	r3, r3, #8
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <Main_Setup+0x57c>)
 8001a20:	725a      	strb	r2, [r3, #9]
    eeprom_data[10] = high_channel_2 & 0b11111111;
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <Main_Setup+0x590>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <Main_Setup+0x57c>)
 8001a2a:	729a      	strb	r2, [r3, #10]
    eeprom_data[11] = high_channel_2 >> 8;
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <Main_Setup+0x590>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	121b      	asrs	r3, r3, #8
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <Main_Setup+0x57c>)
 8001a36:	72da      	strb	r2, [r3, #11]
    eeprom_data[12] = high_channel_3 & 0b11111111;
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <Main_Setup+0x594>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <Main_Setup+0x57c>)
 8001a40:	731a      	strb	r2, [r3, #12]
    eeprom_data[13] = high_channel_3 >> 8;
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <Main_Setup+0x594>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	121b      	asrs	r3, r3, #8
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <Main_Setup+0x57c>)
 8001a4c:	735a      	strb	r2, [r3, #13]
    eeprom_data[14] = high_channel_4 & 0b11111111;
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <Main_Setup+0x598>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <Main_Setup+0x57c>)
 8001a56:	739a      	strb	r2, [r3, #14]
    eeprom_data[15] = high_channel_4 >> 8;
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <Main_Setup+0x598>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	121b      	asrs	r3, r3, #8
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <Main_Setup+0x57c>)
 8001a62:	73da      	strb	r2, [r3, #15]
    eeprom_data[16] = low_channel_1 & 0b11111111;
 8001a64:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <Main_Setup+0x59c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <Main_Setup+0x57c>)
 8001a6c:	741a      	strb	r2, [r3, #16]
    eeprom_data[17] = low_channel_1 >> 8;
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <Main_Setup+0x59c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	121b      	asrs	r3, r3, #8
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <Main_Setup+0x57c>)
 8001a78:	745a      	strb	r2, [r3, #17]
    eeprom_data[18] = low_channel_2 & 0b11111111;
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <Main_Setup+0x5a0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <Main_Setup+0x57c>)
 8001a82:	749a      	strb	r2, [r3, #18]
    eeprom_data[19] = low_channel_2 >> 8;
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <Main_Setup+0x5a0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	121b      	asrs	r3, r3, #8
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <Main_Setup+0x57c>)
 8001a8e:	74da      	strb	r2, [r3, #19]
    eeprom_data[20] = low_channel_3 & 0b11111111;
 8001a90:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <Main_Setup+0x5a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <Main_Setup+0x57c>)
 8001a98:	751a      	strb	r2, [r3, #20]
    eeprom_data[21] = low_channel_3 >> 8;
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <Main_Setup+0x5a4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	121b      	asrs	r3, r3, #8
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <Main_Setup+0x57c>)
 8001aa4:	755a      	strb	r2, [r3, #21]
    eeprom_data[22] = low_channel_4 & 0b11111111;
 8001aa6:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <Main_Setup+0x5a8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <Main_Setup+0x57c>)
 8001aae:	759a      	strb	r2, [r3, #22]
    eeprom_data[23] = low_channel_4 >> 8;
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <Main_Setup+0x5a8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	121b      	asrs	r3, r3, #8
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <Main_Setup+0x57c>)
 8001aba:	75da      	strb	r2, [r3, #23]
    eeprom_data[24] = channel_1_assign;
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <Main_Setup+0x5ac>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <Main_Setup+0x57c>)
 8001ac2:	761a      	strb	r2, [r3, #24]
    eeprom_data[25] = channel_2_assign;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <Main_Setup+0x5b0>)
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <Main_Setup+0x57c>)
 8001aca:	765a      	strb	r2, [r3, #25]
    eeprom_data[26] = channel_3_assign;
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <Main_Setup+0x5b4>)
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <Main_Setup+0x57c>)
 8001ad2:	769a      	strb	r2, [r3, #26]
    eeprom_data[27] = channel_4_assign;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <Main_Setup+0x5b8>)
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <Main_Setup+0x57c>)
 8001ada:	76da      	strb	r2, [r3, #27]
    eeprom_data[28] = roll_axis;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <Main_Setup+0x5bc>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <Main_Setup+0x57c>)
 8001ae2:	771a      	strb	r2, [r3, #28]
    eeprom_data[29] = pitch_axis;
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <Main_Setup+0x5c0>)
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <Main_Setup+0x57c>)
 8001aea:	775a      	strb	r2, [r3, #29]
    eeprom_data[30] = yaw_axis;
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <Main_Setup+0x5c4>)
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <Main_Setup+0x57c>)
 8001af2:	779a      	strb	r2, [r3, #30]
	eeprom_data[31] = 92;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <Main_Setup+0x57c>)
 8001af6:	225c      	movs	r2, #92	; 0x5c
 8001af8:	77da      	strb	r2, [r3, #31]


	if( eeprom_data[31] == 92 && eeprom_data[28] == 1 && eeprom_data[29] == 130 && eeprom_data[30] == 131 )
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <Main_Setup+0x57c>)
 8001afc:	7fdb      	ldrb	r3, [r3, #31]
 8001afe:	2b5c      	cmp	r3, #92	; 0x5c
 8001b00:	f040 8246 	bne.w	8001f90 <Main_Setup+0x9b0>
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <Main_Setup+0x57c>)
 8001b06:	7f1b      	ldrb	r3, [r3, #28]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f040 8241 	bne.w	8001f90 <Main_Setup+0x9b0>
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <Main_Setup+0x57c>)
 8001b10:	7f5b      	ldrb	r3, [r3, #29]
 8001b12:	2b82      	cmp	r3, #130	; 0x82
 8001b14:	f040 823c 	bne.w	8001f90 <Main_Setup+0x9b0>
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <Main_Setup+0x57c>)
 8001b1a:	7f9b      	ldrb	r3, [r3, #30]
 8001b1c:	2b83      	cmp	r3, #131	; 0x83
 8001b1e:	e043      	b.n	8001ba8 <Main_Setup+0x5c8>
 8001b20:	2000030c 	.word	0x2000030c
 8001b24:	20000390 	.word	0x20000390
 8001b28:	20000338 	.word	0x20000338
 8001b2c:	20000370 	.word	0x20000370
 8001b30:	20000318 	.word	0x20000318
 8001b34:	20000378 	.word	0x20000378
 8001b38:	2000002c 	.word	0x2000002c
 8001b3c:	44fa0000 	.word	0x44fa0000
 8001b40:	200002a4 	.word	0x200002a4
 8001b44:	08009038 	.word	0x08009038
 8001b48:	08009278 	.word	0x08009278
 8001b4c:	200001f8 	.word	0x200001f8
 8001b50:	080092c8 	.word	0x080092c8
 8001b54:	08009314 	.word	0x08009314
 8001b58:	2000035c 	.word	0x2000035c
 8001b5c:	2000005c 	.word	0x2000005c
 8001b60:	20000328 	.word	0x20000328
 8001b64:	2000034c 	.word	0x2000034c
 8001b68:	20000314 	.word	0x20000314
 8001b6c:	2000032c 	.word	0x2000032c
 8001b70:	20000364 	.word	0x20000364
 8001b74:	20000340 	.word	0x20000340
 8001b78:	20000354 	.word	0x20000354
 8001b7c:	20000348 	.word	0x20000348
 8001b80:	20000330 	.word	0x20000330
 8001b84:	20000310 	.word	0x20000310
 8001b88:	20000358 	.word	0x20000358
 8001b8c:	20000351 	.word	0x20000351
 8001b90:	20000335 	.word	0x20000335
 8001b94:	20000344 	.word	0x20000344
 8001b98:	20000350 	.word	0x20000350
 8001b9c:	20000361 	.word	0x20000361
 8001ba0:	20000360 	.word	0x20000360
 8001ba4:	20000334 	.word	0x20000334
 8001ba8:	f040 81f2 	bne.w	8001f90 <Main_Setup+0x9b0>
	{
	    sprintf(uartTX, "                                                                                                    ");
 8001bac:	4aa9      	ldr	r2, [pc, #676]	; (8001e54 <Main_Setup+0x874>)
 8001bae:	4baa      	ldr	r3, [pc, #680]	; (8001e58 <Main_Setup+0x878>)
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2365      	movs	r3, #101	; 0x65
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f007 f9ce 	bl	8008f58 <memcpy>
	    sprintf(uartTX, "\nValues look good! Saving data to the flash.....!\n");
 8001bbc:	4ba5      	ldr	r3, [pc, #660]	; (8001e54 <Main_Setup+0x874>)
 8001bbe:	4aa7      	ldr	r2, [pc, #668]	; (8001e5c <Main_Setup+0x87c>)
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	469c      	mov	ip, r3
 8001bc4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001bc8:	4665      	mov	r5, ip
 8001bca:	4626      	mov	r6, r4
 8001bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bce:	6028      	str	r0, [r5, #0]
 8001bd0:	6069      	str	r1, [r5, #4]
 8001bd2:	60aa      	str	r2, [r5, #8]
 8001bd4:	60eb      	str	r3, [r5, #12]
 8001bd6:	3410      	adds	r4, #16
 8001bd8:	f10c 0c10 	add.w	ip, ip, #16
 8001bdc:	4574      	cmp	r4, lr
 8001bde:	d1f3      	bne.n	8001bc8 <Main_Setup+0x5e8>
 8001be0:	4663      	mov	r3, ip
 8001be2:	4622      	mov	r2, r4
 8001be4:	8811      	ldrh	r1, [r2, #0]
 8001be6:	7892      	ldrb	r2, [r2, #2]
 8001be8:	8019      	strh	r1, [r3, #0]
 8001bea:	709a      	strb	r2, [r3, #2]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001bec:	2364      	movs	r3, #100	; 0x64
 8001bee:	2265      	movs	r2, #101	; 0x65
 8001bf0:	4998      	ldr	r1, [pc, #608]	; (8001e54 <Main_Setup+0x874>)
 8001bf2:	489b      	ldr	r0, [pc, #620]	; (8001e60 <Main_Setup+0x880>)
 8001bf4:	f006 fbc8 	bl	8008388 <HAL_UART_Transmit>


		Flash_ErasePage( 0x0803F800 );
 8001bf8:	489a      	ldr	r0, [pc, #616]	; (8001e64 <Main_Setup+0x884>)
 8001bfa:	f7fe ffb5 	bl	8000b68 <Flash_ErasePage>
																				// EEPROM Array to Flash
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  0, &eeprom_data[0]);
 8001bfe:	4b9a      	ldr	r3, [pc, #616]	; (8001e68 <Main_Setup+0x888>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	4998      	ldr	r1, [pc, #608]	; (8001e64 <Main_Setup+0x884>)
 8001c04:	207f      	movs	r0, #127	; 0x7f
 8001c06:	f7fe ffbe 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  1, &eeprom_data[1]);
 8001c0a:	4b98      	ldr	r3, [pc, #608]	; (8001e6c <Main_Setup+0x88c>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4995      	ldr	r1, [pc, #596]	; (8001e64 <Main_Setup+0x884>)
 8001c10:	207f      	movs	r0, #127	; 0x7f
 8001c12:	f7fe ffb8 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  2, &eeprom_data[2]);
 8001c16:	4b96      	ldr	r3, [pc, #600]	; (8001e70 <Main_Setup+0x890>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4992      	ldr	r1, [pc, #584]	; (8001e64 <Main_Setup+0x884>)
 8001c1c:	207f      	movs	r0, #127	; 0x7f
 8001c1e:	f7fe ffb2 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  3, &eeprom_data[3]);
 8001c22:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <Main_Setup+0x894>)
 8001c24:	2203      	movs	r2, #3
 8001c26:	498f      	ldr	r1, [pc, #572]	; (8001e64 <Main_Setup+0x884>)
 8001c28:	207f      	movs	r0, #127	; 0x7f
 8001c2a:	f7fe ffac 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  4, &eeprom_data[4]);
 8001c2e:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <Main_Setup+0x898>)
 8001c30:	2204      	movs	r2, #4
 8001c32:	498c      	ldr	r1, [pc, #560]	; (8001e64 <Main_Setup+0x884>)
 8001c34:	207f      	movs	r0, #127	; 0x7f
 8001c36:	f7fe ffa6 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  5, &eeprom_data[5]);
 8001c3a:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <Main_Setup+0x89c>)
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	4989      	ldr	r1, [pc, #548]	; (8001e64 <Main_Setup+0x884>)
 8001c40:	207f      	movs	r0, #127	; 0x7f
 8001c42:	f7fe ffa0 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  6, &eeprom_data[6]);
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <Main_Setup+0x8a0>)
 8001c48:	2206      	movs	r2, #6
 8001c4a:	4986      	ldr	r1, [pc, #536]	; (8001e64 <Main_Setup+0x884>)
 8001c4c:	207f      	movs	r0, #127	; 0x7f
 8001c4e:	f7fe ff9a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  7, &eeprom_data[7]);
 8001c52:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <Main_Setup+0x8a4>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	4983      	ldr	r1, [pc, #524]	; (8001e64 <Main_Setup+0x884>)
 8001c58:	207f      	movs	r0, #127	; 0x7f
 8001c5a:	f7fe ff94 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  8, &eeprom_data[8]);
 8001c5e:	4b8a      	ldr	r3, [pc, #552]	; (8001e88 <Main_Setup+0x8a8>)
 8001c60:	2208      	movs	r2, #8
 8001c62:	4980      	ldr	r1, [pc, #512]	; (8001e64 <Main_Setup+0x884>)
 8001c64:	207f      	movs	r0, #127	; 0x7f
 8001c66:	f7fe ff8e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  9, &eeprom_data[9]);
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <Main_Setup+0x8ac>)
 8001c6c:	2209      	movs	r2, #9
 8001c6e:	497d      	ldr	r1, [pc, #500]	; (8001e64 <Main_Setup+0x884>)
 8001c70:	207f      	movs	r0, #127	; 0x7f
 8001c72:	f7fe ff88 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 10, &eeprom_data[10]);
 8001c76:	4b86      	ldr	r3, [pc, #536]	; (8001e90 <Main_Setup+0x8b0>)
 8001c78:	220a      	movs	r2, #10
 8001c7a:	497a      	ldr	r1, [pc, #488]	; (8001e64 <Main_Setup+0x884>)
 8001c7c:	207f      	movs	r0, #127	; 0x7f
 8001c7e:	f7fe ff82 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 11, &eeprom_data[11]);
 8001c82:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <Main_Setup+0x8b4>)
 8001c84:	220b      	movs	r2, #11
 8001c86:	4977      	ldr	r1, [pc, #476]	; (8001e64 <Main_Setup+0x884>)
 8001c88:	207f      	movs	r0, #127	; 0x7f
 8001c8a:	f7fe ff7c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 12, &eeprom_data[12]);
 8001c8e:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <Main_Setup+0x8b8>)
 8001c90:	220c      	movs	r2, #12
 8001c92:	4974      	ldr	r1, [pc, #464]	; (8001e64 <Main_Setup+0x884>)
 8001c94:	207f      	movs	r0, #127	; 0x7f
 8001c96:	f7fe ff76 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 13, &eeprom_data[13]);
 8001c9a:	4b80      	ldr	r3, [pc, #512]	; (8001e9c <Main_Setup+0x8bc>)
 8001c9c:	220d      	movs	r2, #13
 8001c9e:	4971      	ldr	r1, [pc, #452]	; (8001e64 <Main_Setup+0x884>)
 8001ca0:	207f      	movs	r0, #127	; 0x7f
 8001ca2:	f7fe ff70 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 14, &eeprom_data[14]);
 8001ca6:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <Main_Setup+0x8c0>)
 8001ca8:	220e      	movs	r2, #14
 8001caa:	496e      	ldr	r1, [pc, #440]	; (8001e64 <Main_Setup+0x884>)
 8001cac:	207f      	movs	r0, #127	; 0x7f
 8001cae:	f7fe ff6a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 15, &eeprom_data[15]);
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <Main_Setup+0x8c4>)
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	496b      	ldr	r1, [pc, #428]	; (8001e64 <Main_Setup+0x884>)
 8001cb8:	207f      	movs	r0, #127	; 0x7f
 8001cba:	f7fe ff64 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 16, &eeprom_data[16]);
 8001cbe:	4b7a      	ldr	r3, [pc, #488]	; (8001ea8 <Main_Setup+0x8c8>)
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4968      	ldr	r1, [pc, #416]	; (8001e64 <Main_Setup+0x884>)
 8001cc4:	207f      	movs	r0, #127	; 0x7f
 8001cc6:	f7fe ff5e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 17, &eeprom_data[17]);
 8001cca:	4b78      	ldr	r3, [pc, #480]	; (8001eac <Main_Setup+0x8cc>)
 8001ccc:	2211      	movs	r2, #17
 8001cce:	4965      	ldr	r1, [pc, #404]	; (8001e64 <Main_Setup+0x884>)
 8001cd0:	207f      	movs	r0, #127	; 0x7f
 8001cd2:	f7fe ff58 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 18, &eeprom_data[18]);
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <Main_Setup+0x8d0>)
 8001cd8:	2212      	movs	r2, #18
 8001cda:	4962      	ldr	r1, [pc, #392]	; (8001e64 <Main_Setup+0x884>)
 8001cdc:	207f      	movs	r0, #127	; 0x7f
 8001cde:	f7fe ff52 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 19, &eeprom_data[19]);
 8001ce2:	4b74      	ldr	r3, [pc, #464]	; (8001eb4 <Main_Setup+0x8d4>)
 8001ce4:	2213      	movs	r2, #19
 8001ce6:	495f      	ldr	r1, [pc, #380]	; (8001e64 <Main_Setup+0x884>)
 8001ce8:	207f      	movs	r0, #127	; 0x7f
 8001cea:	f7fe ff4c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 20, &eeprom_data[20]);
 8001cee:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <Main_Setup+0x8d8>)
 8001cf0:	2214      	movs	r2, #20
 8001cf2:	495c      	ldr	r1, [pc, #368]	; (8001e64 <Main_Setup+0x884>)
 8001cf4:	207f      	movs	r0, #127	; 0x7f
 8001cf6:	f7fe ff46 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 21, &eeprom_data[21]);
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <Main_Setup+0x8dc>)
 8001cfc:	2215      	movs	r2, #21
 8001cfe:	4959      	ldr	r1, [pc, #356]	; (8001e64 <Main_Setup+0x884>)
 8001d00:	207f      	movs	r0, #127	; 0x7f
 8001d02:	f7fe ff40 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 22, &eeprom_data[22]);
 8001d06:	4b6e      	ldr	r3, [pc, #440]	; (8001ec0 <Main_Setup+0x8e0>)
 8001d08:	2216      	movs	r2, #22
 8001d0a:	4956      	ldr	r1, [pc, #344]	; (8001e64 <Main_Setup+0x884>)
 8001d0c:	207f      	movs	r0, #127	; 0x7f
 8001d0e:	f7fe ff3a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 23, &eeprom_data[23]);
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <Main_Setup+0x8e4>)
 8001d14:	2217      	movs	r2, #23
 8001d16:	4953      	ldr	r1, [pc, #332]	; (8001e64 <Main_Setup+0x884>)
 8001d18:	207f      	movs	r0, #127	; 0x7f
 8001d1a:	f7fe ff34 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 24, &eeprom_data[24]);
 8001d1e:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <Main_Setup+0x8e8>)
 8001d20:	2218      	movs	r2, #24
 8001d22:	4950      	ldr	r1, [pc, #320]	; (8001e64 <Main_Setup+0x884>)
 8001d24:	207f      	movs	r0, #127	; 0x7f
 8001d26:	f7fe ff2e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 25, &eeprom_data[25]);
 8001d2a:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <Main_Setup+0x8ec>)
 8001d2c:	2219      	movs	r2, #25
 8001d2e:	494d      	ldr	r1, [pc, #308]	; (8001e64 <Main_Setup+0x884>)
 8001d30:	207f      	movs	r0, #127	; 0x7f
 8001d32:	f7fe ff28 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 26, &eeprom_data[26]);
 8001d36:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <Main_Setup+0x8f0>)
 8001d38:	221a      	movs	r2, #26
 8001d3a:	494a      	ldr	r1, [pc, #296]	; (8001e64 <Main_Setup+0x884>)
 8001d3c:	207f      	movs	r0, #127	; 0x7f
 8001d3e:	f7fe ff22 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 27, &eeprom_data[27]);
 8001d42:	4b64      	ldr	r3, [pc, #400]	; (8001ed4 <Main_Setup+0x8f4>)
 8001d44:	221b      	movs	r2, #27
 8001d46:	4947      	ldr	r1, [pc, #284]	; (8001e64 <Main_Setup+0x884>)
 8001d48:	207f      	movs	r0, #127	; 0x7f
 8001d4a:	f7fe ff1c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 28, &eeprom_data[28]);
 8001d4e:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <Main_Setup+0x8f8>)
 8001d50:	221c      	movs	r2, #28
 8001d52:	4944      	ldr	r1, [pc, #272]	; (8001e64 <Main_Setup+0x884>)
 8001d54:	207f      	movs	r0, #127	; 0x7f
 8001d56:	f7fe ff16 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 29, &eeprom_data[29]);
 8001d5a:	4b60      	ldr	r3, [pc, #384]	; (8001edc <Main_Setup+0x8fc>)
 8001d5c:	221d      	movs	r2, #29
 8001d5e:	4941      	ldr	r1, [pc, #260]	; (8001e64 <Main_Setup+0x884>)
 8001d60:	207f      	movs	r0, #127	; 0x7f
 8001d62:	f7fe ff10 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 30, &eeprom_data[30]);
 8001d66:	4b5e      	ldr	r3, [pc, #376]	; (8001ee0 <Main_Setup+0x900>)
 8001d68:	221e      	movs	r2, #30
 8001d6a:	493e      	ldr	r1, [pc, #248]	; (8001e64 <Main_Setup+0x884>)
 8001d6c:	207f      	movs	r0, #127	; 0x7f
 8001d6e:	f7fe ff0a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 31, &eeprom_data[31]);
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <Main_Setup+0x904>)
 8001d74:	221f      	movs	r2, #31
 8001d76:	493b      	ldr	r1, [pc, #236]	; (8001e64 <Main_Setup+0x884>)
 8001d78:	207f      	movs	r0, #127	; 0x7f
 8001d7a:	f7fe ff04 	bl	8000b86 <Flash_EEPROM_Data_Write>


		Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data_test[0]);
 8001d7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ee8 <Main_Setup+0x908>)
 8001d80:	221f      	movs	r2, #31
 8001d82:	4938      	ldr	r1, [pc, #224]	; (8001e64 <Main_Setup+0x884>)
 8001d84:	207f      	movs	r0, #127	; 0x7f
 8001d86:	f7fe ff2a 	bl	8000bde <Flash_EEPROM_Data_Read>

		if( eeprom_data_test[0] == 92 && eeprom_data[28] == 1 && eeprom_data[29] == 130 && eeprom_data[30] == 131 )
 8001d8a:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <Main_Setup+0x908>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b5c      	cmp	r3, #92	; 0x5c
 8001d90:	d122      	bne.n	8001dd8 <Main_Setup+0x7f8>
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <Main_Setup+0x888>)
 8001d94:	7f1b      	ldrb	r3, [r3, #28]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d11e      	bne.n	8001dd8 <Main_Setup+0x7f8>
 8001d9a:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <Main_Setup+0x888>)
 8001d9c:	7f5b      	ldrb	r3, [r3, #29]
 8001d9e:	2b82      	cmp	r3, #130	; 0x82
 8001da0:	d11a      	bne.n	8001dd8 <Main_Setup+0x7f8>
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <Main_Setup+0x888>)
 8001da4:	7f9b      	ldrb	r3, [r3, #30]
 8001da6:	2b83      	cmp	r3, #131	; 0x83
 8001da8:	d116      	bne.n	8001dd8 <Main_Setup+0x7f8>
		{
			sprintf(uartTX, "                                                                                                    ");
 8001daa:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <Main_Setup+0x874>)
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <Main_Setup+0x878>)
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	2365      	movs	r3, #101	; 0x65
 8001db4:	461a      	mov	r2, r3
 8001db6:	f007 f8cf 	bl	8008f58 <memcpy>
			sprintf(uartTX, "\nSetup is done! Everything is looks OKAY! All data is saved to the flash! Reset!\n");
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <Main_Setup+0x874>)
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <Main_Setup+0x90c>)
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2352      	movs	r3, #82	; 0x52
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f007 f8c7 	bl	8008f58 <memcpy>
			HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	2265      	movs	r2, #101	; 0x65
 8001dce:	4921      	ldr	r1, [pc, #132]	; (8001e54 <Main_Setup+0x874>)
 8001dd0:	4823      	ldr	r0, [pc, #140]	; (8001e60 <Main_Setup+0x880>)
 8001dd2:	f006 fad9 	bl	8008388 <HAL_UART_Transmit>
 8001dd6:	e0db      	b.n	8001f90 <Main_Setup+0x9b0>
		}
		else if( eeprom_data_test[0] == 92 && eeprom_data[28] != 1 && eeprom_data[29] != 130 && eeprom_data[30] != 131 )
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <Main_Setup+0x908>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8001dde:	f040 8089 	bne.w	8001ef4 <Main_Setup+0x914>
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <Main_Setup+0x888>)
 8001de4:	7f1b      	ldrb	r3, [r3, #28]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	f000 8084 	beq.w	8001ef4 <Main_Setup+0x914>
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <Main_Setup+0x888>)
 8001dee:	7f5b      	ldrb	r3, [r3, #29]
 8001df0:	2b82      	cmp	r3, #130	; 0x82
 8001df2:	d07f      	beq.n	8001ef4 <Main_Setup+0x914>
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <Main_Setup+0x888>)
 8001df6:	7f9b      	ldrb	r3, [r3, #30]
 8001df8:	2b83      	cmp	r3, #131	; 0x83
 8001dfa:	d07b      	beq.n	8001ef4 <Main_Setup+0x914>
		{
		    sprintf(uartTX, "                                                                                                    ");
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <Main_Setup+0x874>)
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <Main_Setup+0x878>)
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	2365      	movs	r3, #101	; 0x65
 8001e06:	461a      	mov	r2, r3
 8001e08:	f007 f8a6 	bl	8008f58 <memcpy>
		    sprintf(uartTX, "\nSetup is NOT done! Gyro axises are useless! Re-do the setup!\n");
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <Main_Setup+0x874>)
 8001e0e:	4a38      	ldr	r2, [pc, #224]	; (8001ef0 <Main_Setup+0x910>)
 8001e10:	4615      	mov	r5, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001e18:	4664      	mov	r4, ip
 8001e1a:	462e      	mov	r6, r5
 8001e1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e1e:	6020      	str	r0, [r4, #0]
 8001e20:	6061      	str	r1, [r4, #4]
 8001e22:	60a2      	str	r2, [r4, #8]
 8001e24:	60e3      	str	r3, [r4, #12]
 8001e26:	3510      	adds	r5, #16
 8001e28:	f10c 0c10 	add.w	ip, ip, #16
 8001e2c:	4575      	cmp	r5, lr
 8001e2e:	d1f3      	bne.n	8001e18 <Main_Setup+0x838>
 8001e30:	4664      	mov	r4, ip
 8001e32:	462b      	mov	r3, r5
 8001e34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e36:	6020      	str	r0, [r4, #0]
 8001e38:	6061      	str	r1, [r4, #4]
 8001e3a:	60a2      	str	r2, [r4, #8]
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	789b      	ldrb	r3, [r3, #2]
 8001e40:	81a2      	strh	r2, [r4, #12]
 8001e42:	73a3      	strb	r3, [r4, #14]
		    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e44:	2364      	movs	r3, #100	; 0x64
 8001e46:	2265      	movs	r2, #101	; 0x65
 8001e48:	4902      	ldr	r1, [pc, #8]	; (8001e54 <Main_Setup+0x874>)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <Main_Setup+0x880>)
 8001e4c:	f006 fa9c 	bl	8008388 <HAL_UART_Transmit>
 8001e50:	e09e      	b.n	8001f90 <Main_Setup+0x9b0>
 8001e52:	bf00      	nop
 8001e54:	200002a4 	.word	0x200002a4
 8001e58:	08009038 	.word	0x08009038
 8001e5c:	08009364 	.word	0x08009364
 8001e60:	200001f8 	.word	0x200001f8
 8001e64:	0803f800 	.word	0x0803f800
 8001e68:	2000005c 	.word	0x2000005c
 8001e6c:	2000005d 	.word	0x2000005d
 8001e70:	2000005e 	.word	0x2000005e
 8001e74:	2000005f 	.word	0x2000005f
 8001e78:	20000060 	.word	0x20000060
 8001e7c:	20000061 	.word	0x20000061
 8001e80:	20000062 	.word	0x20000062
 8001e84:	20000063 	.word	0x20000063
 8001e88:	20000064 	.word	0x20000064
 8001e8c:	20000065 	.word	0x20000065
 8001e90:	20000066 	.word	0x20000066
 8001e94:	20000067 	.word	0x20000067
 8001e98:	20000068 	.word	0x20000068
 8001e9c:	20000069 	.word	0x20000069
 8001ea0:	2000006a 	.word	0x2000006a
 8001ea4:	2000006b 	.word	0x2000006b
 8001ea8:	2000006c 	.word	0x2000006c
 8001eac:	2000006d 	.word	0x2000006d
 8001eb0:	2000006e 	.word	0x2000006e
 8001eb4:	2000006f 	.word	0x2000006f
 8001eb8:	20000070 	.word	0x20000070
 8001ebc:	20000071 	.word	0x20000071
 8001ec0:	20000072 	.word	0x20000072
 8001ec4:	20000073 	.word	0x20000073
 8001ec8:	20000074 	.word	0x20000074
 8001ecc:	20000075 	.word	0x20000075
 8001ed0:	20000076 	.word	0x20000076
 8001ed4:	20000077 	.word	0x20000077
 8001ed8:	20000078 	.word	0x20000078
 8001edc:	20000079 	.word	0x20000079
 8001ee0:	2000007a 	.word	0x2000007a
 8001ee4:	2000007b 	.word	0x2000007b
 8001ee8:	2000031c 	.word	0x2000031c
 8001eec:	08009398 	.word	0x08009398
 8001ef0:	080093ec 	.word	0x080093ec

//			Flash_ErasePage( 0x0803F800 );
		}
		else if( eeprom_data_test[0] != 92 && eeprom_data[28] == 1 && eeprom_data[29] == 130 && eeprom_data[30] == 131 )
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <Main_Setup+0x9b4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8001efa:	d022      	beq.n	8001f42 <Main_Setup+0x962>
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <Main_Setup+0x9b8>)
 8001efe:	7f1b      	ldrb	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d11e      	bne.n	8001f42 <Main_Setup+0x962>
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <Main_Setup+0x9b8>)
 8001f06:	7f5b      	ldrb	r3, [r3, #29]
 8001f08:	2b82      	cmp	r3, #130	; 0x82
 8001f0a:	d11a      	bne.n	8001f42 <Main_Setup+0x962>
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <Main_Setup+0x9b8>)
 8001f0e:	7f9b      	ldrb	r3, [r3, #30]
 8001f10:	2b83      	cmp	r3, #131	; 0x83
 8001f12:	d116      	bne.n	8001f42 <Main_Setup+0x962>
		{
		    sprintf(uartTX, "                                                                                                    ");
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <Main_Setup+0x9bc>)
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <Main_Setup+0x9c0>)
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2365      	movs	r3, #101	; 0x65
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f007 f81a 	bl	8008f58 <memcpy>
		    sprintf(uartTX, "\nSetup is NOT done! Writing and/or reading functions are useless!\n");
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <Main_Setup+0x9bc>)
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <Main_Setup+0x9c4>)
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	2343      	movs	r3, #67	; 0x43
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f007 f812 	bl	8008f58 <memcpy>
		    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001f34:	2364      	movs	r3, #100	; 0x64
 8001f36:	2265      	movs	r2, #101	; 0x65
 8001f38:	4918      	ldr	r1, [pc, #96]	; (8001f9c <Main_Setup+0x9bc>)
 8001f3a:	481b      	ldr	r0, [pc, #108]	; (8001fa8 <Main_Setup+0x9c8>)
 8001f3c:	f006 fa24 	bl	8008388 <HAL_UART_Transmit>
 8001f40:	e026      	b.n	8001f90 <Main_Setup+0x9b0>

//			Flash_ErasePage( 0x0803F800 );
		}
		else
		{
		    sprintf(uartTX, "                                                                                                    ");
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <Main_Setup+0x9bc>)
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <Main_Setup+0x9c0>)
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	2365      	movs	r3, #101	; 0x65
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f007 f803 	bl	8008f58 <memcpy>
		    sprintf(uartTX, "\nSetup is NOT done! Re-do the setup!\n");
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <Main_Setup+0x9bc>)
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <Main_Setup+0x9cc>)
 8001f56:	4614      	mov	r4, r2
 8001f58:	469c      	mov	ip, r3
 8001f5a:	f104 0e20 	add.w	lr, r4, #32
 8001f5e:	4665      	mov	r5, ip
 8001f60:	4626      	mov	r6, r4
 8001f62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f64:	6028      	str	r0, [r5, #0]
 8001f66:	6069      	str	r1, [r5, #4]
 8001f68:	60aa      	str	r2, [r5, #8]
 8001f6a:	60eb      	str	r3, [r5, #12]
 8001f6c:	3410      	adds	r4, #16
 8001f6e:	f10c 0c10 	add.w	ip, ip, #16
 8001f72:	4574      	cmp	r4, lr
 8001f74:	d1f3      	bne.n	8001f5e <Main_Setup+0x97e>
 8001f76:	4663      	mov	r3, ip
 8001f78:	4622      	mov	r2, r4
 8001f7a:	6810      	ldr	r0, [r2, #0]
 8001f7c:	6018      	str	r0, [r3, #0]
 8001f7e:	8892      	ldrh	r2, [r2, #4]
 8001f80:	809a      	strh	r2, [r3, #4]
		    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001f82:	2364      	movs	r3, #100	; 0x64
 8001f84:	2265      	movs	r2, #101	; 0x65
 8001f86:	4905      	ldr	r1, [pc, #20]	; (8001f9c <Main_Setup+0x9bc>)
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <Main_Setup+0x9c8>)
 8001f8a:	f006 f9fd 	bl	8008388 <HAL_UART_Transmit>

//			Flash_ErasePage( 0x0803F800 );
		}
	}
}
 8001f8e:	e7ff      	b.n	8001f90 <Main_Setup+0x9b0>
 8001f90:	bf00      	nop
 8001f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f94:	2000031c 	.word	0x2000031c
 8001f98:	2000005c 	.word	0x2000005c
 8001f9c:	200002a4 	.word	0x200002a4
 8001fa0:	08009038 	.word	0x08009038
 8001fa4:	0800942c 	.word	0x0800942c
 8001fa8:	200001f8 	.word	0x200001f8
 8001fac:	08009470 	.word	0x08009470

08001fb0 <Setup_Gyro_Signalen>:

void Setup_Gyro_Signalen()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8001fb4:	f7ff f892 	bl	80010dc <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_roll  = gX_Raw;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <Setup_Gyro_Signalen+0x94>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <Setup_Gyro_Signalen+0x98>)
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch = gY_Raw;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <Setup_Gyro_Signalen+0x9c>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <Setup_Gyro_Signalen+0xa0>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw   = gZ_Raw;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <Setup_Gyro_Signalen+0xa4>)
 8001fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <Setup_Gyro_Signalen+0xa8>)
 8001ff0:	edc3 7a00 	vstr	s15, [r3]

	if(cal_int == 2000)							//Only compensate after the calibration
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <Setup_Gyro_Signalen+0xac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ffc:	d120      	bne.n	8002040 <Setup_Gyro_Signalen+0x90>
	{
		gyro_roll  -= gyro_roll_cal;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <Setup_Gyro_Signalen+0x98>)
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <Setup_Gyro_Signalen+0xb0>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <Setup_Gyro_Signalen+0x98>)
 8002010:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch -= gyro_pitch_cal;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <Setup_Gyro_Signalen+0xa0>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <Setup_Gyro_Signalen+0xb4>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <Setup_Gyro_Signalen+0xa0>)
 8002026:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw   -= gyro_yaw_cal;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <Setup_Gyro_Signalen+0xa8>)
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <Setup_Gyro_Signalen+0xb8>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <Setup_Gyro_Signalen+0xa8>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000386 	.word	0x20000386
 8002048:	20000390 	.word	0x20000390
 800204c:	20000384 	.word	0x20000384
 8002050:	20000370 	.word	0x20000370
 8002054:	20000368 	.word	0x20000368
 8002058:	20000378 	.word	0x20000378
 800205c:	2000002c 	.word	0x2000002c
 8002060:	2000030c 	.word	0x2000030c
 8002064:	20000338 	.word	0x20000338
 8002068:	20000318 	.word	0x20000318
 800206c:	00000000 	.word	0x00000000

08002070 <Check_Gyro_Axes>:

void Check_Gyro_Axes( uint8_t movement )
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger_axis = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	77fb      	strb	r3, [r7, #31]
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;

	//Reset all axes
	gyro_angle_roll = 0;
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
	gyro_angle_pitch = 0;
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
	gyro_angle_yaw = 0;
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	613b      	str	r3, [r7, #16]

	Setup_Gyro_Signalen();
 8002090:	f7ff ff8e 	bl	8001fb0 <Setup_Gyro_Signalen>

	unsigned int i = 10000;
 8002094:	f242 7310 	movw	r3, #10000	; 0x2710
 8002098:	60fb      	str	r3, [r7, #12]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 800209a:	e05b      	b.n	8002154 <Check_Gyro_Axes+0xe4>
	{
		Setup_Gyro_Signalen();
 800209c:	f7ff ff88 	bl	8001fb0 <Setup_Gyro_Signalen>
		i--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]

		gyro_angle_roll += gyro_roll * 0.00007;              //0.00007 = 17.5 (md/s) / 250(Hz)
 80020a6:	69b8      	ldr	r0, [r7, #24]
 80020a8:	f7fe f9f2 	bl	8000490 <__aeabi_f2d>
 80020ac:	4604      	mov	r4, r0
 80020ae:	460d      	mov	r5, r1
 80020b0:	4bc3      	ldr	r3, [pc, #780]	; (80023c0 <Check_Gyro_Axes+0x350>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f9eb 	bl	8000490 <__aeabi_f2d>
 80020ba:	a3bf      	add	r3, pc, #764	; (adr r3, 80023b8 <Check_Gyro_Axes+0x348>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fa3e 	bl	8000540 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f882 	bl	80001d4 <__adddf3>
 80020d0:	4603      	mov	r3, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	4618      	mov	r0, r3
 80020d6:	4621      	mov	r1, r4
 80020d8:	f7fe fc44 	bl	8000964 <__aeabi_d2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	61bb      	str	r3, [r7, #24]
		gyro_angle_pitch += gyro_pitch * 0.00007;
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7fe f9d5 	bl	8000490 <__aeabi_f2d>
 80020e6:	4604      	mov	r4, r0
 80020e8:	460d      	mov	r5, r1
 80020ea:	4bb6      	ldr	r3, [pc, #728]	; (80023c4 <Check_Gyro_Axes+0x354>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9ce 	bl	8000490 <__aeabi_f2d>
 80020f4:	a3b0      	add	r3, pc, #704	; (adr r3, 80023b8 <Check_Gyro_Axes+0x348>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe fa21 	bl	8000540 <__aeabi_dmul>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4620      	mov	r0, r4
 8002104:	4629      	mov	r1, r5
 8002106:	f7fe f865 	bl	80001d4 <__adddf3>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	4618      	mov	r0, r3
 8002110:	4621      	mov	r1, r4
 8002112:	f7fe fc27 	bl	8000964 <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	617b      	str	r3, [r7, #20]
		gyro_angle_yaw += gyro_yaw * 0.00007;
 800211a:	6938      	ldr	r0, [r7, #16]
 800211c:	f7fe f9b8 	bl	8000490 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4ba8      	ldr	r3, [pc, #672]	; (80023c8 <Check_Gyro_Axes+0x358>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe f9b1 	bl	8000490 <__aeabi_f2d>
 800212e:	a3a2      	add	r3, pc, #648	; (adr r3, 80023b8 <Check_Gyro_Axes+0x348>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa04 	bl	8000540 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f848 	bl	80001d4 <__adddf3>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	4618      	mov	r0, r3
 800214a:	4621      	mov	r1, r4
 800214c:	f7fe fc0a 	bl	8000964 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	613b      	str	r3, [r7, #16]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 8002154:	edd7 7a06 	vldr	s15, [r7, #24]
 8002158:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	dd2d      	ble.n	80021c2 <Check_Gyro_Axes+0x152>
 8002166:	edd7 7a06 	vldr	s15, [r7, #24]
 800216a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800216e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	d524      	bpl.n	80021c2 <Check_Gyro_Axes+0x152>
 8002178:	edd7 7a05 	vldr	s15, [r7, #20]
 800217c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	dd1b      	ble.n	80021c2 <Check_Gyro_Axes+0x152>
 800218a:	edd7 7a05 	vldr	s15, [r7, #20]
 800218e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d512      	bpl.n	80021c2 <Check_Gyro_Axes+0x152>
 800219c:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	dd09      	ble.n	80021c2 <Check_Gyro_Axes+0x152>
 80021ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	f53f af6d 	bmi.w	800209c <Check_Gyro_Axes+0x2c>
//		HAL_Delay( 4 );	 //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}


	//Assign the moved axis to the corresponding function (pitch, roll, yaw)
	if(( gyro_angle_roll < -30 || gyro_angle_roll > 30 ) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80021c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80021c6:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d408      	bmi.n	80021e6 <Check_Gyro_Axes+0x176>
 80021d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80021d8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	dd36      	ble.n	8002254 <Check_Gyro_Axes+0x1e4>
 80021e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ea:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	dd2d      	ble.n	8002254 <Check_Gyro_Axes+0x1e4>
 80021f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80021fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	d524      	bpl.n	8002254 <Check_Gyro_Axes+0x1e4>
 800220a:	edd7 7a04 	vldr	s15, [r7, #16]
 800220e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	dd1b      	ble.n	8002254 <Check_Gyro_Axes+0x1e4>
 800221c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002220:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	d512      	bpl.n	8002254 <Check_Gyro_Axes+0x1e4>
	{
		gyro_check_byte |= 0b00000001;
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <Check_Gyro_Axes+0x35c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b64      	ldr	r3, [pc, #400]	; (80023cc <Check_Gyro_Axes+0x35c>)
 800223a:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_roll < 0 )	{	trigger_axis = 0b10000001;	}
 800223c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	d502      	bpl.n	8002250 <Check_Gyro_Axes+0x1e0>
 800224a:	2381      	movs	r3, #129	; 0x81
 800224c:	77fb      	strb	r3, [r7, #31]
 800224e:	e001      	b.n	8002254 <Check_Gyro_Axes+0x1e4>
		else	{	trigger_axis = 0b00000001;	}
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_pitch < -30 || gyro_angle_pitch > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 8002254:	edd7 7a05 	vldr	s15, [r7, #20]
 8002258:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800225c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	d408      	bmi.n	8002278 <Check_Gyro_Axes+0x208>
 8002266:	edd7 7a05 	vldr	s15, [r7, #20]
 800226a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	dd36      	ble.n	80022e6 <Check_Gyro_Axes+0x276>
 8002278:	edd7 7a06 	vldr	s15, [r7, #24]
 800227c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	dd2d      	ble.n	80022e6 <Check_Gyro_Axes+0x276>
 800228a:	edd7 7a06 	vldr	s15, [r7, #24]
 800228e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229a:	d524      	bpl.n	80022e6 <Check_Gyro_Axes+0x276>
 800229c:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd1b      	ble.n	80022e6 <Check_Gyro_Axes+0x276>
 80022ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d512      	bpl.n	80022e6 <Check_Gyro_Axes+0x276>
	{
		gyro_check_byte |= 0b00000010;
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <Check_Gyro_Axes+0x35c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b40      	ldr	r3, [pc, #256]	; (80023cc <Check_Gyro_Axes+0x35c>)
 80022cc:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_pitch < 0 )	{	trigger_axis = 0b10000010;	}
 80022ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	d502      	bpl.n	80022e2 <Check_Gyro_Axes+0x272>
 80022dc:	2382      	movs	r3, #130	; 0x82
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e001      	b.n	80022e6 <Check_Gyro_Axes+0x276>
		else	{	trigger_axis = 0b00000010;	}
 80022e2:	2302      	movs	r3, #2
 80022e4:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_yaw < -30 || gyro_angle_yaw > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 )
 80022e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ea:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	d408      	bmi.n	800230a <Check_Gyro_Axes+0x29a>
 80022f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	dd36      	ble.n	8002378 <Check_Gyro_Axes+0x308>
 800230a:	edd7 7a06 	vldr	s15, [r7, #24]
 800230e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	dd2d      	ble.n	8002378 <Check_Gyro_Axes+0x308>
 800231c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002320:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	d524      	bpl.n	8002378 <Check_Gyro_Axes+0x308>
 800232e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002332:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	dd1b      	ble.n	8002378 <Check_Gyro_Axes+0x308>
 8002340:	edd7 7a05 	vldr	s15, [r7, #20]
 8002344:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d512      	bpl.n	8002378 <Check_Gyro_Axes+0x308>
	{
		gyro_check_byte |= 0b00000100;
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <Check_Gyro_Axes+0x35c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <Check_Gyro_Axes+0x35c>)
 800235e:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_yaw < 0 )	{	trigger_axis = 0b10000011;	}
 8002360:	edd7 7a04 	vldr	s15, [r7, #16]
 8002364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d502      	bpl.n	8002374 <Check_Gyro_Axes+0x304>
 800236e:	2383      	movs	r3, #131	; 0x83
 8002370:	77fb      	strb	r3, [r7, #31]
 8002372:	e001      	b.n	8002378 <Check_Gyro_Axes+0x308>
		else	{	trigger_axis = 0b00000011;	}
 8002374:	2303      	movs	r3, #3
 8002376:	77fb      	strb	r3, [r7, #31]
	}

	if( trigger_axis == 0 )
 8002378:	7ffb      	ldrb	r3, [r7, #31]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <Check_Gyro_Axes+0x316>
	{
		error = true;
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <Check_Gyro_Axes+0x360>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e005      	b.n	8002392 <Check_Gyro_Axes+0x322>
	}

	else
	if( movement == 1 )	{	roll_axis  = trigger_axis;	}
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <Check_Gyro_Axes+0x322>
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <Check_Gyro_Axes+0x364>)
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	7013      	strb	r3, [r2, #0]
	if( movement == 2 )	{	pitch_axis = trigger_axis;	}
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d102      	bne.n	800239e <Check_Gyro_Axes+0x32e>
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <Check_Gyro_Axes+0x368>)
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	7013      	strb	r3, [r2, #0]
	if( movement == 3 )	{	yaw_axis   = trigger_axis;	}
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d102      	bne.n	80023aa <Check_Gyro_Axes+0x33a>
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <Check_Gyro_Axes+0x36c>)
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
 80023a8:	7013      	strb	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	f3af 8000 	nop.w
 80023b8:	d7c6fbd2 	.word	0xd7c6fbd2
 80023bc:	3f12599e 	.word	0x3f12599e
 80023c0:	20000390 	.word	0x20000390
 80023c4:	20000370 	.word	0x20000370
 80023c8:	20000378 	.word	0x20000378
 80023cc:	2000033d 	.word	0x2000033d
 80023d0:	20000058 	.word	0x20000058
 80023d4:	20000361 	.word	0x20000361
 80023d8:	20000360 	.word	0x20000360
 80023dc:	20000334 	.word	0x20000334

080023e0 <Register_Min_Max>:

void Register_Min_Max( void )
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
	uint8_t zero = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
	low_channel_1 = receiver_input_channel_1;
 80023ea:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <Register_Min_Max+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6f      	ldr	r2, [pc, #444]	; (80025ac <Register_Min_Max+0x1cc>)
 80023f0:	6013      	str	r3, [r2, #0]
	low_channel_2 = receiver_input_channel_2;
 80023f2:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <Register_Min_Max+0x1d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <Register_Min_Max+0x1d4>)
 80023f8:	6013      	str	r3, [r2, #0]
	low_channel_3 = receiver_input_channel_3;
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <Register_Min_Max+0x1d8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6f      	ldr	r2, [pc, #444]	; (80025bc <Register_Min_Max+0x1dc>)
 8002400:	6013      	str	r3, [r2, #0]
	low_channel_4 = receiver_input_channel_4;
 8002402:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <Register_Min_Max+0x1e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6f      	ldr	r2, [pc, #444]	; (80025c4 <Register_Min_Max+0x1e4>)
 8002408:	6013      	str	r3, [r2, #0]

	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 800240a:	e009      	b.n	8002420 <Register_Min_Max+0x40>
	{
		for(int i = 10000; i > 0; i-- )	{	}
 800240c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	e002      	b.n	800241a <Register_Min_Max+0x3a>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b01      	subs	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	dcf9      	bgt.n	8002414 <Register_Min_Max+0x34>
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 8002420:	4b69      	ldr	r3, [pc, #420]	; (80025c8 <Register_Min_Max+0x1e8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f103 0214 	add.w	r2, r3, #20
 8002428:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <Register_Min_Max+0x1c8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	dd07      	ble.n	8002440 <Register_Min_Max+0x60>
 8002430:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <Register_Min_Max+0x1e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1a3 0214 	sub.w	r2, r3, #20
 8002438:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <Register_Min_Max+0x1c8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbe5      	blt.n	800240c <Register_Min_Max+0x2c>
	}
	
	int k = 20000000;
 8002440:	4b62      	ldr	r3, [pc, #392]	; (80025cc <Register_Min_Max+0x1ec>)
 8002442:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 8002444:	e0a2      	b.n	800258c <Register_Min_Max+0x1ac>
	{
		if(	receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)	{	zero |= 0b00000001;	}
 8002446:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <Register_Min_Max+0x1e8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f103 0214 	add.w	r2, r3, #20
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <Register_Min_Max+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	dd0b      	ble.n	800246e <Register_Min_Max+0x8e>
 8002456:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <Register_Min_Max+0x1e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1a3 0214 	sub.w	r2, r3, #20
 800245e:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <Register_Min_Max+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	da03      	bge.n	800246e <Register_Min_Max+0x8e>
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)	{	zero |= 0b00000010;	}
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <Register_Min_Max+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f103 0214 	add.w	r2, r3, #20
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <Register_Min_Max+0x1d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	dd0b      	ble.n	8002496 <Register_Min_Max+0xb6>
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <Register_Min_Max+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1a3 0214 	sub.w	r2, r3, #20
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <Register_Min_Max+0x1d0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	da03      	bge.n	8002496 <Register_Min_Max+0xb6>
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)	{	zero |= 0b00000100;	}
 8002496:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <Register_Min_Max+0x1f4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f103 0214 	add.w	r2, r3, #20
 800249e:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <Register_Min_Max+0x1d8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dd0b      	ble.n	80024be <Register_Min_Max+0xde>
 80024a6:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <Register_Min_Max+0x1f4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1a3 0214 	sub.w	r2, r3, #20
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <Register_Min_Max+0x1d8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	da03      	bge.n	80024be <Register_Min_Max+0xde>
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)	{	zero |= 0b00001000;	}
 80024be:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <Register_Min_Max+0x1f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f103 0214 	add.w	r2, r3, #20
 80024c6:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <Register_Min_Max+0x1e0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dd0b      	ble.n	80024e6 <Register_Min_Max+0x106>
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <Register_Min_Max+0x1f8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1a3 0214 	sub.w	r2, r3, #20
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <Register_Min_Max+0x1e0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	da03      	bge.n	80024e6 <Register_Min_Max+0x106>
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	73fb      	strb	r3, [r7, #15]

		if(	receiver_input_channel_1 < low_channel_1)	{	low_channel_1 = receiver_input_channel_1;	}
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <Register_Min_Max+0x1c8>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <Register_Min_Max+0x1cc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	da03      	bge.n	80024fa <Register_Min_Max+0x11a>
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <Register_Min_Max+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <Register_Min_Max+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 < low_channel_2)	{	low_channel_2 = receiver_input_channel_2;	}
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <Register_Min_Max+0x1d0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <Register_Min_Max+0x1d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	da03      	bge.n	800250e <Register_Min_Max+0x12e>
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <Register_Min_Max+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <Register_Min_Max+0x1d4>)
 800250c:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 < low_channel_3)	{	low_channel_3 = receiver_input_channel_3;	}
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <Register_Min_Max+0x1d8>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <Register_Min_Max+0x1dc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	da03      	bge.n	8002522 <Register_Min_Max+0x142>
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <Register_Min_Max+0x1d8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <Register_Min_Max+0x1dc>)
 8002520:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 < low_channel_4)	{	low_channel_4 = receiver_input_channel_4;	}
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <Register_Min_Max+0x1e0>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <Register_Min_Max+0x1e4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	da03      	bge.n	8002536 <Register_Min_Max+0x156>
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <Register_Min_Max+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <Register_Min_Max+0x1e4>)
 8002534:	6013      	str	r3, [r2, #0]
		
		if(	receiver_input_channel_1 > high_channel_1)	{	high_channel_1 = receiver_input_channel_1;	}
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <Register_Min_Max+0x1c8>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <Register_Min_Max+0x1fc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	dd03      	ble.n	800254a <Register_Min_Max+0x16a>
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <Register_Min_Max+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a25      	ldr	r2, [pc, #148]	; (80025dc <Register_Min_Max+0x1fc>)
 8002548:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 > high_channel_2)	{	high_channel_2 = receiver_input_channel_2;	}
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <Register_Min_Max+0x1d0>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <Register_Min_Max+0x200>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	dd03      	ble.n	800255e <Register_Min_Max+0x17e>
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <Register_Min_Max+0x1d0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <Register_Min_Max+0x200>)
 800255c:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 > high_channel_3)	{	high_channel_3 = receiver_input_channel_3;	}
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <Register_Min_Max+0x1d8>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <Register_Min_Max+0x204>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	dd03      	ble.n	8002572 <Register_Min_Max+0x192>
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <Register_Min_Max+0x1d8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <Register_Min_Max+0x204>)
 8002570:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 > high_channel_4)	{	high_channel_4 = receiver_input_channel_4;	}
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <Register_Min_Max+0x1e0>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <Register_Min_Max+0x208>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	dd03      	ble.n	8002586 <Register_Min_Max+0x1a6>
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <Register_Min_Max+0x1e0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <Register_Min_Max+0x208>)
 8002584:	6013      	str	r3, [r2, #0]

		k--;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3b01      	subs	r3, #1
 800258a:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	dd03      	ble.n	800259a <Register_Min_Max+0x1ba>
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b0e      	cmp	r3, #14
 8002596:	f67f af56 	bls.w	8002446 <Register_Min_Max+0x66>
	}
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	2000038c 	.word	0x2000038c
 80025ac:	20000348 	.word	0x20000348
 80025b0:	20000380 	.word	0x20000380
 80025b4:	20000330 	.word	0x20000330
 80025b8:	2000009c 	.word	0x2000009c
 80025bc:	20000310 	.word	0x20000310
 80025c0:	20000388 	.word	0x20000388
 80025c4:	20000358 	.word	0x20000358
 80025c8:	2000035c 	.word	0x2000035c
 80025cc:	01312d00 	.word	0x01312d00
 80025d0:	20000328 	.word	0x20000328
 80025d4:	2000034c 	.word	0x2000034c
 80025d8:	20000314 	.word	0x20000314
 80025dc:	2000032c 	.word	0x2000032c
 80025e0:	20000364 	.word	0x20000364
 80025e4:	20000340 	.word	0x20000340
 80025e8:	20000354 	.word	0x20000354

080025ec <Check_Receiver_Inputs>:

void Check_Receiver_Inputs( uint8_t movement )			//Check if a receiver input value is changing within 30 seconds
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]
	int pulse_length;
	unsigned int i = 3000000;
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <Check_Receiver_Inputs+0x18c>)
 80025fc:	60fb      	str	r3, [r7, #12]

	while( i > 0 && trigger == 0 )
 80025fe:	e065      	b.n	80026cc <Check_Receiver_Inputs+0xe0>
	{
		HAL_Delay( 250 );
 8002600:	20fa      	movs	r0, #250	; 0xfa
 8002602:	f001 f865 	bl	80036d0 <HAL_Delay>

		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250)
 8002606:	4b5d      	ldr	r3, [pc, #372]	; (800277c <Check_Receiver_Inputs+0x190>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800260e:	4293      	cmp	r3, r2
 8002610:	dc05      	bgt.n	800261e <Check_Receiver_Inputs+0x32>
 8002612:	4b5a      	ldr	r3, [pc, #360]	; (800277c <Check_Receiver_Inputs+0x190>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800261a:	4293      	cmp	r3, r2
 800261c:	dc0b      	bgt.n	8002636 <Check_Receiver_Inputs+0x4a>
		{
			trigger = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000001;
 8002622:	4b57      	ldr	r3, [pc, #348]	; (8002780 <Check_Receiver_Inputs+0x194>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b54      	ldr	r3, [pc, #336]	; (8002780 <Check_Receiver_Inputs+0x194>)
 800262e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_1;
 8002630:	4b52      	ldr	r3, [pc, #328]	; (800277c <Check_Receiver_Inputs+0x190>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250)
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <Check_Receiver_Inputs+0x198>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800263e:	4293      	cmp	r3, r2
 8002640:	dc05      	bgt.n	800264e <Check_Receiver_Inputs+0x62>
 8002642:	4b50      	ldr	r3, [pc, #320]	; (8002784 <Check_Receiver_Inputs+0x198>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800264a:	4293      	cmp	r3, r2
 800264c:	dc0b      	bgt.n	8002666 <Check_Receiver_Inputs+0x7a>
		{
			trigger = 2;
 800264e:	2302      	movs	r3, #2
 8002650:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000010;
 8002652:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <Check_Receiver_Inputs+0x194>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <Check_Receiver_Inputs+0x194>)
 800265e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_2;
 8002660:	4b48      	ldr	r3, [pc, #288]	; (8002784 <Check_Receiver_Inputs+0x198>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250)
 8002666:	4b48      	ldr	r3, [pc, #288]	; (8002788 <Check_Receiver_Inputs+0x19c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800266e:	4293      	cmp	r3, r2
 8002670:	dc05      	bgt.n	800267e <Check_Receiver_Inputs+0x92>
 8002672:	4b45      	ldr	r3, [pc, #276]	; (8002788 <Check_Receiver_Inputs+0x19c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800267a:	4293      	cmp	r3, r2
 800267c:	dc0b      	bgt.n	8002696 <Check_Receiver_Inputs+0xaa>
		{
			trigger = 3;
 800267e:	2303      	movs	r3, #3
 8002680:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000100;
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <Check_Receiver_Inputs+0x194>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <Check_Receiver_Inputs+0x194>)
 800268e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_3;
 8002690:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <Check_Receiver_Inputs+0x19c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250)
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <Check_Receiver_Inputs+0x1a0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800269e:	4293      	cmp	r3, r2
 80026a0:	dc05      	bgt.n	80026ae <Check_Receiver_Inputs+0xc2>
 80026a2:	4b3a      	ldr	r3, [pc, #232]	; (800278c <Check_Receiver_Inputs+0x1a0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026aa:	4293      	cmp	r3, r2
 80026ac:	dc0b      	bgt.n	80026c6 <Check_Receiver_Inputs+0xda>
		{
			trigger = 4;
 80026ae:	2304      	movs	r3, #4
 80026b0:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00001000;
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <Check_Receiver_Inputs+0x194>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b30      	ldr	r3, [pc, #192]	; (8002780 <Check_Receiver_Inputs+0x194>)
 80026be:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_4;
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <Check_Receiver_Inputs+0x1a0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
		}

		i--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
	while( i > 0 && trigger == 0 )
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <Check_Receiver_Inputs+0xec>
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d093      	beq.n	8002600 <Check_Receiver_Inputs+0x14>
	}

	if(trigger == 0)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <Check_Receiver_Inputs+0xfa>
	{
		error = 1;
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <Check_Receiver_Inputs+0x1a4>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
		{
			channel_4_assign = trigger;
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
 80026e4:	e043      	b.n	800276e <Check_Receiver_Inputs+0x182>
		if(movement == 1)
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10d      	bne.n	8002708 <Check_Receiver_Inputs+0x11c>
			channel_3_assign = trigger;
 80026ec:	4a29      	ldr	r2, [pc, #164]	; (8002794 <Check_Receiver_Inputs+0x1a8>)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026f8:	4293      	cmp	r3, r2
 80026fa:	dc05      	bgt.n	8002708 <Check_Receiver_Inputs+0x11c>
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <Check_Receiver_Inputs+0x1a8>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	3b80      	subs	r3, #128	; 0x80
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <Check_Receiver_Inputs+0x1a8>)
 8002706:	701a      	strb	r2, [r3, #0]
		if(movement == 2)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d10d      	bne.n	800272a <Check_Receiver_Inputs+0x13e>
			channel_1_assign = trigger;
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <Check_Receiver_Inputs+0x1ac>)
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_1_assign += 0b10000000;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800271a:	4293      	cmp	r3, r2
 800271c:	dc05      	bgt.n	800272a <Check_Receiver_Inputs+0x13e>
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <Check_Receiver_Inputs+0x1ac>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	3b80      	subs	r3, #128	; 0x80
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <Check_Receiver_Inputs+0x1ac>)
 8002728:	701a      	strb	r2, [r3, #0]
		if(movement == 3)
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d10d      	bne.n	800274c <Check_Receiver_Inputs+0x160>
			channel_2_assign = trigger;
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <Check_Receiver_Inputs+0x1b0>)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800273c:	4293      	cmp	r3, r2
 800273e:	dc05      	bgt.n	800274c <Check_Receiver_Inputs+0x160>
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <Check_Receiver_Inputs+0x1b0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3b80      	subs	r3, #128	; 0x80
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <Check_Receiver_Inputs+0x1b0>)
 800274a:	701a      	strb	r2, [r3, #0]
		if(movement == 4)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d10d      	bne.n	800276e <Check_Receiver_Inputs+0x182>
			channel_4_assign = trigger;
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <Check_Receiver_Inputs+0x1b4>)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	7013      	strb	r3, [r2, #0]
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800275e:	4293      	cmp	r3, r2
 8002760:	dc05      	bgt.n	800276e <Check_Receiver_Inputs+0x182>
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <Check_Receiver_Inputs+0x1b4>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3b80      	subs	r3, #128	; 0x80
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <Check_Receiver_Inputs+0x1b4>)
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	002dc6c0 	.word	0x002dc6c0
 800277c:	2000038c 	.word	0x2000038c
 8002780:	2000033c 	.word	0x2000033c
 8002784:	20000380 	.word	0x20000380
 8002788:	2000009c 	.word	0x2000009c
 800278c:	20000388 	.word	0x20000388
 8002790:	20000058 	.word	0x20000058
 8002794:	20000344 	.word	0x20000344
 8002798:	20000351 	.word	0x20000351
 800279c:	20000335 	.word	0x20000335
 80027a0:	20000350 	.word	0x20000350

080027a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027aa:	f000 ff2b 	bl	8003604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ae:	f000 faa3 	bl	8002cf8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay( 3000 );
 80027b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027b6:	f000 ff8b 	bl	80036d0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ba:	f000 fc79 	bl	80030b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80027be:	f000 faf9 	bl	8002db4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80027c2:	f000 fb37 	bl	8002e34 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027c6:	f000 fba9 	bl	8002f1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80027ca:	f000 fc41 	bl	8003050 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// Flash to EEPROM Array
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  0, &eeprom_data[0]);
 80027ce:	4b9d      	ldr	r3, [pc, #628]	; (8002a44 <main+0x2a0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	499d      	ldr	r1, [pc, #628]	; (8002a48 <main+0x2a4>)
 80027d4:	207f      	movs	r0, #127	; 0x7f
 80027d6:	f7fe fa02 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  1, &eeprom_data[1]);
 80027da:	4b9c      	ldr	r3, [pc, #624]	; (8002a4c <main+0x2a8>)
 80027dc:	2201      	movs	r2, #1
 80027de:	499a      	ldr	r1, [pc, #616]	; (8002a48 <main+0x2a4>)
 80027e0:	207f      	movs	r0, #127	; 0x7f
 80027e2:	f7fe f9fc 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  2, &eeprom_data[2]);
 80027e6:	4b9a      	ldr	r3, [pc, #616]	; (8002a50 <main+0x2ac>)
 80027e8:	2202      	movs	r2, #2
 80027ea:	4997      	ldr	r1, [pc, #604]	; (8002a48 <main+0x2a4>)
 80027ec:	207f      	movs	r0, #127	; 0x7f
 80027ee:	f7fe f9f6 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  3, &eeprom_data[3]);
 80027f2:	4b98      	ldr	r3, [pc, #608]	; (8002a54 <main+0x2b0>)
 80027f4:	2203      	movs	r2, #3
 80027f6:	4994      	ldr	r1, [pc, #592]	; (8002a48 <main+0x2a4>)
 80027f8:	207f      	movs	r0, #127	; 0x7f
 80027fa:	f7fe f9f0 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  4, &eeprom_data[4]);
 80027fe:	4b96      	ldr	r3, [pc, #600]	; (8002a58 <main+0x2b4>)
 8002800:	2204      	movs	r2, #4
 8002802:	4991      	ldr	r1, [pc, #580]	; (8002a48 <main+0x2a4>)
 8002804:	207f      	movs	r0, #127	; 0x7f
 8002806:	f7fe f9ea 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  5, &eeprom_data[5]);
 800280a:	4b94      	ldr	r3, [pc, #592]	; (8002a5c <main+0x2b8>)
 800280c:	2205      	movs	r2, #5
 800280e:	498e      	ldr	r1, [pc, #568]	; (8002a48 <main+0x2a4>)
 8002810:	207f      	movs	r0, #127	; 0x7f
 8002812:	f7fe f9e4 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  6, &eeprom_data[6]);
 8002816:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <main+0x2bc>)
 8002818:	2206      	movs	r2, #6
 800281a:	498b      	ldr	r1, [pc, #556]	; (8002a48 <main+0x2a4>)
 800281c:	207f      	movs	r0, #127	; 0x7f
 800281e:	f7fe f9de 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  7, &eeprom_data[7]);
 8002822:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <main+0x2c0>)
 8002824:	2207      	movs	r2, #7
 8002826:	4988      	ldr	r1, [pc, #544]	; (8002a48 <main+0x2a4>)
 8002828:	207f      	movs	r0, #127	; 0x7f
 800282a:	f7fe f9d8 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  8, &eeprom_data[8]);
 800282e:	4b8e      	ldr	r3, [pc, #568]	; (8002a68 <main+0x2c4>)
 8002830:	2208      	movs	r2, #8
 8002832:	4985      	ldr	r1, [pc, #532]	; (8002a48 <main+0x2a4>)
 8002834:	207f      	movs	r0, #127	; 0x7f
 8002836:	f7fe f9d2 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  9, &eeprom_data[9]);
 800283a:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <main+0x2c8>)
 800283c:	2209      	movs	r2, #9
 800283e:	4982      	ldr	r1, [pc, #520]	; (8002a48 <main+0x2a4>)
 8002840:	207f      	movs	r0, #127	; 0x7f
 8002842:	f7fe f9cc 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 10, &eeprom_data[10]);
 8002846:	4b8a      	ldr	r3, [pc, #552]	; (8002a70 <main+0x2cc>)
 8002848:	220a      	movs	r2, #10
 800284a:	497f      	ldr	r1, [pc, #508]	; (8002a48 <main+0x2a4>)
 800284c:	207f      	movs	r0, #127	; 0x7f
 800284e:	f7fe f9c6 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 11, &eeprom_data[11]);
 8002852:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <main+0x2d0>)
 8002854:	220b      	movs	r2, #11
 8002856:	497c      	ldr	r1, [pc, #496]	; (8002a48 <main+0x2a4>)
 8002858:	207f      	movs	r0, #127	; 0x7f
 800285a:	f7fe f9c0 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 12, &eeprom_data[12]);
 800285e:	4b86      	ldr	r3, [pc, #536]	; (8002a78 <main+0x2d4>)
 8002860:	220c      	movs	r2, #12
 8002862:	4979      	ldr	r1, [pc, #484]	; (8002a48 <main+0x2a4>)
 8002864:	207f      	movs	r0, #127	; 0x7f
 8002866:	f7fe f9ba 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 13, &eeprom_data[13]);
 800286a:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <main+0x2d8>)
 800286c:	220d      	movs	r2, #13
 800286e:	4976      	ldr	r1, [pc, #472]	; (8002a48 <main+0x2a4>)
 8002870:	207f      	movs	r0, #127	; 0x7f
 8002872:	f7fe f9b4 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 14, &eeprom_data[14]);
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <main+0x2dc>)
 8002878:	220e      	movs	r2, #14
 800287a:	4973      	ldr	r1, [pc, #460]	; (8002a48 <main+0x2a4>)
 800287c:	207f      	movs	r0, #127	; 0x7f
 800287e:	f7fe f9ae 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 15, &eeprom_data[15]);
 8002882:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <main+0x2e0>)
 8002884:	220f      	movs	r2, #15
 8002886:	4970      	ldr	r1, [pc, #448]	; (8002a48 <main+0x2a4>)
 8002888:	207f      	movs	r0, #127	; 0x7f
 800288a:	f7fe f9a8 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 16, &eeprom_data[16]);
 800288e:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <main+0x2e4>)
 8002890:	2210      	movs	r2, #16
 8002892:	496d      	ldr	r1, [pc, #436]	; (8002a48 <main+0x2a4>)
 8002894:	207f      	movs	r0, #127	; 0x7f
 8002896:	f7fe f9a2 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 17, &eeprom_data[17]);
 800289a:	4b7c      	ldr	r3, [pc, #496]	; (8002a8c <main+0x2e8>)
 800289c:	2211      	movs	r2, #17
 800289e:	496a      	ldr	r1, [pc, #424]	; (8002a48 <main+0x2a4>)
 80028a0:	207f      	movs	r0, #127	; 0x7f
 80028a2:	f7fe f99c 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 18, &eeprom_data[18]);
 80028a6:	4b7a      	ldr	r3, [pc, #488]	; (8002a90 <main+0x2ec>)
 80028a8:	2212      	movs	r2, #18
 80028aa:	4967      	ldr	r1, [pc, #412]	; (8002a48 <main+0x2a4>)
 80028ac:	207f      	movs	r0, #127	; 0x7f
 80028ae:	f7fe f996 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 19, &eeprom_data[19]);
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <main+0x2f0>)
 80028b4:	2213      	movs	r2, #19
 80028b6:	4964      	ldr	r1, [pc, #400]	; (8002a48 <main+0x2a4>)
 80028b8:	207f      	movs	r0, #127	; 0x7f
 80028ba:	f7fe f990 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 20, &eeprom_data[20]);
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <main+0x2f4>)
 80028c0:	2214      	movs	r2, #20
 80028c2:	4961      	ldr	r1, [pc, #388]	; (8002a48 <main+0x2a4>)
 80028c4:	207f      	movs	r0, #127	; 0x7f
 80028c6:	f7fe f98a 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 21, &eeprom_data[21]);
 80028ca:	4b74      	ldr	r3, [pc, #464]	; (8002a9c <main+0x2f8>)
 80028cc:	2215      	movs	r2, #21
 80028ce:	495e      	ldr	r1, [pc, #376]	; (8002a48 <main+0x2a4>)
 80028d0:	207f      	movs	r0, #127	; 0x7f
 80028d2:	f7fe f984 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 22, &eeprom_data[22]);
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <main+0x2fc>)
 80028d8:	2216      	movs	r2, #22
 80028da:	495b      	ldr	r1, [pc, #364]	; (8002a48 <main+0x2a4>)
 80028dc:	207f      	movs	r0, #127	; 0x7f
 80028de:	f7fe f97e 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 23, &eeprom_data[23]);
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <main+0x300>)
 80028e4:	2217      	movs	r2, #23
 80028e6:	4958      	ldr	r1, [pc, #352]	; (8002a48 <main+0x2a4>)
 80028e8:	207f      	movs	r0, #127	; 0x7f
 80028ea:	f7fe f978 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 24, &eeprom_data[24]);
 80028ee:	4b6e      	ldr	r3, [pc, #440]	; (8002aa8 <main+0x304>)
 80028f0:	2218      	movs	r2, #24
 80028f2:	4955      	ldr	r1, [pc, #340]	; (8002a48 <main+0x2a4>)
 80028f4:	207f      	movs	r0, #127	; 0x7f
 80028f6:	f7fe f972 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 25, &eeprom_data[25]);
 80028fa:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <main+0x308>)
 80028fc:	2219      	movs	r2, #25
 80028fe:	4952      	ldr	r1, [pc, #328]	; (8002a48 <main+0x2a4>)
 8002900:	207f      	movs	r0, #127	; 0x7f
 8002902:	f7fe f96c 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 26, &eeprom_data[26]);
 8002906:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <main+0x30c>)
 8002908:	221a      	movs	r2, #26
 800290a:	494f      	ldr	r1, [pc, #316]	; (8002a48 <main+0x2a4>)
 800290c:	207f      	movs	r0, #127	; 0x7f
 800290e:	f7fe f966 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 27, &eeprom_data[27]);
 8002912:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <main+0x310>)
 8002914:	221b      	movs	r2, #27
 8002916:	494c      	ldr	r1, [pc, #304]	; (8002a48 <main+0x2a4>)
 8002918:	207f      	movs	r0, #127	; 0x7f
 800291a:	f7fe f960 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 28, &eeprom_data[28]);
 800291e:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <main+0x314>)
 8002920:	221c      	movs	r2, #28
 8002922:	4949      	ldr	r1, [pc, #292]	; (8002a48 <main+0x2a4>)
 8002924:	207f      	movs	r0, #127	; 0x7f
 8002926:	f7fe f95a 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 29, &eeprom_data[29]);
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <main+0x318>)
 800292c:	221d      	movs	r2, #29
 800292e:	4946      	ldr	r1, [pc, #280]	; (8002a48 <main+0x2a4>)
 8002930:	207f      	movs	r0, #127	; 0x7f
 8002932:	f7fe f954 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 30, &eeprom_data[30]);
 8002936:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <main+0x31c>)
 8002938:	221e      	movs	r2, #30
 800293a:	4943      	ldr	r1, [pc, #268]	; (8002a48 <main+0x2a4>)
 800293c:	207f      	movs	r0, #127	; 0x7f
 800293e:	f7fe f94e 	bl	8000bde <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data[31]);
 8002942:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <main+0x320>)
 8002944:	221f      	movs	r2, #31
 8002946:	4940      	ldr	r1, [pc, #256]	; (8002a48 <main+0x2a4>)
 8002948:	207f      	movs	r0, #127	; 0x7f
 800294a:	f7fe f948 	bl	8000bde <Flash_EEPROM_Data_Read>

	L3GD20H_Init();
 800294e:	f7fe fb45 	bl	8000fdc <L3GD20H_Init>
	PWM_IC_Start();
 8002952:	f7fe fc47 	bl	80011e4 <PWM_IC_Start>
	///
	HAL_Delay( 2500 );
 8002956:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800295a:	f000 feb9 	bl	80036d0 <HAL_Delay>

	/////////////////////////////////////////////////////////////////////////


	if( gyro_error == false )
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <main+0x324>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	f083 0301 	eor.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01d      	beq.n	80029a8 <main+0x204>
	{
		sprintf(uartTX, "                                                                                                    ");
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <main+0x328>)
 800296e:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <main+0x32c>)
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	2365      	movs	r3, #101	; 0x65
 8002976:	461a      	mov	r2, r3
 8002978:	f006 faee 	bl	8008f58 <memcpy>
		sprintf(uartTX, "\nSystem started!\n");
 800297c:	4a53      	ldr	r2, [pc, #332]	; (8002acc <main+0x328>)
 800297e:	4b55      	ldr	r3, [pc, #340]	; (8002ad4 <main+0x330>)
 8002980:	4615      	mov	r5, r2
 8002982:	461c      	mov	r4, r3
 8002984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002986:	6028      	str	r0, [r5, #0]
 8002988:	6069      	str	r1, [r5, #4]
 800298a:	60aa      	str	r2, [r5, #8]
 800298c:	60eb      	str	r3, [r5, #12]
 800298e:	8823      	ldrh	r3, [r4, #0]
 8002990:	822b      	strh	r3, [r5, #16]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002992:	2364      	movs	r3, #100	; 0x64
 8002994:	2265      	movs	r2, #101	; 0x65
 8002996:	494d      	ldr	r1, [pc, #308]	; (8002acc <main+0x328>)
 8002998:	484f      	ldr	r0, [pc, #316]	; (8002ad8 <main+0x334>)
 800299a:	f005 fcf5 	bl	8008388 <HAL_UART_Transmit>
		HAL_Delay( 2500 );
 800299e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80029a2:	f000 fe95 	bl	80036d0 <HAL_Delay>
 80029a6:	e03c      	b.n	8002a22 <main+0x27e>
	}
	else if( gyro_error == true )
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <main+0x324>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d021      	beq.n	80029f4 <main+0x250>
	{
		  sprintf(uartTX, "                                                                                                    ");
 80029b0:	4a46      	ldr	r2, [pc, #280]	; (8002acc <main+0x328>)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <main+0x32c>)
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	2365      	movs	r3, #101	; 0x65
 80029ba:	461a      	mov	r2, r3
 80029bc:	f006 facc 	bl	8008f58 <memcpy>
		  sprintf(uartTX, "\nSystem failed to start!\n");
 80029c0:	4a42      	ldr	r2, [pc, #264]	; (8002acc <main+0x328>)
 80029c2:	4b46      	ldr	r3, [pc, #280]	; (8002adc <main+0x338>)
 80029c4:	4615      	mov	r5, r2
 80029c6:	461c      	mov	r4, r3
 80029c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ca:	6028      	str	r0, [r5, #0]
 80029cc:	6069      	str	r1, [r5, #4]
 80029ce:	60aa      	str	r2, [r5, #8]
 80029d0:	60eb      	str	r3, [r5, #12]
 80029d2:	cc03      	ldmia	r4!, {r0, r1}
 80029d4:	6128      	str	r0, [r5, #16]
 80029d6:	6169      	str	r1, [r5, #20]
 80029d8:	8823      	ldrh	r3, [r4, #0]
 80029da:	832b      	strh	r3, [r5, #24]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80029dc:	2364      	movs	r3, #100	; 0x64
 80029de:	2265      	movs	r2, #101	; 0x65
 80029e0:	493a      	ldr	r1, [pc, #232]	; (8002acc <main+0x328>)
 80029e2:	483d      	ldr	r0, [pc, #244]	; (8002ad8 <main+0x334>)
 80029e4:	f005 fcd0 	bl	8008388 <HAL_UART_Transmit>

		  while ( gyro_error ) {	} 		// Endless Loop
 80029e8:	bf00      	nop
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <main+0x324>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1fb      	bne.n	80029ea <main+0x246>
 80029f2:	e016      	b.n	8002a22 <main+0x27e>
	}
	else
	{
		  sprintf(uartTX, "                                                                                                    ");
 80029f4:	4a35      	ldr	r2, [pc, #212]	; (8002acc <main+0x328>)
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <main+0x32c>)
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	2365      	movs	r3, #101	; 0x65
 80029fe:	461a      	mov	r2, r3
 8002a00:	f006 faaa 	bl	8008f58 <memcpy>
		  sprintf(uartTX, "\nOh shit!\n");
 8002a04:	4a31      	ldr	r2, [pc, #196]	; (8002acc <main+0x328>)
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <main+0x33c>)
 8002a08:	cb03      	ldmia	r3!, {r0, r1}
 8002a0a:	6010      	str	r0, [r2, #0]
 8002a0c:	6051      	str	r1, [r2, #4]
 8002a0e:	8819      	ldrh	r1, [r3, #0]
 8002a10:	789b      	ldrb	r3, [r3, #2]
 8002a12:	8111      	strh	r1, [r2, #8]
 8002a14:	7293      	strb	r3, [r2, #10]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002a16:	2364      	movs	r3, #100	; 0x64
 8002a18:	2265      	movs	r2, #101	; 0x65
 8002a1a:	492c      	ldr	r1, [pc, #176]	; (8002acc <main+0x328>)
 8002a1c:	482e      	ldr	r0, [pc, #184]	; (8002ad8 <main+0x334>)
 8002a1e:	f005 fcb3 	bl	8008388 <HAL_UART_Transmit>
	}

	/////////////////////////////////////////////////////////////////////////

	if ( eeprom_data[31] == 92 && gyro_error == false )
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <main+0x2a0>)
 8002a24:	7fdb      	ldrb	r3, [r3, #31]
 8002a26:	2b5c      	cmp	r3, #92	; 0x5c
 8002a28:	f040 80e3 	bne.w	8002bf2 <main+0x44e>
 8002a2c:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <main+0x324>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f083 0301 	eor.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80db 	beq.w	8002bf2 <main+0x44e>
	{
		while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002a3c:	e08c      	b.n	8002b58 <main+0x3b4>
		{
			for (int i = 0; i <= 50000000; i++ )
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	e085      	b.n	8002b50 <main+0x3ac>
 8002a44:	2000007c 	.word	0x2000007c
 8002a48:	0803f800 	.word	0x0803f800
 8002a4c:	2000007d 	.word	0x2000007d
 8002a50:	2000007e 	.word	0x2000007e
 8002a54:	2000007f 	.word	0x2000007f
 8002a58:	20000080 	.word	0x20000080
 8002a5c:	20000081 	.word	0x20000081
 8002a60:	20000082 	.word	0x20000082
 8002a64:	20000083 	.word	0x20000083
 8002a68:	20000084 	.word	0x20000084
 8002a6c:	20000085 	.word	0x20000085
 8002a70:	20000086 	.word	0x20000086
 8002a74:	20000087 	.word	0x20000087
 8002a78:	20000088 	.word	0x20000088
 8002a7c:	20000089 	.word	0x20000089
 8002a80:	2000008a 	.word	0x2000008a
 8002a84:	2000008b 	.word	0x2000008b
 8002a88:	2000008c 	.word	0x2000008c
 8002a8c:	2000008d 	.word	0x2000008d
 8002a90:	2000008e 	.word	0x2000008e
 8002a94:	2000008f 	.word	0x2000008f
 8002a98:	20000090 	.word	0x20000090
 8002a9c:	20000091 	.word	0x20000091
 8002aa0:	20000092 	.word	0x20000092
 8002aa4:	20000093 	.word	0x20000093
 8002aa8:	20000094 	.word	0x20000094
 8002aac:	20000095 	.word	0x20000095
 8002ab0:	20000096 	.word	0x20000096
 8002ab4:	20000097 	.word	0x20000097
 8002ab8:	20000098 	.word	0x20000098
 8002abc:	20000099 	.word	0x20000099
 8002ac0:	2000009a 	.word	0x2000009a
 8002ac4:	2000009b 	.word	0x2000009b
 8002ac8:	2000036b 	.word	0x2000036b
 8002acc:	200002a4 	.word	0x200002a4
 8002ad0:	08009498 	.word	0x08009498
 8002ad4:	08009500 	.word	0x08009500
 8002ad8:	200001f8 	.word	0x200001f8
 8002adc:	08009514 	.word	0x08009514
 8002ae0:	08009530 	.word	0x08009530
			{
				if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <main+0x52c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d12e      	bne.n	8002b4a <main+0x3a6>
 8002aec:	2101      	movs	r1, #1
 8002aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af2:	f001 fa39 	bl	8003f68 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d026      	beq.n	8002b4a <main+0x3a6>
				{
					sprintf(uartTX, "                                                                                                    ");
 8002afc:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <main+0x530>)
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <main+0x534>)
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	2365      	movs	r3, #101	; 0x65
 8002b06:	461a      	mov	r2, r3
 8002b08:	f006 fa26 	bl	8008f58 <memcpy>
					sprintf(uartTX, "\nESC Calibration is starting! Reset after calibration!\n");
 8002b0c:	4b71      	ldr	r3, [pc, #452]	; (8002cd4 <main+0x530>)
 8002b0e:	4a73      	ldr	r2, [pc, #460]	; (8002cdc <main+0x538>)
 8002b10:	4614      	mov	r4, r2
 8002b12:	469c      	mov	ip, r3
 8002b14:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002b18:	4665      	mov	r5, ip
 8002b1a:	4626      	mov	r6, r4
 8002b1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b1e:	6028      	str	r0, [r5, #0]
 8002b20:	6069      	str	r1, [r5, #4]
 8002b22:	60aa      	str	r2, [r5, #8]
 8002b24:	60eb      	str	r3, [r5, #12]
 8002b26:	3410      	adds	r4, #16
 8002b28:	f10c 0c10 	add.w	ip, ip, #16
 8002b2c:	4574      	cmp	r4, lr
 8002b2e:	d1f3      	bne.n	8002b18 <main+0x374>
 8002b30:	4662      	mov	r2, ip
 8002b32:	4623      	mov	r3, r4
 8002b34:	cb03      	ldmia	r3!, {r0, r1}
 8002b36:	6010      	str	r0, [r2, #0]
 8002b38:	6051      	str	r1, [r2, #4]
					HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002b3a:	2364      	movs	r3, #100	; 0x64
 8002b3c:	2265      	movs	r2, #101	; 0x65
 8002b3e:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <main+0x530>)
 8002b40:	4867      	ldr	r0, [pc, #412]	; (8002ce0 <main+0x53c>)
 8002b42:	f005 fc21 	bl	8008388 <HAL_UART_Transmit>

					ESC_Calibration();
 8002b46:	f7fd ff5d 	bl	8000a04 <ESC_Calibration>
			for (int i = 0; i <= 50000000; i++ )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a5f      	ldr	r2, [pc, #380]	; (8002cd0 <main+0x52c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	ddc5      	ble.n	8002ae4 <main+0x340>
		while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002b58:	2101      	movs	r1, #1
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f001 fa03 	bl	8003f68 <HAL_GPIO_ReadPin>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af6a 	bne.w	8002a3e <main+0x29a>
				}
			}
		}


		sprintf(uartTX, "                                                                                                    ");
 8002b6a:	4a5a      	ldr	r2, [pc, #360]	; (8002cd4 <main+0x530>)
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <main+0x534>)
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	2365      	movs	r3, #101	; 0x65
 8002b74:	461a      	mov	r2, r3
 8002b76:	f006 f9ef 	bl	8008f58 <memcpy>
		sprintf(uartTX, "\nFlight Setup is starting!\n");
 8002b7a:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <main+0x530>)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <main+0x540>)
 8002b7e:	4615      	mov	r5, r2
 8002b80:	461c      	mov	r4, r3
 8002b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b84:	6028      	str	r0, [r5, #0]
 8002b86:	6069      	str	r1, [r5, #4]
 8002b88:	60aa      	str	r2, [r5, #8]
 8002b8a:	60eb      	str	r3, [r5, #12]
 8002b8c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002b8e:	6128      	str	r0, [r5, #16]
 8002b90:	6169      	str	r1, [r5, #20]
 8002b92:	61aa      	str	r2, [r5, #24]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002b94:	2364      	movs	r3, #100	; 0x64
 8002b96:	2265      	movs	r2, #101	; 0x65
 8002b98:	494e      	ldr	r1, [pc, #312]	; (8002cd4 <main+0x530>)
 8002b9a:	4851      	ldr	r0, [pc, #324]	; (8002ce0 <main+0x53c>)
 8002b9c:	f005 fbf4 	bl	8008388 <HAL_UART_Transmit>

		Flight_Control_Setup();
 8002ba0:	f7fe f836 	bl	8000c10 <Flight_Control_Setup>

		sprintf(uartTX, "                                                                                                    ");
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <main+0x530>)
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <main+0x534>)
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	2365      	movs	r3, #101	; 0x65
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f006 f9d2 	bl	8008f58 <memcpy>
		sprintf(uartTX, "\nFlight Setup is done! Ready to fly!\n");
 8002bb4:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <main+0x530>)
 8002bb6:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <main+0x544>)
 8002bb8:	4614      	mov	r4, r2
 8002bba:	469c      	mov	ip, r3
 8002bbc:	f104 0e20 	add.w	lr, r4, #32
 8002bc0:	4665      	mov	r5, ip
 8002bc2:	4626      	mov	r6, r4
 8002bc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bc6:	6028      	str	r0, [r5, #0]
 8002bc8:	6069      	str	r1, [r5, #4]
 8002bca:	60aa      	str	r2, [r5, #8]
 8002bcc:	60eb      	str	r3, [r5, #12]
 8002bce:	3410      	adds	r4, #16
 8002bd0:	f10c 0c10 	add.w	ip, ip, #16
 8002bd4:	4574      	cmp	r4, lr
 8002bd6:	d1f3      	bne.n	8002bc0 <main+0x41c>
 8002bd8:	4663      	mov	r3, ip
 8002bda:	4622      	mov	r2, r4
 8002bdc:	6810      	ldr	r0, [r2, #0]
 8002bde:	6018      	str	r0, [r3, #0]
 8002be0:	8892      	ldrh	r2, [r2, #4]
 8002be2:	809a      	strh	r2, [r3, #4]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	2265      	movs	r2, #101	; 0x65
 8002be8:	493a      	ldr	r1, [pc, #232]	; (8002cd4 <main+0x530>)
 8002bea:	483d      	ldr	r0, [pc, #244]	; (8002ce0 <main+0x53c>)
 8002bec:	f005 fbcc 	bl	8008388 <HAL_UART_Transmit>
 8002bf0:	e06c      	b.n	8002ccc <main+0x528>
	}
	else
	{
		setup_error = true;
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <main+0x548>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]

		sprintf(uartTX, "                                                                                                    ");
 8002bf8:	4a36      	ldr	r2, [pc, #216]	; (8002cd4 <main+0x530>)
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <main+0x534>)
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	2365      	movs	r3, #101	; 0x65
 8002c02:	461a      	mov	r2, r3
 8002c04:	f006 f9a8 	bl	8008f58 <memcpy>
		sprintf(uartTX, "\nMain Setup has not been done correctly!\n");
 8002c08:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <main+0x530>)
 8002c0a:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <main+0x54c>)
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	469c      	mov	ip, r3
 8002c10:	f104 0e20 	add.w	lr, r4, #32
 8002c14:	4665      	mov	r5, ip
 8002c16:	4626      	mov	r6, r4
 8002c18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c1a:	6028      	str	r0, [r5, #0]
 8002c1c:	6069      	str	r1, [r5, #4]
 8002c1e:	60aa      	str	r2, [r5, #8]
 8002c20:	60eb      	str	r3, [r5, #12]
 8002c22:	3410      	adds	r4, #16
 8002c24:	f10c 0c10 	add.w	ip, ip, #16
 8002c28:	4574      	cmp	r4, lr
 8002c2a:	d1f3      	bne.n	8002c14 <main+0x470>
 8002c2c:	4662      	mov	r2, ip
 8002c2e:	4623      	mov	r3, r4
 8002c30:	cb03      	ldmia	r3!, {r0, r1}
 8002c32:	6010      	str	r0, [r2, #0]
 8002c34:	6051      	str	r1, [r2, #4]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	8113      	strh	r3, [r2, #8]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002c3a:	2364      	movs	r3, #100	; 0x64
 8002c3c:	2265      	movs	r2, #101	; 0x65
 8002c3e:	4925      	ldr	r1, [pc, #148]	; (8002cd4 <main+0x530>)
 8002c40:	4827      	ldr	r0, [pc, #156]	; (8002ce0 <main+0x53c>)
 8002c42:	f005 fba1 	bl	8008388 <HAL_UART_Transmit>

		while ( setup_error )
 8002c46:	e03d      	b.n	8002cc4 <main+0x520>
		{
			if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002c48:	2101      	movs	r1, #1
 8002c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4e:	f001 f98b 	bl	8003f68 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d035      	beq.n	8002cc4 <main+0x520>
			{
				for (int i = 0; i <= 50000000; i++ )
 8002c58:	2300      	movs	r3, #0
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	e02e      	b.n	8002cbc <main+0x518>
				{
					if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <main+0x52c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d127      	bne.n	8002cb6 <main+0x512>
 8002c66:	2101      	movs	r1, #1
 8002c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c6c:	f001 f97c 	bl	8003f68 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01f      	beq.n	8002cb6 <main+0x512>
					{
						sprintf(uartTX, "                                                                                                    ");
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <main+0x530>)
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <main+0x534>)
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	2365      	movs	r3, #101	; 0x65
 8002c80:	461a      	mov	r2, r3
 8002c82:	f006 f969 	bl	8008f58 <memcpy>
						sprintf(uartTX, "\nSetup is starting..!\n");
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <main+0x530>)
 8002c88:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <main+0x550>)
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	461d      	mov	r5, r3
 8002c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c90:	6020      	str	r0, [r4, #0]
 8002c92:	6061      	str	r1, [r4, #4]
 8002c94:	60a2      	str	r2, [r4, #8]
 8002c96:	60e3      	str	r3, [r4, #12]
 8002c98:	6828      	ldr	r0, [r5, #0]
 8002c9a:	6120      	str	r0, [r4, #16]
 8002c9c:	88ab      	ldrh	r3, [r5, #4]
 8002c9e:	79aa      	ldrb	r2, [r5, #6]
 8002ca0:	82a3      	strh	r3, [r4, #20]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	75a3      	strb	r3, [r4, #22]
						HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002ca6:	2364      	movs	r3, #100	; 0x64
 8002ca8:	2265      	movs	r2, #101	; 0x65
 8002caa:	490a      	ldr	r1, [pc, #40]	; (8002cd4 <main+0x530>)
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <main+0x53c>)
 8002cae:	f005 fb6b 	bl	8008388 <HAL_UART_Transmit>

						Main_Setup( );
 8002cb2:	f7fe fc95 	bl	80015e0 <Main_Setup>
				for (int i = 0; i <= 50000000; i++ )
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <main+0x52c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	ddcc      	ble.n	8002c5e <main+0x4ba>
		while ( setup_error )
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <main+0x548>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1bd      	bne.n	8002c48 <main+0x4a4>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <main+0x528>
 8002cce:	bf00      	nop
 8002cd0:	02faf080 	.word	0x02faf080
 8002cd4:	200002a4 	.word	0x200002a4
 8002cd8:	08009498 	.word	0x08009498
 8002cdc:	0800953c 	.word	0x0800953c
 8002ce0:	200001f8 	.word	0x200001f8
 8002ce4:	08009574 	.word	0x08009574
 8002ce8:	08009590 	.word	0x08009590
 8002cec:	2000036a 	.word	0x2000036a
 8002cf0:	080095b8 	.word	0x080095b8
 8002cf4:	080095e4 	.word	0x080095e4

08002cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09e      	sub	sp, #120	; 0x78
 8002cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d02:	2228      	movs	r2, #40	; 0x28
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f006 f931 	bl	8008f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	223c      	movs	r2, #60	; 0x3c
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 f923 	bl	8008f6e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d36:	2301      	movs	r3, #1
 8002d38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d46:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d4c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 fc3e 	bl	80055d4 <HAL_RCC_OscConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002d5e:	f000 fa1b 	bl	8003198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d62:	230f      	movs	r3, #15
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d66:	2302      	movs	r3, #2
 8002d68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fb30 	bl	80063e4 <HAL_RCC_ClockConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d8a:	f000 fa05 	bl	8003198 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d8e:	2321      	movs	r3, #33	; 0x21
 8002d90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fd57 	bl	8006850 <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002da8:	f000 f9f6 	bl	8003198 <Error_Handler>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3778      	adds	r7, #120	; 0x78
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <MX_I2C1_Init+0x78>)
 8002dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <MX_I2C1_Init+0x7c>)
 8002dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dee:	480e      	ldr	r0, [pc, #56]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002df0:	f001 f8ea 	bl	8003fc8 <HAL_I2C_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002dfa:	f000 f9cd 	bl	8003198 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4809      	ldr	r0, [pc, #36]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002e02:	f002 fb2f 	bl	8005464 <HAL_I2CEx_ConfigAnalogFilter>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e0c:	f000 f9c4 	bl	8003198 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e10:	2100      	movs	r1, #0
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <MX_I2C1_Init+0x74>)
 8002e14:	f002 fb71 	bl	80054fa <HAL_I2CEx_ConfigDigitalFilter>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e1e:	f000 f9bb 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000150 	.word	0x20000150
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	0010020a 	.word	0x0010020a

08002e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e5c:	2247      	movs	r2, #71	; 0x47
 8002e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e68:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002e6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e7a:	4827      	ldr	r0, [pc, #156]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e7c:	f003 ff50 	bl	8006d20 <HAL_TIM_IC_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e86:	f000 f987 	bl	8003198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e92:	f107 0314 	add.w	r3, r7, #20
 8002e96:	4619      	mov	r1, r3
 8002e98:	481f      	ldr	r0, [pc, #124]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002e9a:	f005 f989 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002ea4:	f000 f978 	bl	8003198 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4816      	ldr	r0, [pc, #88]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002ec0:	f004 f957 	bl	8007172 <HAL_TIM_IC_ConfigChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002eca:	f000 f965 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4810      	ldr	r0, [pc, #64]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002ed6:	f004 f94c 	bl	8007172 <HAL_TIM_IC_ConfigChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002ee0:	f000 f95a 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480b      	ldr	r0, [pc, #44]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002eec:	f004 f941 	bl	8007172 <HAL_TIM_IC_ConfigChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002ef6:	f000 f94f 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	220c      	movs	r2, #12
 8002efe:	4619      	mov	r1, r3
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_TIM2_Init+0xe4>)
 8002f02:	f004 f936 	bl	8007172 <HAL_TIM_IC_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002f0c:	f000 f944 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000100 	.word	0x20000100

08002f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	615a      	str	r2, [r3, #20]
 8002f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f50:	4a3e      	ldr	r2, [pc, #248]	; (800304c <MX_TIM3_Init+0x130>)
 8002f52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002f54:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f56:	2248      	movs	r2, #72	; 0x48
 8002f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f62:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f68:	4b37      	ldr	r3, [pc, #220]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f74:	4834      	ldr	r0, [pc, #208]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f76:	f003 fe1b 	bl	8006bb0 <HAL_TIM_Base_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f80:	f000 f90a 	bl	8003198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8e:	4619      	mov	r1, r3
 8002f90:	482d      	ldr	r0, [pc, #180]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002f92:	f004 faa3 	bl	80074dc <HAL_TIM_ConfigClockSource>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f9c:	f000 f8fc 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fa0:	4829      	ldr	r0, [pc, #164]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002fa2:	f003 fe30 	bl	8006c06 <HAL_TIM_PWM_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002fac:	f000 f8f4 	bl	8003198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4822      	ldr	r0, [pc, #136]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002fc0:	f005 f8f6 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002fca:	f000 f8e5 	bl	8003198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fce:	2360      	movs	r3, #96	; 0x60
 8002fd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002fdc:	2304      	movs	r3, #4
 8002fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4818      	ldr	r0, [pc, #96]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002fe8:	f004 f960 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002ff2:	f000 f8d1 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4812      	ldr	r0, [pc, #72]	; (8003048 <MX_TIM3_Init+0x12c>)
 8002ffe:	f004 f955 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003008:	f000 f8c6 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	2208      	movs	r2, #8
 8003010:	4619      	mov	r1, r3
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_TIM3_Init+0x12c>)
 8003014:	f004 f94a 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800301e:	f000 f8bb 	bl	8003198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003022:	463b      	mov	r3, r7
 8003024:	220c      	movs	r2, #12
 8003026:	4619      	mov	r1, r3
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <MX_TIM3_Init+0x12c>)
 800302a:	f004 f93f 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8003034:	f000 f8b0 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003038:	4803      	ldr	r0, [pc, #12]	; (8003048 <MX_TIM3_Init+0x12c>)
 800303a:	f000 f9a3 	bl	8003384 <HAL_TIM_MspPostInit>

}
 800303e:	bf00      	nop
 8003040:	3738      	adds	r7, #56	; 0x38
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200000b8 	.word	0x200000b8
 800304c:	40000400 	.word	0x40000400

08003050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003056:	4a15      	ldr	r2, [pc, #84]	; (80030ac <MX_USART1_UART_Init+0x5c>)
 8003058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 800305c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003076:	220c      	movs	r2, #12
 8003078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_USART1_UART_Init+0x58>)
 8003094:	f005 f92a 	bl	80082ec <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800309e:	f000 f87b 	bl	8003198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200001f8 	.word	0x200001f8
 80030ac:	40013800 	.word	0x40013800

080030b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <MX_GPIO_Init+0xdc>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4a30      	ldr	r2, [pc, #192]	; (800318c <MX_GPIO_Init+0xdc>)
 80030cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <MX_GPIO_Init+0xdc>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <MX_GPIO_Init+0xdc>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4a2a      	ldr	r2, [pc, #168]	; (800318c <MX_GPIO_Init+0xdc>)
 80030e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030e8:	6153      	str	r3, [r2, #20]
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <MX_GPIO_Init+0xdc>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <MX_GPIO_Init+0xdc>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4a24      	ldr	r2, [pc, #144]	; (800318c <MX_GPIO_Init+0xdc>)
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003100:	6153      	str	r3, [r2, #20]
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <MX_GPIO_Init+0xdc>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <MX_GPIO_Init+0xdc>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4a1e      	ldr	r2, [pc, #120]	; (800318c <MX_GPIO_Init+0xdc>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003118:	6153      	str	r3, [r2, #20]
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <MX_GPIO_Init+0xdc>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800312c:	4818      	ldr	r0, [pc, #96]	; (8003190 <MX_GPIO_Init+0xe0>)
 800312e:	f000 ff33 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003132:	2301      	movs	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <MX_GPIO_Init+0xe4>)
 8003138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003148:	f000 fd94 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800314c:	2304      	movs	r3, #4
 800314e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4619      	mov	r1, r3
 800315e:	480c      	ldr	r0, [pc, #48]	; (8003190 <MX_GPIO_Init+0xe0>)
 8003160:	f000 fd88 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4619      	mov	r1, r3
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <MX_GPIO_Init+0xe0>)
 800317e:	f000 fd79 	bl	8003c74 <HAL_GPIO_Init>

}
 8003182:	bf00      	nop
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	48000400 	.word	0x48000400
 8003194:	10120000 	.word	0x10120000

08003198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_MspInit+0x44>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_MspInit+0x44>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6193      	str	r3, [r2, #24]
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_MspInit+0x44>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_MspInit+0x44>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a08      	ldr	r2, [pc, #32]	; (80031ec <HAL_MspInit+0x44>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	61d3      	str	r3, [r2, #28]
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_MspInit+0x44>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_I2C_MspInit+0xac>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d13f      	bne.n	8003292 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <HAL_I2C_MspInit+0xb0>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <HAL_I2C_MspInit+0xb0>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6153      	str	r3, [r2, #20]
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_I2C_MspInit+0xb0>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800322e:	2312      	movs	r3, #18
 8003230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800323a:	2304      	movs	r3, #4
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	4817      	ldr	r0, [pc, #92]	; (80032a4 <HAL_I2C_MspInit+0xb4>)
 8003246:	f000 fd15 	bl	8003c74 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 800324a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800324e:	f002 f9a1 	bl	8005594 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8003252:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003256:	f002 f99d 	bl	8005594 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_I2C_MspInit+0xb0>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <HAL_I2C_MspInit+0xb0>)
 8003260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003264:	61d3      	str	r3, [r2, #28]
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_I2C_MspInit+0xb0>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	201f      	movs	r0, #31
 8003278:	f000 fb27 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800327c:	201f      	movs	r0, #31
 800327e:	f000 fb40 	bl	8003902 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2020      	movs	r0, #32
 8003288:	f000 fb1f 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800328c:	2020      	movs	r0, #32
 800328e:	f000 fb38 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40005400 	.word	0x40005400
 80032a0:	40021000 	.word	0x40021000
 80032a4:	48000400 	.word	0x48000400

080032a8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d130      	bne.n	800332c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_TIM_IC_MspInit+0x8c>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_TIM_IC_MspInit+0x8c>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	61d3      	str	r3, [r2, #28]
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_TIM_IC_MspInit+0x8c>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_TIM_IC_MspInit+0x8c>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_TIM_IC_MspInit+0x8c>)
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	6153      	str	r3, [r2, #20]
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_TIM_IC_MspInit+0x8c>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80032fa:	232e      	movs	r3, #46	; 0x2e
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003318:	f000 fcac 	bl	8003c74 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	201c      	movs	r0, #28
 8003322:	f000 fad2 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003326:	201c      	movs	r0, #28
 8003328:	f000 faeb 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800332c:	bf00      	nop
 800332e:	3728      	adds	r7, #40	; 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_TIM_Base_MspInit+0x44>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d113      	bne.n	8003372 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_TIM_Base_MspInit+0x48>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_TIM_Base_MspInit+0x48>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	61d3      	str	r3, [r2, #28]
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_TIM_Base_MspInit+0x48>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	201d      	movs	r0, #29
 8003368:	f000 faaf 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800336c:	201d      	movs	r0, #29
 800336e:	f000 fac8 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40000400 	.word	0x40000400
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_TIM_MspPostInit+0x9c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d138      	bne.n	8003418 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <HAL_TIM_MspPostInit+0xa0>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_TIM_MspPostInit+0xa0>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	6153      	str	r3, [r2, #20]
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <HAL_TIM_MspPostInit+0xa0>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_TIM_MspPostInit+0xa0>)
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_TIM_MspPostInit+0xa0>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6153      	str	r3, [r2, #20]
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_TIM_MspPostInit+0xa0>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033d6:	23c0      	movs	r3, #192	; 0xc0
 80033d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033e2:	2303      	movs	r3, #3
 80033e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033e6:	2302      	movs	r3, #2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f4:	f000 fc3e 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033f8:	2303      	movs	r3, #3
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003408:	2302      	movs	r3, #2
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	4805      	ldr	r0, [pc, #20]	; (8003428 <HAL_TIM_MspPostInit+0xa4>)
 8003414:	f000 fc2e 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003418:	bf00      	nop
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40000400 	.word	0x40000400
 8003424:	40021000 	.word	0x40021000
 8003428:	48000400 	.word	0x48000400

0800342c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_UART_MspInit+0x90>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d131      	bne.n	80034b2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_UART_MspInit+0x94>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_UART_MspInit+0x94>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003458:	6193      	str	r3, [r2, #24]
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_UART_MspInit+0x94>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_UART_MspInit+0x94>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <HAL_UART_MspInit+0x94>)
 800346c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003470:	6153      	str	r3, [r2, #20]
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_UART_MspInit+0x94>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800347e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003490:	2307      	movs	r3, #7
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349e:	f000 fbe9 	bl	8003c74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	2025      	movs	r0, #37	; 0x25
 80034a8:	f000 fa0f 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034ac:	2025      	movs	r0, #37	; 0x25
 80034ae:	f000 fa28 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034b2:	bf00      	nop
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40021000 	.word	0x40021000

080034c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d6:	e7fe      	b.n	80034d6 <HardFault_Handler+0x4>

080034d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034dc:	e7fe      	b.n	80034dc <MemManage_Handler+0x4>

080034de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e2:	e7fe      	b.n	80034e2 <BusFault_Handler+0x4>

080034e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <UsageFault_Handler+0x4>

080034ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003518:	f000 f8ba 	bl	8003690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}

08003520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <TIM2_IRQHandler+0x10>)
 8003526:	f003 fd05 	bl	8006f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000100 	.word	0x20000100

08003534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <TIM3_IRQHandler+0x10>)
 800353a:	f003 fcfb 	bl	8006f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200000b8 	.word	0x200000b8

08003548 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <I2C1_EV_IRQHandler+0x10>)
 800354e:	f000 fff9 	bl	8004544 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000150 	.word	0x20000150

0800355c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <I2C1_ER_IRQHandler+0x10>)
 8003562:	f001 f809 	bl	8004578 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000150 	.word	0x20000150

08003570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <USART1_IRQHandler+0x10>)
 8003576:	f004 ff9b 	bl	80084b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200001f8 	.word	0x200001f8

08003584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <SystemInit+0x28>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	4a07      	ldr	r2, [pc, #28]	; (80035ac <SystemInit+0x28>)
 8003590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SystemInit+0x28>)
 800359a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800359e:	609a      	str	r2, [r3, #8]
#endif
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035b6:	e003      	b.n	80035c0 <LoopCopyDataInit>

080035b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035be:	3104      	adds	r1, #4

080035c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035c0:	480b      	ldr	r0, [pc, #44]	; (80035f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80035c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035c8:	d3f6      	bcc.n	80035b8 <CopyDataInit>
	ldr	r2, =_sbss
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035cc:	e002      	b.n	80035d4 <LoopFillZerobss>

080035ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035d0:	f842 3b04 	str.w	r3, [r2], #4

080035d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <LoopForever+0x16>)
	cmp	r2, r3
 80035d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035d8:	d3f9      	bcc.n	80035ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035da:	f7ff ffd3 	bl	8003584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035de:	f005 fc97 	bl	8008f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035e2:	f7ff f8df 	bl	80027a4 <main>

080035e6 <LoopForever>:

LoopForever:
    b LoopForever
 80035e6:	e7fe      	b.n	80035e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035e8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80035ec:	0800963c 	.word	0x0800963c
	ldr	r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035f4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80035f8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80035fc:	200003c0 	.word	0x200003c0

08003600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC1_2_IRQHandler>
	...

08003604 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_Init+0x28>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_Init+0x28>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f94d 	bl	80038b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	2000      	movs	r0, #0
 800361c:	f000 f808 	bl	8003630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003620:	f7ff fdc2 	bl	80031a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_InitTick+0x54>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_InitTick+0x58>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003646:	fbb3 f3f1 	udiv	r3, r3, r1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f965 	bl	800391e <HAL_SYSTICK_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00e      	b.n	800367c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d80a      	bhi.n	800367a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003664:	2200      	movs	r2, #0
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f000 f92d 	bl	80038ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003670:	4a06      	ldr	r2, [pc, #24]	; (800368c <HAL_InitTick+0x5c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000004 	.word	0x20000004
 8003688:	2000000c 	.word	0x2000000c
 800368c:	20000008 	.word	0x20000008

08003690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_IncTick+0x20>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_IncTick+0x24>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_IncTick+0x24>)
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	20000398 	.word	0x20000398

080036b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_GetTick+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000398 	.word	0x20000398

080036d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7ff ffee 	bl	80036b8 <HAL_GetTick>
 80036dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d005      	beq.n	80036f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_Delay+0x40>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80036f6:	bf00      	nop
 80036f8:	f7ff ffde 	bl	80036b8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d8f7      	bhi.n	80036f8 <HAL_Delay+0x28>
  {
  }
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	2000000c 	.word	0x2000000c

08003714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800373c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	60d3      	str	r3, [r2, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <__NVIC_GetPriorityGrouping+0x18>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f003 0307 	and.w	r3, r3, #7
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	2b00      	cmp	r3, #0
 8003788:	db0b      	blt.n	80037a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <__NVIC_EnableIRQ+0x38>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2001      	movs	r0, #1
 800379a:	fa00 f202 	lsl.w	r2, r0, r2
 800379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e100 	.word	0xe000e100

080037b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db0a      	blt.n	80037de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <__NVIC_SetPriority+0x4c>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037dc:	e00a      	b.n	80037f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <__NVIC_SetPriority+0x50>)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3b04      	subs	r3, #4
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	440b      	add	r3, r1
 80037f2:	761a      	strb	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e100 	.word	0xe000e100
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf28      	it	cs
 8003826:	2304      	movcs	r3, #4
 8003828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3304      	adds	r3, #4
 800382e:	2b06      	cmp	r3, #6
 8003830:	d902      	bls.n	8003838 <NVIC_EncodePriority+0x30>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3b03      	subs	r3, #3
 8003836:	e000      	b.n	800383a <NVIC_EncodePriority+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43d9      	mvns	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	4313      	orrs	r3, r2
         );
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003880:	d301      	bcc.n	8003886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003882:	2301      	movs	r3, #1
 8003884:	e00f      	b.n	80038a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003886:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <SysTick_Config+0x40>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388e:	210f      	movs	r1, #15
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f7ff ff8e 	bl	80037b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <SysTick_Config+0x40>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389e:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <SysTick_Config+0x40>)
 80038a0:	2207      	movs	r2, #7
 80038a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000e010 	.word	0xe000e010

080038b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff29 	bl	8003714 <__NVIC_SetPriorityGrouping>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038dc:	f7ff ff3e 	bl	800375c <__NVIC_GetPriorityGrouping>
 80038e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7ff ff8e 	bl	8003808 <NVIC_EncodePriority>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff5d 	bl	80037b4 <__NVIC_SetPriority>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff31 	bl	8003778 <__NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffa2 	bl	8003870 <SysTick_Config>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003948:	2b02      	cmp	r3, #2
 800394a:	d005      	beq.n	8003958 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2204      	movs	r2, #4
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e027      	b.n	80039a8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 020e 	bic.w	r2, r2, #14
 8003966:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
    } 
  }
  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80039cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_FLASH_Program+0xd8>)
 80039e8:	7e1b      	ldrb	r3, [r3, #24]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_FLASH_Program+0x26>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e054      	b.n	8003a9c <HAL_FLASH_Program+0xd0>
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_FLASH_Program+0xd8>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039fc:	f000 f8a8 	bl	8003b50 <FLASH_WaitForLastOperation>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d144      	bne.n	8003a94 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d102      	bne.n	8003a16 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003a10:	2301      	movs	r3, #1
 8003a12:	757b      	strb	r3, [r7, #21]
 8003a14:	e007      	b.n	8003a26 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d102      	bne.n	8003a22 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	757b      	strb	r3, [r7, #21]
 8003a20:	e001      	b.n	8003a26 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003a22:	2304      	movs	r3, #4
 8003a24:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	75bb      	strb	r3, [r7, #22]
 8003a2a:	e02d      	b.n	8003a88 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003a2c:	7dbb      	ldrb	r3, [r7, #22]
 8003a2e:	005a      	lsls	r2, r3, #1
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	eb02 0c03 	add.w	ip, r2, r3
 8003a36:	7dbb      	ldrb	r3, [r7, #22]
 8003a38:	0119      	lsls	r1, r3, #4
 8003a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a3e:	f1c1 0620 	rsb	r6, r1, #32
 8003a42:	f1a1 0020 	sub.w	r0, r1, #32
 8003a46:	fa22 f401 	lsr.w	r4, r2, r1
 8003a4a:	fa03 f606 	lsl.w	r6, r3, r6
 8003a4e:	4334      	orrs	r4, r6
 8003a50:	fa23 f000 	lsr.w	r0, r3, r0
 8003a54:	4304      	orrs	r4, r0
 8003a56:	fa23 f501 	lsr.w	r5, r3, r1
 8003a5a:	b2a3      	uxth	r3, r4
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4660      	mov	r0, ip
 8003a60:	f000 f85a 	bl	8003b18 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a68:	f000 f872 	bl	8003b50 <FLASH_WaitForLastOperation>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_FLASH_Program+0xdc>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <HAL_FLASH_Program+0xdc>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d107      	bne.n	8003a92 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003a82:	7dbb      	ldrb	r3, [r7, #22]
 8003a84:	3301      	adds	r3, #1
 8003a86:	75bb      	strb	r3, [r7, #22]
 8003a88:	7dba      	ldrb	r2, [r7, #22]
 8003a8a:	7d7b      	ldrb	r3, [r7, #21]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3cd      	bcc.n	8003a2c <HAL_FLASH_Program+0x60>
 8003a90:	e000      	b.n	8003a94 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003a92:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_FLASH_Program+0xd8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	761a      	strb	r2, [r3, #24]

  return status;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa4:	200003a0 	.word	0x200003a0
 8003aa8:	40022000 	.word	0x40022000

08003aac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_FLASH_Unlock+0x40>)
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_FLASH_Unlock+0x40>)
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HAL_FLASH_Unlock+0x44>)
 8003ac6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_FLASH_Unlock+0x40>)
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_FLASH_Unlock+0x48>)
 8003acc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_FLASH_Unlock+0x40>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ade:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40022000 	.word	0x40022000
 8003af0:	45670123 	.word	0x45670123
 8003af4:	cdef89ab 	.word	0xcdef89ab

08003af8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_FLASH_Lock+0x1c>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_FLASH_Lock+0x1c>)
 8003b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b06:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40022000 	.word	0x40022000

08003b18 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <FLASH_Program_HalfWord+0x30>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <FLASH_Program_HalfWord+0x34>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <FLASH_Program_HalfWord+0x34>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	887a      	ldrh	r2, [r7, #2]
 8003b3a:	801a      	strh	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	200003a0 	.word	0x200003a0
 8003b4c:	40022000 	.word	0x40022000

08003b50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff fdae 	bl	80036b8 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003b5e:	e010      	b.n	8003b82 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d00c      	beq.n	8003b82 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <FLASH_WaitForLastOperation+0x2e>
 8003b6e:	f7ff fda3 	bl	80036b8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d201      	bcs.n	8003b82 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e01f      	b.n	8003bc2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <FLASH_WaitForLastOperation+0x7c>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d0e8      	beq.n	8003b60 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <FLASH_WaitForLastOperation+0x7c>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d102      	bne.n	8003ba0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <FLASH_WaitForLastOperation+0x7c>)
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <FLASH_WaitForLastOperation+0x7c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d005      	beq.n	8003bb8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <FLASH_WaitForLastOperation+0x7c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d103      	bne.n	8003bc0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003bb8:	f000 f80a 	bl	8003bd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40022000 	.word	0x40022000

08003bd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <FLASH_SetErrorCode+0x5c>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d109      	bne.n	8003bfa <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <FLASH_SetErrorCode+0x60>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <FLASH_SetErrorCode+0x60>)
 8003bf0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <FLASH_SetErrorCode+0x5c>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d109      	bne.n	8003c1a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <FLASH_SetErrorCode+0x60>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <FLASH_SetErrorCode+0x60>)
 8003c10:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <FLASH_SetErrorCode+0x5c>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60d3      	str	r3, [r2, #12]
}  
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40022000 	.word	0x40022000
 8003c30:	200003a0 	.word	0x200003a0

08003c34 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <FLASH_PageErase+0x38>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <FLASH_PageErase+0x3c>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <FLASH_PageErase+0x3c>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <FLASH_PageErase+0x3c>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <FLASH_PageErase+0x3c>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <FLASH_PageErase+0x3c>)
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5e:	6113      	str	r3, [r2, #16]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	200003a0 	.word	0x200003a0
 8003c70:	40022000 	.word	0x40022000

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c82:	e154      	b.n	8003f2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	4013      	ands	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8146 	beq.w	8003f28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d00b      	beq.n	8003cbc <HAL_GPIO_Init+0x48>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d007      	beq.n	8003cbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cb0:	2b11      	cmp	r3, #17
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b12      	cmp	r3, #18
 8003cba:	d130      	bne.n	8003d1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 0201 	and.w	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0xea>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d123      	bne.n	8003da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	6939      	ldr	r1, [r7, #16]
 8003da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	2203      	movs	r2, #3
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0203 	and.w	r2, r3, #3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a0 	beq.w	8003f28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de8:	4b58      	ldr	r3, [pc, #352]	; (8003f4c <HAL_GPIO_Init+0x2d8>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4a57      	ldr	r2, [pc, #348]	; (8003f4c <HAL_GPIO_Init+0x2d8>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6193      	str	r3, [r2, #24]
 8003df4:	4b55      	ldr	r3, [pc, #340]	; (8003f4c <HAL_GPIO_Init+0x2d8>)
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e00:	4a53      	ldr	r2, [pc, #332]	; (8003f50 <HAL_GPIO_Init+0x2dc>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e2a:	d019      	beq.n	8003e60 <HAL_GPIO_Init+0x1ec>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a49      	ldr	r2, [pc, #292]	; (8003f54 <HAL_GPIO_Init+0x2e0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_GPIO_Init+0x1e8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a48      	ldr	r2, [pc, #288]	; (8003f58 <HAL_GPIO_Init+0x2e4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00d      	beq.n	8003e58 <HAL_GPIO_Init+0x1e4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a47      	ldr	r2, [pc, #284]	; (8003f5c <HAL_GPIO_Init+0x2e8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <HAL_GPIO_Init+0x1e0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a46      	ldr	r2, [pc, #280]	; (8003f60 <HAL_GPIO_Init+0x2ec>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d101      	bne.n	8003e50 <HAL_GPIO_Init+0x1dc>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e008      	b.n	8003e62 <HAL_GPIO_Init+0x1ee>
 8003e50:	2305      	movs	r3, #5
 8003e52:	e006      	b.n	8003e62 <HAL_GPIO_Init+0x1ee>
 8003e54:	2303      	movs	r3, #3
 8003e56:	e004      	b.n	8003e62 <HAL_GPIO_Init+0x1ee>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e002      	b.n	8003e62 <HAL_GPIO_Init+0x1ee>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_GPIO_Init+0x1ee>
 8003e60:	2300      	movs	r3, #0
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	f002 0203 	and.w	r2, r2, #3
 8003e68:	0092      	lsls	r2, r2, #2
 8003e6a:	4093      	lsls	r3, r2
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e72:	4937      	ldr	r1, [pc, #220]	; (8003f50 <HAL_GPIO_Init+0x2dc>)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	3302      	adds	r3, #2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ea4:	4a2f      	ldr	r2, [pc, #188]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003eaa:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ece:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003efe:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f aea3 	bne.w	8003c84 <HAL_GPIO_Init+0x10>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40010000 	.word	0x40010000
 8003f54:	48000400 	.word	0x48000400
 8003f58:	48000800 	.word	0x48000800
 8003f5c:	48000c00 	.word	0x48000c00
 8003f60:	48001000 	.word	0x48001000
 8003f64:	40010400 	.word	0x40010400

08003f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa8:	787b      	ldrb	r3, [r7, #1]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e081      	b.n	80040de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff f8fe 	bl	80031f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e006      	b.n	8004050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800404e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	ea42 0103 	orr.w	r1, r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	460b      	mov	r3, r1
 80040fc:	813b      	strh	r3, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 80f9 	bne.w	8004302 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_I2C_Mem_Write+0x34>
 8004116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004122:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0ed      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x4e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0e6      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800413e:	f7ff fabb 	bl	80036b8 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 ffd8 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0d1      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2221      	movs	r2, #33	; 0x21
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004188:	88f8      	ldrh	r0, [r7, #6]
 800418a:	893a      	ldrh	r2, [r7, #8]
 800418c:	8979      	ldrh	r1, [r7, #10]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4603      	mov	r3, r0
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fb91 	bl	80048c0 <I2C_RequestMemoryWrite>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0a9      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2bff      	cmp	r3, #255	; 0xff
 80041b8:	d90e      	bls.n	80041d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	; 0xff
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f001 f8bb 	bl	800534c <I2C_TransferConfig>
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 f8aa 	bl	800534c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 ffc2 	bl	8005186 <I2C_WaitOnTXISFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e07b      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d034      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d130      	bne.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 ff54 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e04d      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2bff      	cmp	r3, #255	; 0xff
 8004270:	d90e      	bls.n	8004290 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f001 f85f 	bl	800534c <I2C_TransferConfig>
 800428e:	e00f      	b.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	8979      	ldrh	r1, [r7, #10]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f001 f84e 	bl	800534c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d19e      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 ffa1 	bl	8005206 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e01a      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_I2C_Mem_Write+0x224>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b20      	cmp	r3, #32
 8004334:	f040 80fd 	bne.w	8004532 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_I2C_Mem_Read+0x34>
 800433e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0f1      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_I2C_Mem_Read+0x4e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ea      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004366:	f7ff f9a7 	bl	80036b8 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2319      	movs	r3, #25
 8004372:	2201      	movs	r2, #1
 8004374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fec4 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0d5      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2222      	movs	r2, #34	; 0x22
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b0:	88f8      	ldrh	r0, [r7, #6]
 80043b2:	893a      	ldrh	r2, [r7, #8]
 80043b4:	8979      	ldrh	r1, [r7, #10]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4603      	mov	r3, r0
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fad1 	bl	8004968 <I2C_RequestMemoryRead>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0ad      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2bff      	cmp	r3, #255	; 0xff
 80043e0:	d90e      	bls.n	8004400 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	8979      	ldrh	r1, [r7, #10]
 80043f0:	4b52      	ldr	r3, [pc, #328]	; (800453c <HAL_I2C_Mem_Read+0x22c>)
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 ffa7 	bl	800534c <I2C_TransferConfig>
 80043fe:	e00f      	b.n	8004420 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	b2da      	uxtb	r2, r3
 8004410:	8979      	ldrh	r1, [r7, #10]
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_I2C_Mem_Read+0x22c>)
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 ff96 	bl	800534c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	2104      	movs	r1, #4
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fe6b 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07c      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d034      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d130      	bne.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fe3c 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e04d      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2bff      	cmp	r3, #255	; 0xff
 80044a0:	d90e      	bls.n	80044c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 ff47 	bl	800534c <I2C_TransferConfig>
 80044be:	e00f      	b.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 ff36 	bl	800534c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d19a      	bne.n	8004420 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fe89 	bl	8005206 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e01a      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2220      	movs	r2, #32
 8004504:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_I2C_Mem_Read+0x230>)
 8004512:	400b      	ands	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	80002400 	.word	0x80002400
 8004540:	fe00e800 	.word	0xfe00e800

08004544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
  }
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d010      	beq.n	80045be <HAL_I2C_ER_IRQHandler+0x46>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	0a9b      	lsrs	r3, r3, #10
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_I2C_ER_IRQHandler+0x74>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	0a5b      	lsrs	r3, r3, #9
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_I2C_ER_IRQHandler+0xa2>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	09db      	lsrs	r3, r3, #7
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	f043 0202 	orr.w	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004618:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 030b 	and.w	r3, r3, #11
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fc31 	bl	8004e94 <I2C_ITError>
  }
}
 8004632:	bf00      	nop
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	70fb      	strb	r3, [r7, #3]
 800466e:	4613      	mov	r3, r2
 8004670:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <I2C_Slave_ISR_IT+0x24>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0ec      	b.n	80048b8 <I2C_Slave_ISR_IT+0x1fe>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <I2C_Slave_ISR_IT+0x4c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fa67 	bl	8004bd4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04d      	beq.n	80047ae <I2C_Slave_ISR_IT+0xf4>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d047      	beq.n	80047ae <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d128      	bne.n	800477a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b28      	cmp	r3, #40	; 0x28
 8004732:	d108      	bne.n	8004746 <I2C_Slave_ISR_IT+0x8c>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473a:	d104      	bne.n	8004746 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fb52 	bl	8004de8 <I2C_ITListenCplt>
 8004744:	e032      	b.n	80047ac <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b29      	cmp	r3, #41	; 0x29
 8004750:	d10e      	bne.n	8004770 <I2C_Slave_ISR_IT+0xb6>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004758:	d00a      	beq.n	8004770 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2210      	movs	r2, #16
 8004760:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fc8d 	bl	8005082 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f9d5 	bl	8004b18 <I2C_ITSlaveSeqCplt>
 800476e:	e01d      	b.n	80047ac <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2210      	movs	r2, #16
 8004776:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004778:	e096      	b.n	80048a8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2210      	movs	r2, #16
 8004780:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f043 0204 	orr.w	r2, r3, #4
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <I2C_Slave_ISR_IT+0xe4>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800479a:	f040 8085 	bne.w	80048a8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	4619      	mov	r1, r3
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fb75 	bl	8004e94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80047aa:	e07d      	b.n	80048a8 <I2C_Slave_ISR_IT+0x1ee>
 80047ac:	e07c      	b.n	80048a8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d030      	beq.n	800481c <I2C_Slave_ISR_IT+0x162>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02a      	beq.n	800481c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d14f      	bne.n	80048ac <I2C_Slave_ISR_IT+0x1f2>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004812:	d04b      	beq.n	80048ac <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f97f 	bl	8004b18 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800481a:	e047      	b.n	80048ac <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	08db      	lsrs	r3, r3, #3
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	08db      	lsrs	r3, r3, #3
 800482c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004834:	6939      	ldr	r1, [r7, #16]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8ea 	bl	8004a10 <I2C_ITAddrCplt>
 800483c:	e037      	b.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d031      	beq.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d02b      	beq.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d018      	beq.n	8004892 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004890:	e00d      	b.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004898:	d002      	beq.n	80048a0 <I2C_Slave_ISR_IT+0x1e6>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f939 	bl	8004b18 <I2C_ITSlaveSeqCplt>
 80048a6:	e002      	b.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80048ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	460b      	mov	r3, r1
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	8979      	ldrh	r1, [r7, #10]
 80048e0:	4b20      	ldr	r3, [pc, #128]	; (8004964 <I2C_RequestMemoryWrite+0xa4>)
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fd2f 	bl	800534c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fc47 	bl	8005186 <I2C_WaitOnTXISFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e02c      	b.n	800495c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
 8004912:	e015      	b.n	8004940 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004914:	893b      	ldrh	r3, [r7, #8]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fc2d 	bl	8005186 <I2C_WaitOnTXISFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e012      	b.n	800495c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004936:	893b      	ldrh	r3, [r7, #8]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2200      	movs	r2, #0
 8004948:	2180      	movs	r1, #128	; 0x80
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fbdb 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	80002000 	.word	0x80002000

08004968 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	4608      	mov	r0, r1
 8004972:	4611      	mov	r1, r2
 8004974:	461a      	mov	r2, r3
 8004976:	4603      	mov	r3, r0
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	460b      	mov	r3, r1
 800497c:	813b      	strh	r3, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <I2C_RequestMemoryRead+0xa4>)
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2300      	movs	r3, #0
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fcdc 	bl	800534c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fbf4 	bl	8005186 <I2C_WaitOnTXISFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e02c      	b.n	8004a02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
 80049b8:	e015      	b.n	80049e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ba:	893b      	ldrh	r3, [r7, #8]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	b29b      	uxth	r3, r3
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fbda 	bl	8005186 <I2C_WaitOnTXISFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e012      	b.n	8004a02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049dc:	893b      	ldrh	r3, [r7, #8]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2140      	movs	r1, #64	; 0x40
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fb88 	bl	8005106 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	80002000 	.word	0x80002000

08004a10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a26:	2b28      	cmp	r3, #40	; 0x28
 8004a28:	d16a      	bne.n	8004b00 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d138      	bne.n	8004ae0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	09db      	lsrs	r3, r3, #7
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	89bb      	ldrh	r3, [r7, #12]
 8004a76:	4053      	eors	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f003 0306 	and.w	r3, r3, #6
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11c      	bne.n	8004abc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d13b      	bne.n	8004b10 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004aae:	89ba      	ldrh	r2, [r7, #12]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fdd4 	bl	8004662 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004aba:	e029      	b.n	8004b10 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fc6f 	bl	80053a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ad2:	89ba      	ldrh	r2, [r7, #12]
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fdc2 	bl	8004662 <HAL_I2C_AddrCallback>
}
 8004ade:	e017      	b.n	8004b10 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fc5f 	bl	80053a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004af2:	89ba      	ldrh	r2, [r7, #12]
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fdb2 	bl	8004662 <HAL_I2C_AddrCallback>
}
 8004afe:	e007      	b.n	8004b10 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2208      	movs	r2, #8
 8004b06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	0b9b      	lsrs	r3, r3, #14
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e00d      	b.n	8004b6a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0bdb      	lsrs	r3, r3, #15
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b29      	cmp	r3, #41	; 0x29
 8004b74:	d112      	bne.n	8004b9c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2228      	movs	r2, #40	; 0x28
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2221      	movs	r2, #33	; 0x21
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b84:	2101      	movs	r1, #1
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fc0e 	bl	80053a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fd50 	bl	800463a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b9a:	e017      	b.n	8004bcc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba6:	d111      	bne.n	8004bcc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2228      	movs	r2, #40	; 0x28
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2222      	movs	r2, #34	; 0x22
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fbf5 	bl	80053a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fd41 	bl	800464e <HAL_I2C_SlaveRxCpltCallback>
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b21      	cmp	r3, #33	; 0x21
 8004bfe:	d002      	beq.n	8004c06 <I2C_ITSlaveCplt+0x32>
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b29      	cmp	r3, #41	; 0x29
 8004c04:	d108      	bne.n	8004c18 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c06:	f248 0101 	movw	r1, #32769	; 0x8001
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fbcc 	bl	80053a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2221      	movs	r2, #33	; 0x21
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
 8004c16:	e00d      	b.n	8004c34 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b22      	cmp	r3, #34	; 0x22
 8004c1c:	d002      	beq.n	8004c24 <I2C_ITSlaveCplt+0x50>
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b2a      	cmp	r3, #42	; 0x2a
 8004c22:	d107      	bne.n	8004c34 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c24:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fbbd 	bl	80053a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2222      	movs	r2, #34	; 0x22
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b64      	ldr	r3, [pc, #400]	; (8004de0 <I2C_ITSlaveCplt+0x20c>)
 8004c50:	400b      	ands	r3, r1
 8004c52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa14 	bl	8005082 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	0b9b      	lsrs	r3, r3, #14
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c8c:	e018      	b.n	8004cc0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	0bdb      	lsrs	r3, r3, #15
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0304 	bic.w	r3, r3, #4
 8004cd2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00c      	beq.n	8004d0e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f8a7 	bl	8004e94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b28      	cmp	r3, #40	; 0x28
 8004d50:	d141      	bne.n	8004dd6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f847 	bl	8004de8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d5a:	e03c      	b.n	8004dd6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d64:	d014      	beq.n	8004d90 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fed6 	bl	8004b18 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <I2C_ITSlaveCplt+0x210>)
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff fc78 	bl	800467e <HAL_I2C_ListenCpltCallback>
}
 8004d8e:	e022      	b.n	8004dd6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b22      	cmp	r3, #34	; 0x22
 8004d9a:	d10e      	bne.n	8004dba <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fc4b 	bl	800464e <HAL_I2C_SlaveRxCpltCallback>
}
 8004db8:	e00d      	b.n	8004dd6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff fc32 	bl	800463a <HAL_I2C_SlaveTxCpltCallback>
}
 8004dd6:	bf00      	nop
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	fe00e800 	.word	0xfe00e800
 8004de4:	ffff0000 	.word	0xffff0000

08004de8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <I2C_ITListenCplt+0xa8>)
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d022      	beq.n	8004e66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f043 0204 	orr.w	r2, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e66:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa9c 	bl	80053a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2210      	movs	r2, #16
 8004e76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fbfc 	bl	800467e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	ffff0000 	.word	0xffff0000

08004e94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a5d      	ldr	r2, [pc, #372]	; (8005028 <I2C_ITError+0x194>)
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b28      	cmp	r3, #40	; 0x28
 8004eca:	d005      	beq.n	8004ed8 <I2C_ITError+0x44>
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b29      	cmp	r3, #41	; 0x29
 8004ed0:	d002      	beq.n	8004ed8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed6:	d10b      	bne.n	8004ef0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ed8:	2103      	movs	r1, #3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa64 	bl	80053a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2228      	movs	r2, #40	; 0x28
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a50      	ldr	r2, [pc, #320]	; (800502c <I2C_ITError+0x198>)
 8004eec:	635a      	str	r2, [r3, #52]	; 0x34
 8004eee:	e011      	b.n	8004f14 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ef0:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa57 	bl	80053a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b60      	cmp	r3, #96	; 0x60
 8004f04:	d003      	beq.n	8004f0e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d039      	beq.n	8004f96 <I2C_ITError+0x102>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b11      	cmp	r3, #17
 8004f26:	d002      	beq.n	8004f2e <I2C_ITError+0x9a>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b21      	cmp	r3, #33	; 0x21
 8004f2c:	d133      	bne.n	8004f96 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3c:	d107      	bne.n	8004f4e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f4c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fd2d 	bl	80039b2 <HAL_DMA_GetState>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d017      	beq.n	8004f8e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	4a33      	ldr	r2, [pc, #204]	; (8005030 <I2C_ITError+0x19c>)
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fcdf 	bl	8003936 <HAL_DMA_Abort_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04d      	beq.n	800501a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f8c:	e045      	b.n	800501a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f850 	bl	8005034 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f94:	e041      	b.n	800501a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d039      	beq.n	8005012 <I2C_ITError+0x17e>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b12      	cmp	r3, #18
 8004fa2:	d002      	beq.n	8004faa <I2C_ITError+0x116>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b22      	cmp	r3, #34	; 0x22
 8004fa8:	d133      	bne.n	8005012 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d107      	bne.n	8004fca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fcef 	bl	80039b2 <HAL_DMA_GetState>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d017      	beq.n	800500a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	4a14      	ldr	r2, [pc, #80]	; (8005030 <I2C_ITError+0x19c>)
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fca1 	bl	8003936 <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d011      	beq.n	800501e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005008:	e009      	b.n	800501e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f812 	bl	8005034 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005010:	e005      	b.n	800501e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f80e 	bl	8005034 <I2C_TreatErrorCallback>
  }
}
 8005018:	e002      	b.n	8005020 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800501e:	bf00      	nop
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	ffff0000 	.word	0xffff0000
 800502c:	080046bb 	.word	0x080046bb
 8005030:	080050cb 	.word	0x080050cb

08005034 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b60      	cmp	r3, #96	; 0x60
 8005046:	d10e      	bne.n	8005066 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fb21 	bl	80046a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005064:	e009      	b.n	800507a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fb0c 	bl	8004692 <HAL_I2C_ErrorCallback>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b02      	cmp	r3, #2
 8005096:	d103      	bne.n	80050a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d007      	beq.n	80050be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	619a      	str	r2, [r3, #24]
  }
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	2200      	movs	r2, #0
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	2200      	movs	r2, #0
 80050f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff9b 	bl	8005034 <I2C_TreatErrorCallback>
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005116:	e022      	b.n	800515e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d01e      	beq.n	800515e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005120:	f7fe faca 	bl	80036b8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e00f      	b.n	800517e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4013      	ands	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2300      	movne	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	429a      	cmp	r2, r3
 800517a:	d0cd      	beq.n	8005118 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005192:	e02c      	b.n	80051ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f871 	bl	8005280 <I2C_IsAcknowledgeFailed>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e02a      	b.n	80051fe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d01e      	beq.n	80051ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b0:	f7fe fa82 	bl	80036b8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d113      	bne.n	80051ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e007      	b.n	80051fe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d1cb      	bne.n	8005194 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005212:	e028      	b.n	8005266 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f831 	bl	8005280 <I2C_IsAcknowledgeFailed>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e026      	b.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005228:	f7fe fa46 	bl	80036b8 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d302      	bcc.n	800523e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d113      	bne.n	8005266 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e007      	b.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d1cf      	bne.n	8005214 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d151      	bne.n	800533e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800529a:	e022      	b.n	80052e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d01e      	beq.n	80052e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a4:	f7fe fa08 	bl	80036b8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <I2C_IsAcknowledgeFailed+0x3a>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d113      	bne.n	80052e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02e      	b.n	8005340 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d1d5      	bne.n	800529c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2210      	movs	r2, #16
 80052f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2220      	movs	r2, #32
 80052fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff febe 	bl	8005082 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <I2C_IsAcknowledgeFailed+0xc8>)
 8005312:	400b      	ands	r3, r1
 8005314:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	fe00e800 	.word	0xfe00e800

0800534c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	817b      	strh	r3, [r7, #10]
 800535a:	4613      	mov	r3, r2
 800535c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	0d5b      	lsrs	r3, r3, #21
 8005368:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <I2C_TransferConfig+0x58>)
 800536e:	430b      	orrs	r3, r1
 8005370:	43db      	mvns	r3, r3
 8005372:	ea02 0103 	and.w	r1, r2, r3
 8005376:	897b      	ldrh	r3, [r7, #10]
 8005378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800537c:	7a7b      	ldrb	r3, [r7, #9]
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	431a      	orrs	r2, r3
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	03ff63ff 	.word	0x03ff63ff

080053a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00f      	beq.n	80053e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80053c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053d6:	2b28      	cmp	r3, #40	; 0x28
 80053d8:	d003      	beq.n	80053e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80053e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053e2:	887b      	ldrh	r3, [r7, #2]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00f      	beq.n	800540c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80053f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005400:	2b28      	cmp	r3, #40	; 0x28
 8005402:	d003      	beq.n	800540c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800540a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800540c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	da03      	bge.n	800541c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800541a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	2b10      	cmp	r3, #16
 8005420:	d103      	bne.n	800542a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005428:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800542a:	887b      	ldrh	r3, [r7, #2]
 800542c:	2b20      	cmp	r3, #32
 800542e:	d103      	bne.n	8005438 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f043 0320 	orr.w	r3, r3, #32
 8005436:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d103      	bne.n	8005446 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005444:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	43da      	mvns	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	400a      	ands	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
}
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b20      	cmp	r3, #32
 8005478:	d138      	bne.n	80054ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005484:	2302      	movs	r3, #2
 8005486:	e032      	b.n	80054ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	e000      	b.n	80054ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
  }
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b20      	cmp	r3, #32
 800550e:	d139      	bne.n	8005584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800551a:	2302      	movs	r3, #2
 800551c:	e033      	b.n	8005586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2224      	movs	r2, #36	; 0x24
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800554c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	e000      	b.n	8005586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005584:	2302      	movs	r3, #2
  }
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_I2CEx_EnableFastModePlus+0x38>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_I2CEx_EnableFastModePlus+0x38>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6193      	str	r3, [r2, #24]
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_I2CEx_EnableFastModePlus+0x38>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4905      	ldr	r1, [pc, #20]	; (80055d0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40010000 	.word	0x40010000

080055d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80055da:	af00      	add	r7, sp, #0
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f000 bef4 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 816a 	beq.w	80058d2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055fe:	4bb3      	ldr	r3, [pc, #716]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b04      	cmp	r3, #4
 8005608:	d00c      	beq.n	8005624 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800560a:	4bb0      	ldr	r3, [pc, #704]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b08      	cmp	r3, #8
 8005614:	d159      	bne.n	80056ca <HAL_RCC_OscConfig+0xf6>
 8005616:	4bad      	ldr	r3, [pc, #692]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005622:	d152      	bne.n	80056ca <HAL_RCC_OscConfig+0xf6>
 8005624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005628:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005630:	fa93 f3a3 	rbit	r3, r3
 8005634:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005638:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d102      	bne.n	8005656 <HAL_RCC_OscConfig+0x82>
 8005650:	4b9e      	ldr	r3, [pc, #632]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e015      	b.n	8005682 <HAL_RCC_OscConfig+0xae>
 8005656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800565a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005662:	fa93 f3a3 	rbit	r3, r3
 8005666:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800566a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800566e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005672:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005676:	fa93 f3a3 	rbit	r3, r3
 800567a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800567e:	4b93      	ldr	r3, [pc, #588]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005686:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800568a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800568e:	fa92 f2a2 	rbit	r2, r2
 8005692:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005696:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800569a:	fab2 f282 	clz	r2, r2
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	f042 0220 	orr.w	r2, r2, #32
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	f002 021f 	and.w	r2, r2, #31
 80056aa:	2101      	movs	r1, #1
 80056ac:	fa01 f202 	lsl.w	r2, r1, r2
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 810c 	beq.w	80058d0 <HAL_RCC_OscConfig+0x2fc>
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 8106 	bne.w	80058d0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f000 be86 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d106      	bne.n	80056e4 <HAL_RCC_OscConfig+0x110>
 80056d6:	4b7d      	ldr	r3, [pc, #500]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7c      	ldr	r2, [pc, #496]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e030      	b.n	8005746 <HAL_RCC_OscConfig+0x172>
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x134>
 80056ee:	4b77      	ldr	r3, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a76      	ldr	r2, [pc, #472]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80056f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b74      	ldr	r3, [pc, #464]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a73      	ldr	r2, [pc, #460]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e01e      	b.n	8005746 <HAL_RCC_OscConfig+0x172>
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005712:	d10c      	bne.n	800572e <HAL_RCC_OscConfig+0x15a>
 8005714:	4b6d      	ldr	r3, [pc, #436]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6c      	ldr	r2, [pc, #432]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 800571a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a69      	ldr	r2, [pc, #420]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e00b      	b.n	8005746 <HAL_RCC_OscConfig+0x172>
 800572e:	4b67      	ldr	r3, [pc, #412]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a66      	ldr	r2, [pc, #408]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b64      	ldr	r3, [pc, #400]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a63      	ldr	r2, [pc, #396]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005744:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005746:	4b61      	ldr	r3, [pc, #388]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	f023 020f 	bic.w	r2, r3, #15
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	495d      	ldr	r1, [pc, #372]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005756:	4313      	orrs	r3, r2
 8005758:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d059      	beq.n	8005818 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fd ffa8 	bl	80036b8 <HAL_GetTick>
 8005768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576c:	e00a      	b.n	8005784 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800576e:	f7fd ffa3 	bl	80036b8 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d902      	bls.n	8005784 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	f000 be29 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005788:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005790:	fa93 f3a3 	rbit	r3, r3
 8005794:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005798:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579c:	fab3 f383 	clz	r3, r3
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d102      	bne.n	80057b6 <HAL_RCC_OscConfig+0x1e2>
 80057b0:	4b46      	ldr	r3, [pc, #280]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	e015      	b.n	80057e2 <HAL_RCC_OscConfig+0x20e>
 80057b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80057ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80057d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80057de:	4b3b      	ldr	r3, [pc, #236]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057e6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80057ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80057ee:	fa92 f2a2 	rbit	r2, r2
 80057f2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80057f6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80057fa:	fab2 f282 	clz	r2, r2
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	f042 0220 	orr.w	r2, r2, #32
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	f002 021f 	and.w	r2, r2, #31
 800580a:	2101      	movs	r1, #1
 800580c:	fa01 f202 	lsl.w	r2, r1, r2
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ab      	beq.n	800576e <HAL_RCC_OscConfig+0x19a>
 8005816:	e05c      	b.n	80058d2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fd ff4e 	bl	80036b8 <HAL_GetTick>
 800581c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005822:	f7fd ff49 	bl	80036b8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d902      	bls.n	8005838 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	f000 bdcf 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800583c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005844:	fa93 f3a3 	rbit	r3, r3
 8005848:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800584c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d102      	bne.n	800586a <HAL_RCC_OscConfig+0x296>
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	e015      	b.n	8005896 <HAL_RCC_OscConfig+0x2c2>
 800586a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800586e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005872:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005876:	fa93 f3a3 	rbit	r3, r3
 800587a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800587e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005882:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005886:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005892:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <HAL_RCC_OscConfig+0x2f8>)
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800589a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800589e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80058a2:	fa92 f2a2 	rbit	r2, r2
 80058a6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80058aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80058ae:	fab2 f282 	clz	r2, r2
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	f042 0220 	orr.w	r2, r2, #32
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	f002 021f 	and.w	r2, r2, #31
 80058be:	2101      	movs	r1, #1
 80058c0:	fa01 f202 	lsl.w	r2, r1, r2
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ab      	bne.n	8005822 <HAL_RCC_OscConfig+0x24e>
 80058ca:	e002      	b.n	80058d2 <HAL_RCC_OscConfig+0x2fe>
 80058cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 816f 	beq.w	8005bc0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80058e2:	4bd0      	ldr	r3, [pc, #832]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058ee:	4bcd      	ldr	r3, [pc, #820]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 030c 	and.w	r3, r3, #12
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d16c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x400>
 80058fa:	4bca      	ldr	r3, [pc, #808]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d166      	bne.n	80059d4 <HAL_RCC_OscConfig+0x400>
 8005906:	2302      	movs	r3, #2
 8005908:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005918:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591c:	fab3 f383 	clz	r3, r3
 8005920:	b2db      	uxtb	r3, r3
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d102      	bne.n	8005936 <HAL_RCC_OscConfig+0x362>
 8005930:	4bbc      	ldr	r3, [pc, #752]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	e013      	b.n	800595e <HAL_RCC_OscConfig+0x38a>
 8005936:	2302      	movs	r3, #2
 8005938:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005948:	2302      	movs	r3, #2
 800594a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800594e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800595a:	4bb2      	ldr	r3, [pc, #712]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2202      	movs	r2, #2
 8005960:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005964:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005968:	fa92 f2a2 	rbit	r2, r2
 800596c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005970:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005974:	fab2 f282 	clz	r2, r2
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	f042 0220 	orr.w	r2, r2, #32
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	f002 021f 	and.w	r2, r2, #31
 8005984:	2101      	movs	r1, #1
 8005986:	fa01 f202 	lsl.w	r2, r1, r2
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <HAL_RCC_OscConfig+0x3cc>
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d002      	beq.n	80059a0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f000 bd1b 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a0:	4ba0      	ldr	r3, [pc, #640]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	21f8      	movs	r1, #248	; 0xf8
 80059b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80059b8:	fa91 f1a1 	rbit	r1, r1
 80059bc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80059c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80059c4:	fab1 f181 	clz	r1, r1
 80059c8:	b2c9      	uxtb	r1, r1
 80059ca:	408b      	lsls	r3, r1
 80059cc:	4995      	ldr	r1, [pc, #596]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d2:	e0f5      	b.n	8005bc0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 8085 	beq.w	8005aea <HAL_RCC_OscConfig+0x516>
 80059e0:	2301      	movs	r3, #1
 80059e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80059f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
 8005a08:	2301      	movs	r3, #1
 8005a0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fd fe54 	bl	80036b8 <HAL_GetTick>
 8005a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a14:	e00a      	b.n	8005a2c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a16:	f7fd fe4f 	bl	80036b8 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d902      	bls.n	8005a2c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	f000 bcd5 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005a3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a42:	fab3 f383 	clz	r3, r3
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d102      	bne.n	8005a5c <HAL_RCC_OscConfig+0x488>
 8005a56:	4b73      	ldr	r3, [pc, #460]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	e013      	b.n	8005a84 <HAL_RCC_OscConfig+0x4b0>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005a6e:	2302      	movs	r3, #2
 8005a70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005a74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005a78:	fa93 f3a3 	rbit	r3, r3
 8005a7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005a80:	4b68      	ldr	r3, [pc, #416]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2202      	movs	r2, #2
 8005a86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005a8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a8e:	fa92 f2a2 	rbit	r2, r2
 8005a92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005a96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005a9a:	fab2 f282 	clz	r2, r2
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	f042 0220 	orr.w	r2, r2, #32
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	f002 021f 	and.w	r2, r2, #31
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0af      	beq.n	8005a16 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab6:	4b5b      	ldr	r3, [pc, #364]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	21f8      	movs	r1, #248	; 0xf8
 8005ac6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005ace:	fa91 f1a1 	rbit	r1, r1
 8005ad2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005ad6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005ada:	fab1 f181 	clz	r1, r1
 8005ade:	b2c9      	uxtb	r1, r1
 8005ae0:	408b      	lsls	r3, r1
 8005ae2:	4950      	ldr	r1, [pc, #320]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
 8005ae8:	e06a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x5ec>
 8005aea:	2301      	movs	r3, #1
 8005aec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005af4:	fa93 f3a3 	rbit	r3, r3
 8005af8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005afc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b00:	fab3 f383 	clz	r3, r3
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	461a      	mov	r2, r3
 8005b12:	2300      	movs	r3, #0
 8005b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b16:	f7fd fdcf 	bl	80036b8 <HAL_GetTick>
 8005b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b20:	f7fd fdca 	bl	80036b8 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d902      	bls.n	8005b36 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	f000 bc50 	b.w	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005b36:	2302      	movs	r3, #2
 8005b38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4c:	fab3 f383 	clz	r3, r3
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_RCC_OscConfig+0x592>
 8005b60:	4b30      	ldr	r3, [pc, #192]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	e013      	b.n	8005b8e <HAL_RCC_OscConfig+0x5ba>
 8005b66:	2302      	movs	r3, #2
 8005b68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b70:	fa93 f3a3 	rbit	r3, r3
 8005b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b82:	fa93 f3a3 	rbit	r3, r3
 8005b86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <HAL_RCC_OscConfig+0x650>)
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005b94:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b98:	fa92 f2a2 	rbit	r2, r2
 8005b9c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005ba0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005ba4:	fab2 f282 	clz	r2, r2
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	f042 0220 	orr.w	r2, r2, #32
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	f002 021f 	and.w	r2, r2, #31
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1af      	bne.n	8005b20 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80da 	beq.w	8005d84 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d069      	beq.n	8005cae <HAL_RCC_OscConfig+0x6da>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005be4:	fa93 f3a3 	rbit	r3, r3
 8005be8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf0:	fab3 f383 	clz	r3, r3
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCC_OscConfig+0x654>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2301      	movs	r3, #1
 8005c02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c04:	f7fd fd58 	bl	80036b8 <HAL_GetTick>
 8005c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0c:	e00e      	b.n	8005c2c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c0e:	f7fd fd53 	bl	80036b8 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d906      	bls.n	8005c2c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e3d9      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000
 8005c28:	10908120 	.word	0x10908120
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c36:	fa93 f3a3 	rbit	r3, r3
 8005c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c42:	2202      	movs	r2, #2
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	fa93 f2a3 	rbit	r2, r3
 8005c50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	fa93 f2a3 	rbit	r2, r3
 8005c68:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005c6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6e:	4ba5      	ldr	r3, [pc, #660]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005c76:	2102      	movs	r1, #2
 8005c78:	6019      	str	r1, [r3, #0]
 8005c7a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	fa93 f1a3 	rbit	r1, r3
 8005c84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c88:	6019      	str	r1, [r3, #0]
  return result;
 8005c8a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	fab3 f383 	clz	r3, r3
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0b0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x63a>
 8005cac:	e06a      	b.n	8005d84 <HAL_RCC_OscConfig+0x7b0>
 8005cae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	fa93 f2a3 	rbit	r2, r3
 8005cc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005cc4:	601a      	str	r2, [r3, #0]
  return result;
 8005cc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005cca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ccc:	fab3 f383 	clz	r3, r3
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4b8c      	ldr	r3, [pc, #560]	; (8005f08 <HAL_RCC_OscConfig+0x934>)
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2300      	movs	r3, #0
 8005cde:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce0:	f7fd fcea 	bl	80036b8 <HAL_GetTick>
 8005ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce8:	e009      	b.n	8005cfe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cea:	f7fd fce5 	bl	80036b8 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e36b      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005cfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d02:	2202      	movs	r2, #2
 8005d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	fa93 f2a3 	rbit	r2, r3
 8005d10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	fa93 f2a3 	rbit	r2, r3
 8005d28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d32:	2202      	movs	r2, #2
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	fa93 f2a3 	rbit	r2, r3
 8005d40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d46:	4b6f      	ldr	r3, [pc, #444]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d4e:	2102      	movs	r1, #2
 8005d50:	6019      	str	r1, [r3, #0]
 8005d52:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	fa93 f1a3 	rbit	r1, r3
 8005d5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005d60:	6019      	str	r1, [r3, #0]
  return result;
 8005d62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	fab3 f383 	clz	r3, r3
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	2101      	movs	r1, #1
 8005d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1b2      	bne.n	8005cea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8158 	beq.w	8006044 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d9a:	4b5a      	ldr	r3, [pc, #360]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d112      	bne.n	8005dcc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	4b57      	ldr	r3, [pc, #348]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db0:	61d3      	str	r3, [r2, #28]
 8005db2:	4b54      	ldr	r3, [pc, #336]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005dba:	f107 0308 	add.w	r3, r7, #8
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f107 0308 	add.w	r3, r7, #8
 8005dc4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dcc:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <HAL_RCC_OscConfig+0x938>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11a      	bne.n	8005e0e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dd8:	4b4c      	ldr	r3, [pc, #304]	; (8005f0c <HAL_RCC_OscConfig+0x938>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a4b      	ldr	r2, [pc, #300]	; (8005f0c <HAL_RCC_OscConfig+0x938>)
 8005dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de4:	f7fd fc68 	bl	80036b8 <HAL_GetTick>
 8005de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dec:	e009      	b.n	8005e02 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dee:	f7fd fc63 	bl	80036b8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e2e9      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e02:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <HAL_RCC_OscConfig+0x938>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ef      	beq.n	8005dee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d106      	bne.n	8005e26 <HAL_RCC_OscConfig+0x852>
 8005e18:	4b3a      	ldr	r3, [pc, #232]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	4a39      	ldr	r2, [pc, #228]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6213      	str	r3, [r2, #32]
 8005e24:	e02f      	b.n	8005e86 <HAL_RCC_OscConfig+0x8b2>
 8005e26:	1d3b      	adds	r3, r7, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x876>
 8005e30:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	4a33      	ldr	r2, [pc, #204]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6213      	str	r3, [r2, #32]
 8005e3c:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	4a30      	ldr	r2, [pc, #192]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e42:	f023 0304 	bic.w	r3, r3, #4
 8005e46:	6213      	str	r3, [r2, #32]
 8005e48:	e01d      	b.n	8005e86 <HAL_RCC_OscConfig+0x8b2>
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b05      	cmp	r3, #5
 8005e52:	d10c      	bne.n	8005e6e <HAL_RCC_OscConfig+0x89a>
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	4a2a      	ldr	r2, [pc, #168]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e5a:	f043 0304 	orr.w	r3, r3, #4
 8005e5e:	6213      	str	r3, [r2, #32]
 8005e60:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	6213      	str	r3, [r2, #32]
 8005e6c:	e00b      	b.n	8005e86 <HAL_RCC_OscConfig+0x8b2>
 8005e6e:	4b25      	ldr	r3, [pc, #148]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	4a24      	ldr	r2, [pc, #144]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	6213      	str	r3, [r2, #32]
 8005e7a:	4b22      	ldr	r3, [pc, #136]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	4a21      	ldr	r2, [pc, #132]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005e80:	f023 0304 	bic.w	r3, r3, #4
 8005e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d06b      	beq.n	8005f68 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e90:	f7fd fc12 	bl	80036b8 <HAL_GetTick>
 8005e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e98:	e00b      	b.n	8005eb2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9a:	f7fd fc0d 	bl	80036b8 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e291      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005eb2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	fa93 f2a3 	rbit	r2, r3
 8005ec4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ece:	2202      	movs	r2, #2
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	fa93 f2a3 	rbit	r2, r3
 8005edc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005ee0:	601a      	str	r2, [r3, #0]
  return result;
 8005ee2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee8:	fab3 f383 	clz	r3, r3
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f043 0302 	orr.w	r3, r3, #2
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d109      	bne.n	8005f10 <HAL_RCC_OscConfig+0x93c>
 8005efc:	4b01      	ldr	r3, [pc, #4]	; (8005f04 <HAL_RCC_OscConfig+0x930>)
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	e014      	b.n	8005f2c <HAL_RCC_OscConfig+0x958>
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	10908120 	.word	0x10908120
 8005f0c:	40007000 	.word	0x40007000
 8005f10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f14:	2202      	movs	r2, #2
 8005f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	fa93 f2a3 	rbit	r2, r3
 8005f22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	4bbb      	ldr	r3, [pc, #748]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f30:	2102      	movs	r1, #2
 8005f32:	6011      	str	r1, [r2, #0]
 8005f34:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	fa92 f1a2 	rbit	r1, r2
 8005f3e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005f42:	6011      	str	r1, [r2, #0]
  return result;
 8005f44:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	fab2 f282 	clz	r2, r2
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	f002 021f 	and.w	r2, r2, #31
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d099      	beq.n	8005e9a <HAL_RCC_OscConfig+0x8c6>
 8005f66:	e063      	b.n	8006030 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f68:	f7fd fba6 	bl	80036b8 <HAL_GetTick>
 8005f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f70:	e00b      	b.n	8005f8a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f72:	f7fd fba1 	bl	80036b8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e225      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 8005f8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f8e:	2202      	movs	r2, #2
 8005f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	fa93 f2a3 	rbit	r2, r3
 8005f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	fa93 f2a3 	rbit	r2, r3
 8005fb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005fb8:	601a      	str	r2, [r3, #0]
  return result;
 8005fba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f043 0302 	orr.w	r3, r3, #2
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d102      	bne.n	8005fda <HAL_RCC_OscConfig+0xa06>
 8005fd4:	4b90      	ldr	r3, [pc, #576]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	e00d      	b.n	8005ff6 <HAL_RCC_OscConfig+0xa22>
 8005fda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005fde:	2202      	movs	r2, #2
 8005fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	fa93 f2a3 	rbit	r2, r3
 8005fec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	4b89      	ldr	r3, [pc, #548]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	fa92 f1a2 	rbit	r1, r2
 8006008:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800600c:	6011      	str	r1, [r2, #0]
  return result;
 800600e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	fab2 f282 	clz	r2, r2
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	f002 021f 	and.w	r2, r2, #31
 8006024:	2101      	movs	r1, #1
 8006026:	fa01 f202 	lsl.w	r2, r1, r2
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1a0      	bne.n	8005f72 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006030:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006034:	2b01      	cmp	r3, #1
 8006036:	d105      	bne.n	8006044 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006038:	4b77      	ldr	r3, [pc, #476]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4a76      	ldr	r2, [pc, #472]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 800603e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006042:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 81c2 	beq.w	80063d4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006050:	4b71      	ldr	r3, [pc, #452]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b08      	cmp	r3, #8
 800605a:	f000 819c 	beq.w	8006396 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	2b02      	cmp	r3, #2
 8006066:	f040 8114 	bne.w	8006292 <HAL_RCC_OscConfig+0xcbe>
 800606a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800606e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006074:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	fa93 f2a3 	rbit	r2, r3
 800607e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006082:	601a      	str	r2, [r3, #0]
  return result;
 8006084:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006088:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608a:	fab3 f383 	clz	r3, r3
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	461a      	mov	r2, r3
 800609c:	2300      	movs	r3, #0
 800609e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fd fb0a 	bl	80036b8 <HAL_GetTick>
 80060a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060a8:	e009      	b.n	80060be <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fd fb05 	bl	80036b8 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e18b      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 80060be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	fa93 f2a3 	rbit	r2, r3
 80060d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060d6:	601a      	str	r2, [r3, #0]
  return result;
 80060d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060de:	fab3 f383 	clz	r3, r3
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d102      	bne.n	80060f8 <HAL_RCC_OscConfig+0xb24>
 80060f2:	4b49      	ldr	r3, [pc, #292]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	e01b      	b.n	8006130 <HAL_RCC_OscConfig+0xb5c>
 80060f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	fa93 f2a3 	rbit	r2, r3
 800610c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	fa93 f2a3 	rbit	r2, r3
 8006126:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	4b3a      	ldr	r3, [pc, #232]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006138:	6011      	str	r1, [r2, #0]
 800613a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	fa92 f1a2 	rbit	r1, r2
 8006144:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006148:	6011      	str	r1, [r2, #0]
  return result;
 800614a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	fab2 f282 	clz	r2, r2
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	f042 0220 	orr.w	r2, r2, #32
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	f002 021f 	and.w	r2, r2, #31
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f202 	lsl.w	r2, r1, r2
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d19e      	bne.n	80060aa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800616c:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	430b      	orrs	r3, r1
 8006182:	4925      	ldr	r1, [pc, #148]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
 8006188:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800618c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	fa93 f2a3 	rbit	r2, r3
 800619c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80061a0:	601a      	str	r2, [r3, #0]
  return result;
 80061a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80061a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a8:	fab3 f383 	clz	r3, r3
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	461a      	mov	r2, r3
 80061ba:	2301      	movs	r3, #1
 80061bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061be:	f7fd fa7b 	bl	80036b8 <HAL_GetTick>
 80061c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061c6:	e009      	b.n	80061dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c8:	f7fd fa76 	bl	80036b8 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e0fc      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 80061dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80061e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	fa93 f2a3 	rbit	r2, r3
 80061f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80061f4:	601a      	str	r2, [r3, #0]
  return result;
 80061f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80061fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061fc:	fab3 f383 	clz	r3, r3
 8006200:	b2db      	uxtb	r3, r3
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <HAL_RCC_OscConfig+0xc48>
 8006210:	4b01      	ldr	r3, [pc, #4]	; (8006218 <HAL_RCC_OscConfig+0xc44>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	e01e      	b.n	8006254 <HAL_RCC_OscConfig+0xc80>
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	fa93 f2a3 	rbit	r2, r3
 8006230:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800623a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	fa93 f2a3 	rbit	r2, r3
 800624a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	4b63      	ldr	r3, [pc, #396]	; (80063e0 <HAL_RCC_OscConfig+0xe0c>)
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006258:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800625c:	6011      	str	r1, [r2, #0]
 800625e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	fa92 f1a2 	rbit	r1, r2
 8006268:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800626c:	6011      	str	r1, [r2, #0]
  return result;
 800626e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	fab2 f282 	clz	r2, r2
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	f042 0220 	orr.w	r2, r2, #32
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	f002 021f 	and.w	r2, r2, #31
 8006284:	2101      	movs	r1, #1
 8006286:	fa01 f202 	lsl.w	r2, r1, r2
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d09b      	beq.n	80061c8 <HAL_RCC_OscConfig+0xbf4>
 8006290:	e0a0      	b.n	80063d4 <HAL_RCC_OscConfig+0xe00>
 8006292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800629a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	fa93 f2a3 	rbit	r2, r3
 80062a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062aa:	601a      	str	r2, [r3, #0]
  return result;
 80062ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	fab3 f383 	clz	r3, r3
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	461a      	mov	r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c8:	f7fd f9f6 	bl	80036b8 <HAL_GetTick>
 80062cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d0:	e009      	b.n	80062e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d2:	f7fd f9f1 	bl	80036b8 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e077      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
 80062e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	fa93 f2a3 	rbit	r2, r3
 80062fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fe:	601a      	str	r2, [r3, #0]
  return result;
 8006300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006306:	fab3 f383 	clz	r3, r3
 800630a:	b2db      	uxtb	r3, r3
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d102      	bne.n	8006320 <HAL_RCC_OscConfig+0xd4c>
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <HAL_RCC_OscConfig+0xe0c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	e01b      	b.n	8006358 <HAL_RCC_OscConfig+0xd84>
 8006320:	f107 0320 	add.w	r3, r7, #32
 8006324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	f107 0320 	add.w	r3, r7, #32
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	fa93 f2a3 	rbit	r2, r3
 8006334:	f107 031c 	add.w	r3, r7, #28
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f107 0318 	add.w	r3, r7, #24
 800633e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f107 0318 	add.w	r3, r7, #24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	fa93 f2a3 	rbit	r2, r3
 800634e:	f107 0314 	add.w	r3, r7, #20
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	4b22      	ldr	r3, [pc, #136]	; (80063e0 <HAL_RCC_OscConfig+0xe0c>)
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	f107 0210 	add.w	r2, r7, #16
 800635c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	f107 0210 	add.w	r2, r7, #16
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	fa92 f1a2 	rbit	r1, r2
 800636c:	f107 020c 	add.w	r2, r7, #12
 8006370:	6011      	str	r1, [r2, #0]
  return result;
 8006372:	f107 020c 	add.w	r2, r7, #12
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	fab2 f282 	clz	r2, r2
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	f042 0220 	orr.w	r2, r2, #32
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	f002 021f 	and.w	r2, r2, #31
 8006388:	2101      	movs	r1, #1
 800638a:	fa01 f202 	lsl.w	r2, r1, r2
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d19e      	bne.n	80062d2 <HAL_RCC_OscConfig+0xcfe>
 8006394:	e01e      	b.n	80063d4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006396:	1d3b      	adds	r3, r7, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e018      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <HAL_RCC_OscConfig+0xe0c>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d108      	bne.n	80063d0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80063be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d001      	beq.n	80063d4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40021000 	.word	0x40021000

080063e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b09e      	sub	sp, #120	; 0x78
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e162      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063fc:	4b90      	ldr	r3, [pc, #576]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d910      	bls.n	800642c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640a:	4b8d      	ldr	r3, [pc, #564]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 0207 	bic.w	r2, r3, #7
 8006412:	498b      	ldr	r1, [pc, #556]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	4313      	orrs	r3, r2
 8006418:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b89      	ldr	r3, [pc, #548]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e14a      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006438:	4b82      	ldr	r3, [pc, #520]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	497f      	ldr	r1, [pc, #508]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 8006446:	4313      	orrs	r3, r2
 8006448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80dc 	beq.w	8006610 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d13c      	bne.n	80064da <HAL_RCC_ClockConfig+0xf6>
 8006460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006468:	fa93 f3a3 	rbit	r3, r3
 800646c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800646e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006470:	fab3 f383 	clz	r3, r3
 8006474:	b2db      	uxtb	r3, r3
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d102      	bne.n	800648a <HAL_RCC_ClockConfig+0xa6>
 8006484:	4b6f      	ldr	r3, [pc, #444]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	e00f      	b.n	80064aa <HAL_RCC_ClockConfig+0xc6>
 800648a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800648e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	667b      	str	r3, [r7, #100]	; 0x64
 8006498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800649c:	663b      	str	r3, [r7, #96]	; 0x60
 800649e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a0:	fa93 f3a3 	rbit	r3, r3
 80064a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a6:	4b67      	ldr	r3, [pc, #412]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80064b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064b2:	fa92 f2a2 	rbit	r2, r2
 80064b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80064b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064ba:	fab2 f282 	clz	r2, r2
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	f042 0220 	orr.w	r2, r2, #32
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	f002 021f 	and.w	r2, r2, #31
 80064ca:	2101      	movs	r1, #1
 80064cc:	fa01 f202 	lsl.w	r2, r1, r2
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d17b      	bne.n	80065ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0f3      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d13c      	bne.n	800655c <HAL_RCC_ClockConfig+0x178>
 80064e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f2:	fab3 f383 	clz	r3, r3
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	d102      	bne.n	800650c <HAL_RCC_ClockConfig+0x128>
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	e00f      	b.n	800652c <HAL_RCC_ClockConfig+0x148>
 800650c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006510:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006514:	fa93 f3a3 	rbit	r3, r3
 8006518:	647b      	str	r3, [r7, #68]	; 0x44
 800651a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800651e:	643b      	str	r3, [r7, #64]	; 0x40
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	fa93 f3a3 	rbit	r3, r3
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006528:	4b46      	ldr	r3, [pc, #280]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006530:	63ba      	str	r2, [r7, #56]	; 0x38
 8006532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006534:	fa92 f2a2 	rbit	r2, r2
 8006538:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800653a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653c:	fab2 f282 	clz	r2, r2
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	f042 0220 	orr.w	r2, r2, #32
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	f002 021f 	and.w	r2, r2, #31
 800654c:	2101      	movs	r1, #1
 800654e:	fa01 f202 	lsl.w	r2, r1, r2
 8006552:	4013      	ands	r3, r2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d13a      	bne.n	80065ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0b2      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
 800655c:	2302      	movs	r3, #2
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	fa93 f3a3 	rbit	r3, r3
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656a:	fab3 f383 	clz	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b01      	cmp	r3, #1
 800657c:	d102      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1a0>
 800657e:	4b31      	ldr	r3, [pc, #196]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	e00d      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1bc>
 8006584:	2302      	movs	r3, #2
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	fa93 f3a3 	rbit	r3, r3
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
 8006590:	2302      	movs	r3, #2
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	fa93 f3a3 	rbit	r3, r3
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	4b29      	ldr	r3, [pc, #164]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2202      	movs	r2, #2
 80065a2:	61ba      	str	r2, [r7, #24]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	fa92 f2a2 	rbit	r2, r2
 80065aa:	617a      	str	r2, [r7, #20]
  return result;
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	fab2 f282 	clz	r2, r2
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	f042 0220 	orr.w	r2, r2, #32
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	f002 021f 	and.w	r2, r2, #31
 80065be:	2101      	movs	r1, #1
 80065c0:	fa01 f202 	lsl.w	r2, r1, r2
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e079      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ce:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f023 0203 	bic.w	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	491a      	ldr	r1, [pc, #104]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065e0:	f7fd f86a 	bl	80036b8 <HAL_GetTick>
 80065e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	e00a      	b.n	80065fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fd f866 	bl	80036b8 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e061      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <HAL_RCC_ClockConfig+0x260>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 020c 	and.w	r2, r3, #12
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	429a      	cmp	r2, r3
 800660e:	d1eb      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d214      	bcs.n	8006648 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f023 0207 	bic.w	r2, r3, #7
 8006626:	4906      	ldr	r1, [pc, #24]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	4313      	orrs	r3, r2
 800662c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800662e:	4b04      	ldr	r3, [pc, #16]	; (8006640 <HAL_RCC_ClockConfig+0x25c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d005      	beq.n	8006648 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e040      	b.n	80066c2 <HAL_RCC_ClockConfig+0x2de>
 8006640:	40022000 	.word	0x40022000
 8006644:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <HAL_RCC_ClockConfig+0x2e8>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	491a      	ldr	r1, [pc, #104]	; (80066cc <HAL_RCC_ClockConfig+0x2e8>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006672:	4b16      	ldr	r3, [pc, #88]	; (80066cc <HAL_RCC_ClockConfig+0x2e8>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	4912      	ldr	r1, [pc, #72]	; (80066cc <HAL_RCC_ClockConfig+0x2e8>)
 8006682:	4313      	orrs	r3, r2
 8006684:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006686:	f000 f829 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 800668a:	4601      	mov	r1, r0
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <HAL_RCC_ClockConfig+0x2e8>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006694:	22f0      	movs	r2, #240	; 0xf0
 8006696:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	fa92 f2a2 	rbit	r2, r2
 800669e:	60fa      	str	r2, [r7, #12]
  return result;
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	fab2 f282 	clz	r2, r2
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	40d3      	lsrs	r3, r2
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <HAL_RCC_ClockConfig+0x2ec>)
 80066ac:	5cd3      	ldrb	r3, [r2, r3]
 80066ae:	fa21 f303 	lsr.w	r3, r1, r3
 80066b2:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <HAL_RCC_ClockConfig+0x2f0>)
 80066b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_RCC_ClockConfig+0x2f4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fc ffb8 	bl	8003630 <HAL_InitTick>
  
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3778      	adds	r7, #120	; 0x78
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40021000 	.word	0x40021000
 80066d0:	080095fc 	.word	0x080095fc
 80066d4:	20000004 	.word	0x20000004
 80066d8:	20000008 	.word	0x20000008

080066dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	2300      	movs	r3, #0
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80066f6:	4b29      	ldr	r3, [pc, #164]	; (800679c <HAL_RCC_GetSysClockFreq+0xc0>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f003 030c 	and.w	r3, r3, #12
 8006702:	2b04      	cmp	r3, #4
 8006704:	d002      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x30>
 8006706:	2b08      	cmp	r3, #8
 8006708:	d003      	beq.n	8006712 <HAL_RCC_GetSysClockFreq+0x36>
 800670a:	e03c      	b.n	8006786 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800670c:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800670e:	623b      	str	r3, [r7, #32]
      break;
 8006710:	e03c      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006718:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800671c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	fa92 f2a2 	rbit	r2, r2
 8006724:	607a      	str	r2, [r7, #4]
  return result;
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	fab2 f282 	clz	r2, r2
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	40d3      	lsrs	r3, r2
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006732:	5cd3      	ldrb	r3, [r2, r3]
 8006734:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006736:	4b19      	ldr	r3, [pc, #100]	; (800679c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	220f      	movs	r2, #15
 8006740:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	fa92 f2a2 	rbit	r2, r2
 8006748:	60fa      	str	r2, [r7, #12]
  return result;
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	fab2 f282 	clz	r2, r2
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	40d3      	lsrs	r3, r2
 8006754:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006756:	5cd3      	ldrb	r3, [r2, r3]
 8006758:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006764:	4a0e      	ldr	r2, [pc, #56]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	fbb2 f2f3 	udiv	r2, r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
 8006774:	e004      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	623b      	str	r3, [r7, #32]
      break;
 8006784:	e002      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006788:	623b      	str	r3, [r7, #32]
      break;
 800678a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800678c:	6a3b      	ldr	r3, [r7, #32]
}
 800678e:	4618      	mov	r0, r3
 8006790:	372c      	adds	r7, #44	; 0x2c
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000
 80067a0:	007a1200 	.word	0x007a1200
 80067a4:	08009614 	.word	0x08009614
 80067a8:	08009624 	.word	0x08009624
 80067ac:	003d0900 	.word	0x003d0900

080067b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b4:	4b03      	ldr	r3, [pc, #12]	; (80067c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000004 	.word	0x20000004

080067c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80067ce:	f7ff ffef 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067d2:	4601      	mov	r1, r0
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80067e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	fa92 f2a2 	rbit	r2, r2
 80067e8:	603a      	str	r2, [r7, #0]
  return result;
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	fab2 f282 	clz	r2, r2
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	40d3      	lsrs	r3, r2
 80067f4:	4a04      	ldr	r2, [pc, #16]	; (8006808 <HAL_RCC_GetPCLK1Freq+0x40>)
 80067f6:	5cd3      	ldrb	r3, [r2, r3]
 80067f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40021000 	.word	0x40021000
 8006808:	0800960c 	.word	0x0800960c

0800680c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006812:	f7ff ffcd 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 8006816:	4601      	mov	r1, r0
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006820:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	fa92 f2a2 	rbit	r2, r2
 800682c:	603a      	str	r2, [r7, #0]
  return result;
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	fab2 f282 	clz	r2, r2
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	40d3      	lsrs	r3, r2
 8006838:	4a04      	ldr	r2, [pc, #16]	; (800684c <HAL_RCC_GetPCLK2Freq+0x40>)
 800683a:	5cd3      	ldrb	r3, [r2, r3]
 800683c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40021000 	.word	0x40021000
 800684c:	0800960c 	.word	0x0800960c

08006850 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b092      	sub	sp, #72	; 0x48
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80d7 	beq.w	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800686e:	2300      	movs	r3, #0
 8006870:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006874:	4b4e      	ldr	r3, [pc, #312]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10e      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006880:	4b4b      	ldr	r3, [pc, #300]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	4a4a      	ldr	r2, [pc, #296]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800688a:	61d3      	str	r3, [r2, #28]
 800688c:	4b48      	ldr	r3, [pc, #288]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800689e:	4b45      	ldr	r3, [pc, #276]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d118      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068aa:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a41      	ldr	r2, [pc, #260]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068b6:	f7fc feff 	bl	80036b8 <HAL_GetTick>
 80068ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068be:	f7fc fefb 	bl	80036b8 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b64      	cmp	r3, #100	; 0x64
 80068ca:	d901      	bls.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e169      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d0:	4b38      	ldr	r3, [pc, #224]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068dc:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8084 	beq.w	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d07c      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068fc:	4b2c      	ldr	r3, [pc, #176]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800690a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	fa93 f3a3 	rbit	r3, r3
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006916:	fab3 f383 	clz	r3, r3
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	4b26      	ldr	r3, [pc, #152]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	461a      	mov	r2, r3
 8006926:	2301      	movs	r3, #1
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800692e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	fa93 f3a3 	rbit	r3, r3
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800693a:	fab3 f383 	clz	r3, r3
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d04b      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695e:	f7fc feab 	bl	80036b8 <HAL_GetTick>
 8006962:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006964:	e00a      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fc fea7 	bl	80036b8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	; 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e113      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800697c:	2302      	movs	r3, #2
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	fa93 f3a3 	rbit	r3, r3
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
 8006988:	2302      	movs	r3, #2
 800698a:	623b      	str	r3, [r7, #32]
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	fa93 f3a3 	rbit	r3, r3
 8006992:	61fb      	str	r3, [r7, #28]
  return result;
 8006994:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006996:	fab3 f383 	clz	r3, r3
 800699a:	b2db      	uxtb	r3, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d108      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80069aa:	4b01      	ldr	r3, [pc, #4]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	e00d      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40007000 	.word	0x40007000
 80069b8:	10908100 	.word	0x10908100
 80069bc:	2302      	movs	r3, #2
 80069be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	fa93 f3a3 	rbit	r3, r3
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	4b78      	ldr	r3, [pc, #480]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2202      	movs	r2, #2
 80069ce:	613a      	str	r2, [r7, #16]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	fa92 f2a2 	rbit	r2, r2
 80069d6:	60fa      	str	r2, [r7, #12]
  return result;
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	fab2 f282 	clz	r2, r2
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	f002 021f 	and.w	r2, r2, #31
 80069ea:	2101      	movs	r1, #1
 80069ec:	fa01 f202 	lsl.w	r2, r1, r2
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0b7      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80069f6:	4b6d      	ldr	r3, [pc, #436]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	496a      	ldr	r1, [pc, #424]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d105      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a10:	4b66      	ldr	r3, [pc, #408]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	4a65      	ldr	r2, [pc, #404]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a28:	4b60      	ldr	r3, [pc, #384]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	f023 0203 	bic.w	r2, r3, #3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	495d      	ldr	r1, [pc, #372]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d008      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a46:	4b59      	ldr	r3, [pc, #356]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4956      	ldr	r1, [pc, #344]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a64:	4b51      	ldr	r3, [pc, #324]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	494e      	ldr	r1, [pc, #312]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a82:	4b4a      	ldr	r3, [pc, #296]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f023 0210 	bic.w	r2, r3, #16
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	4947      	ldr	r1, [pc, #284]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006aa0:	4b42      	ldr	r3, [pc, #264]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	493f      	ldr	r1, [pc, #252]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006abe:	4b3b      	ldr	r3, [pc, #236]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	f023 0220 	bic.w	r2, r3, #32
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	4938      	ldr	r1, [pc, #224]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006adc:	4b33      	ldr	r3, [pc, #204]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	4930      	ldr	r1, [pc, #192]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006afa:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	4929      	ldr	r1, [pc, #164]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b18:	4b24      	ldr	r3, [pc, #144]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	4921      	ldr	r1, [pc, #132]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	491a      	ldr	r1, [pc, #104]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006b54:	4b15      	ldr	r3, [pc, #84]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	4912      	ldr	r1, [pc, #72]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d008      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b72:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	490b      	ldr	r1, [pc, #44]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	4903      	ldr	r1, [pc, #12]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3748      	adds	r7, #72	; 0x48
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40021000 	.word	0x40021000

08006bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e01d      	b.n	8006bfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc fbae 	bl	8003338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 fd9a 	bl	8007728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e01d      	b.n	8006c54 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f815 	bl	8006c5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f000 fd6f 	bl	8007728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 fa6e 	bl	8008164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <HAL_TIM_PWM_Start+0x98>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_TIM_PWM_Start+0x4a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <HAL_TIM_PWM_Start+0x9c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_TIM_PWM_Start+0x4a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <HAL_TIM_PWM_Start+0xa0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_TIM_PWM_Start+0x4a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <HAL_TIM_PWM_Start+0xa4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_TIM_PWM_Start+0x4a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <HAL_TIM_PWM_Start+0xa8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x4e>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_TIM_PWM_Start+0x50>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	4b10      	ldr	r3, [pc, #64]	; (8006d1c <HAL_TIM_PWM_Start+0xac>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b06      	cmp	r3, #6
 8006ce4:	d00b      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x8e>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cec:	d007      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0201 	orr.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800
 8006d1c:	00010007 	.word	0x00010007

08006d20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e01d      	b.n	8006d6e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fc faae 	bl	80032a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	f000 fce2 	bl	8007728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b0c      	cmp	r3, #12
 8006d86:	d841      	bhi.n	8006e0c <HAL_TIM_IC_Start_IT+0x94>
 8006d88:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <HAL_TIM_IC_Start_IT+0x18>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006e0d 	.word	0x08006e0d
 8006d98:	08006e0d 	.word	0x08006e0d
 8006d9c:	08006e0d 	.word	0x08006e0d
 8006da0:	08006dd7 	.word	0x08006dd7
 8006da4:	08006e0d 	.word	0x08006e0d
 8006da8:	08006e0d 	.word	0x08006e0d
 8006dac:	08006e0d 	.word	0x08006e0d
 8006db0:	08006de9 	.word	0x08006de9
 8006db4:	08006e0d 	.word	0x08006e0d
 8006db8:	08006e0d 	.word	0x08006e0d
 8006dbc:	08006e0d 	.word	0x08006e0d
 8006dc0:	08006dfb 	.word	0x08006dfb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0202 	orr.w	r2, r2, #2
 8006dd2:	60da      	str	r2, [r3, #12]
      break;
 8006dd4:	e01b      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0204 	orr.w	r2, r2, #4
 8006de4:	60da      	str	r2, [r3, #12]
      break;
 8006de6:	e012      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0208 	orr.w	r2, r2, #8
 8006df6:	60da      	str	r2, [r3, #12]
      break;
 8006df8:	e009      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0210 	orr.w	r2, r2, #16
 8006e08:	60da      	str	r2, [r3, #12]
      break;
 8006e0a:	e000      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006e0c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2201      	movs	r2, #1
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f9a4 	bl	8008164 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <HAL_TIM_IC_Start_IT+0xd8>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b06      	cmp	r3, #6
 8006e2c:	d00b      	beq.n	8006e46 <HAL_TIM_IC_Start_IT+0xce>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e34:	d007      	beq.n	8006e46 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	00010007 	.word	0x00010007

08006e54 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	d841      	bhi.n	8006ee8 <HAL_TIM_IC_Stop_IT+0x94>
 8006e64:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <HAL_TIM_IC_Stop_IT+0x18>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006ee9 	.word	0x08006ee9
 8006e78:	08006ee9 	.word	0x08006ee9
 8006e7c:	08006eb3 	.word	0x08006eb3
 8006e80:	08006ee9 	.word	0x08006ee9
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08006ee9 	.word	0x08006ee9
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ee9 	.word	0x08006ee9
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006ed7 	.word	0x08006ed7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0202 	bic.w	r2, r2, #2
 8006eae:	60da      	str	r2, [r3, #12]
      break;
 8006eb0:	e01b      	b.n	8006eea <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0204 	bic.w	r2, r2, #4
 8006ec0:	60da      	str	r2, [r3, #12]
      break;
 8006ec2:	e012      	b.n	8006eea <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0208 	bic.w	r2, r2, #8
 8006ed2:	60da      	str	r2, [r3, #12]
      break;
 8006ed4:	e009      	b.n	8006eea <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0210 	bic.w	r2, r2, #16
 8006ee4:	60da      	str	r2, [r3, #12]
      break;
 8006ee6:	e000      	b.n	8006eea <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8006ee8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 f936 	bl	8008164 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a1a      	ldr	r2, [r3, #32]
 8006efe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10f      	bne.n	8006f28 <HAL_TIM_IC_Stop_IT+0xd4>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	f240 4344 	movw	r3, #1092	; 0x444
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <HAL_TIM_IC_Stop_IT+0xd4>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d122      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d11b      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0202 	mvn.w	r2, #2
 8006f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fa f93e 	bl	80011f8 <HAL_TIM_IC_CaptureCallback>
 8006f7c:	e005      	b.n	8006f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fbb4 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fbbb 	bl	8007700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d122      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d11b      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0204 	mvn.w	r2, #4
 8006fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fa f914 	bl	80011f8 <HAL_TIM_IC_CaptureCallback>
 8006fd0:	e005      	b.n	8006fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb8a 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb91 	bl	8007700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d122      	bne.n	8007038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d11b      	bne.n	8007038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0208 	mvn.w	r2, #8
 8007008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fa f8ea 	bl	80011f8 <HAL_TIM_IC_CaptureCallback>
 8007024:	e005      	b.n	8007032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fb60 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb67 	bl	8007700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b10      	cmp	r3, #16
 8007044:	d122      	bne.n	800708c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b10      	cmp	r3, #16
 8007052:	d11b      	bne.n	800708c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0210 	mvn.w	r2, #16
 800705c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2208      	movs	r2, #8
 8007062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fa f8c0 	bl	80011f8 <HAL_TIM_IC_CaptureCallback>
 8007078:	e005      	b.n	8007086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fb36 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb3d 	bl	8007700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10e      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0201 	mvn.w	r2, #1
 80070b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fb10 	bl	80076d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d10e      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d107      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 f8f0 	bl	80082c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f2:	d10e      	bne.n	8007112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d107      	bne.n	8007112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800710a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 f8e3 	bl	80082d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d10e      	bne.n	800713e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d107      	bne.n	800713e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 faeb 	bl	8007714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b20      	cmp	r3, #32
 800714a:	d10e      	bne.n	800716a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b20      	cmp	r3, #32
 8007158:	d107      	bne.n	800716a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f06f 0220 	mvn.w	r2, #32
 8007162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 f8a3 	bl	80082b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_TIM_IC_ConfigChannel+0x1a>
 8007188:	2302      	movs	r3, #2
 800718a:	e08a      	b.n	80072a2 <HAL_TIM_IC_ConfigChannel+0x130>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d11b      	bne.n	80071da <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f000 fe1f 	bl	8007df4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 020c 	bic.w	r2, r2, #12
 80071c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6999      	ldr	r1, [r3, #24]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	619a      	str	r2, [r3, #24]
 80071d8:	e05a      	b.n	8007290 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d11c      	bne.n	800721a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6819      	ldr	r1, [r3, #0]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f000 fe97 	bl	8007f22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007202:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6999      	ldr	r1, [r3, #24]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	021a      	lsls	r2, r3, #8
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	619a      	str	r2, [r3, #24]
 8007218:	e03a      	b.n	8007290 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d11b      	bne.n	8007258 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6819      	ldr	r1, [r3, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f000 fee4 	bl	8007ffc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 020c 	bic.w	r2, r2, #12
 8007242:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69d9      	ldr	r1, [r3, #28]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	61da      	str	r2, [r3, #28]
 8007256:	e01b      	b.n	8007290 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f000 ff04 	bl	8008074 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800727a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69d9      	ldr	r1, [r3, #28]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e105      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b14      	cmp	r3, #20
 80072da:	f200 80f0 	bhi.w	80074be <HAL_TIM_PWM_ConfigChannel+0x212>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007339 	.word	0x08007339
 80072e8:	080074bf 	.word	0x080074bf
 80072ec:	080074bf 	.word	0x080074bf
 80072f0:	080074bf 	.word	0x080074bf
 80072f4:	08007379 	.word	0x08007379
 80072f8:	080074bf 	.word	0x080074bf
 80072fc:	080074bf 	.word	0x080074bf
 8007300:	080074bf 	.word	0x080074bf
 8007304:	080073bb 	.word	0x080073bb
 8007308:	080074bf 	.word	0x080074bf
 800730c:	080074bf 	.word	0x080074bf
 8007310:	080074bf 	.word	0x080074bf
 8007314:	080073fb 	.word	0x080073fb
 8007318:	080074bf 	.word	0x080074bf
 800731c:	080074bf 	.word	0x080074bf
 8007320:	080074bf 	.word	0x080074bf
 8007324:	0800743d 	.word	0x0800743d
 8007328:	080074bf 	.word	0x080074bf
 800732c:	080074bf 	.word	0x080074bf
 8007330:	080074bf 	.word	0x080074bf
 8007334:	0800747d 	.word	0x0800747d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fa82 	bl	8007848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0208 	orr.w	r2, r2, #8
 8007352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0204 	bic.w	r2, r2, #4
 8007362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6999      	ldr	r1, [r3, #24]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	619a      	str	r2, [r3, #24]
      break;
 8007376:	e0a3      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 faf2 	bl	8007968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6999      	ldr	r1, [r3, #24]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	021a      	lsls	r2, r3, #8
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	619a      	str	r2, [r3, #24]
      break;
 80073b8:	e082      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fb5b 	bl	8007a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0208 	orr.w	r2, r2, #8
 80073d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0204 	bic.w	r2, r2, #4
 80073e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69d9      	ldr	r1, [r3, #28]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	61da      	str	r2, [r3, #28]
      break;
 80073f8:	e062      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fbc3 	bl	8007b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69d9      	ldr	r1, [r3, #28]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	021a      	lsls	r2, r3, #8
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	61da      	str	r2, [r3, #28]
      break;
 800743a:	e041      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fc0c 	bl	8007c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0208 	orr.w	r2, r2, #8
 8007456:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0204 	bic.w	r2, r2, #4
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800747a:	e021      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fc50 	bl	8007d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074bc:	e000      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80074be:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_ConfigClockSource+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e0a8      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x16a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007512:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d067      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0x124>
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d80b      	bhi.n	800754c <HAL_TIM_ConfigClockSource+0x70>
 8007534:	2b10      	cmp	r3, #16
 8007536:	d073      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0x144>
 8007538:	2b10      	cmp	r3, #16
 800753a:	d802      	bhi.n	8007542 <HAL_TIM_ConfigClockSource+0x66>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d06f      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007540:	e078      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007542:	2b20      	cmp	r3, #32
 8007544:	d06c      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0x144>
 8007546:	2b30      	cmp	r3, #48	; 0x30
 8007548:	d06a      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800754a:	e073      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800754c:	2b70      	cmp	r3, #112	; 0x70
 800754e:	d00d      	beq.n	800756c <HAL_TIM_ConfigClockSource+0x90>
 8007550:	2b70      	cmp	r3, #112	; 0x70
 8007552:	d804      	bhi.n	800755e <HAL_TIM_ConfigClockSource+0x82>
 8007554:	2b50      	cmp	r3, #80	; 0x50
 8007556:	d033      	beq.n	80075c0 <HAL_TIM_ConfigClockSource+0xe4>
 8007558:	2b60      	cmp	r3, #96	; 0x60
 800755a:	d041      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800755c:	e06a      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007562:	d066      	beq.n	8007632 <HAL_TIM_ConfigClockSource+0x156>
 8007564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007568:	d017      	beq.n	800759a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800756a:	e063      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6899      	ldr	r1, [r3, #8]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f000 fdd2 	bl	8008124 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800758e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	609a      	str	r2, [r3, #8]
      break;
 8007598:	e04c      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6899      	ldr	r1, [r3, #8]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f000 fdbb 	bl	8008124 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075bc:	609a      	str	r2, [r3, #8]
      break;
 80075be:	e039      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	6859      	ldr	r1, [r3, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f000 fc79 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2150      	movs	r1, #80	; 0x50
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fd88 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 80075de:	e029      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6859      	ldr	r1, [r3, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	461a      	mov	r2, r3
 80075ee:	f000 fcd5 	bl	8007f9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2160      	movs	r1, #96	; 0x60
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fd78 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 80075fe:	e019      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	461a      	mov	r2, r3
 800760e:	f000 fc59 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2140      	movs	r1, #64	; 0x40
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fd68 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 800761e:	e009      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f000 fd5f 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 8007630:	e000      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b0c      	cmp	r3, #12
 8007662:	d831      	bhi.n	80076c8 <HAL_TIM_ReadCapturedValue+0x78>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	080076a1 	.word	0x080076a1
 8007670:	080076c9 	.word	0x080076c9
 8007674:	080076c9 	.word	0x080076c9
 8007678:	080076c9 	.word	0x080076c9
 800767c:	080076ab 	.word	0x080076ab
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076c9 	.word	0x080076c9
 8007688:	080076c9 	.word	0x080076c9
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076c9 	.word	0x080076c9
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076c9 	.word	0x080076c9
 800769c:	080076bf 	.word	0x080076bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	60fb      	str	r3, [r7, #12]

      break;
 80076a8:	e00f      	b.n	80076ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	60fb      	str	r3, [r7, #12]

      break;
 80076b2:	e00a      	b.n	80076ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	60fb      	str	r3, [r7, #12]

      break;
 80076bc:	e005      	b.n	80076ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	60fb      	str	r3, [r7, #12]

      break;
 80076c6:	e000      	b.n	80076ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80076c8:	bf00      	nop
  }

  return tmpreg;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a3c      	ldr	r2, [pc, #240]	; (800782c <TIM_Base_SetConfig+0x104>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <TIM_Base_SetConfig+0x38>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007746:	d00b      	beq.n	8007760 <TIM_Base_SetConfig+0x38>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a39      	ldr	r2, [pc, #228]	; (8007830 <TIM_Base_SetConfig+0x108>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_Base_SetConfig+0x38>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a38      	ldr	r2, [pc, #224]	; (8007834 <TIM_Base_SetConfig+0x10c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_Base_SetConfig+0x38>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a37      	ldr	r2, [pc, #220]	; (8007838 <TIM_Base_SetConfig+0x110>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2d      	ldr	r2, [pc, #180]	; (800782c <TIM_Base_SetConfig+0x104>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01b      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007780:	d017      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <TIM_Base_SetConfig+0x108>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a29      	ldr	r2, [pc, #164]	; (8007834 <TIM_Base_SetConfig+0x10c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00f      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a28      	ldr	r2, [pc, #160]	; (8007838 <TIM_Base_SetConfig+0x110>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00b      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a27      	ldr	r2, [pc, #156]	; (800783c <TIM_Base_SetConfig+0x114>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d007      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a26      	ldr	r2, [pc, #152]	; (8007840 <TIM_Base_SetConfig+0x118>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <TIM_Base_SetConfig+0x8a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a25      	ldr	r2, [pc, #148]	; (8007844 <TIM_Base_SetConfig+0x11c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d108      	bne.n	80077c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a10      	ldr	r2, [pc, #64]	; (800782c <TIM_Base_SetConfig+0x104>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00f      	beq.n	8007810 <TIM_Base_SetConfig+0xe8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a11      	ldr	r2, [pc, #68]	; (8007838 <TIM_Base_SetConfig+0x110>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00b      	beq.n	8007810 <TIM_Base_SetConfig+0xe8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a10      	ldr	r2, [pc, #64]	; (800783c <TIM_Base_SetConfig+0x114>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_Base_SetConfig+0xe8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <TIM_Base_SetConfig+0x118>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_Base_SetConfig+0xe8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <TIM_Base_SetConfig+0x11c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d103      	bne.n	8007818 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	615a      	str	r2, [r3, #20]
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40012c00 	.word	0x40012c00
 8007830:	40000400 	.word	0x40000400
 8007834:	40000800 	.word	0x40000800
 8007838:	40013400 	.word	0x40013400
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800

08007848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f023 0201 	bic.w	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f023 0302 	bic.w	r3, r3, #2
 8007894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a2c      	ldr	r2, [pc, #176]	; (8007954 <TIM_OC1_SetConfig+0x10c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00f      	beq.n	80078c8 <TIM_OC1_SetConfig+0x80>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a2b      	ldr	r2, [pc, #172]	; (8007958 <TIM_OC1_SetConfig+0x110>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00b      	beq.n	80078c8 <TIM_OC1_SetConfig+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a2a      	ldr	r2, [pc, #168]	; (800795c <TIM_OC1_SetConfig+0x114>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d007      	beq.n	80078c8 <TIM_OC1_SetConfig+0x80>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a29      	ldr	r2, [pc, #164]	; (8007960 <TIM_OC1_SetConfig+0x118>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_OC1_SetConfig+0x80>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a28      	ldr	r2, [pc, #160]	; (8007964 <TIM_OC1_SetConfig+0x11c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d10c      	bne.n	80078e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f023 0308 	bic.w	r3, r3, #8
 80078ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 0304 	bic.w	r3, r3, #4
 80078e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1b      	ldr	r2, [pc, #108]	; (8007954 <TIM_OC1_SetConfig+0x10c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_OC1_SetConfig+0xc2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <TIM_OC1_SetConfig+0x110>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_OC1_SetConfig+0xc2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a19      	ldr	r2, [pc, #100]	; (800795c <TIM_OC1_SetConfig+0x114>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_OC1_SetConfig+0xc2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a18      	ldr	r2, [pc, #96]	; (8007960 <TIM_OC1_SetConfig+0x118>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_OC1_SetConfig+0xc2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a17      	ldr	r2, [pc, #92]	; (8007964 <TIM_OC1_SetConfig+0x11c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d111      	bne.n	800792e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	621a      	str	r2, [r3, #32]
}
 8007948:	bf00      	nop
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40013400 	.word	0x40013400
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0210 	bic.w	r2, r3, #16
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0320 	bic.w	r3, r3, #32
 80079b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a28      	ldr	r2, [pc, #160]	; (8007a68 <TIM_OC2_SetConfig+0x100>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_OC2_SetConfig+0x6c>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a27      	ldr	r2, [pc, #156]	; (8007a6c <TIM_OC2_SetConfig+0x104>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d10d      	bne.n	80079f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <TIM_OC2_SetConfig+0x100>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00f      	beq.n	8007a18 <TIM_OC2_SetConfig+0xb0>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <TIM_OC2_SetConfig+0x104>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00b      	beq.n	8007a18 <TIM_OC2_SetConfig+0xb0>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <TIM_OC2_SetConfig+0x108>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <TIM_OC2_SetConfig+0xb0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <TIM_OC2_SetConfig+0x10c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_OC2_SetConfig+0xb0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <TIM_OC2_SetConfig+0x110>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d113      	bne.n	8007a40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40012c00 	.word	0x40012c00
 8007a6c:	40013400 	.word	0x40013400
 8007a70:	40014000 	.word	0x40014000
 8007a74:	40014400 	.word	0x40014400
 8007a78:	40014800 	.word	0x40014800

08007a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <TIM_OC3_SetConfig+0xfc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_OC3_SetConfig+0x6a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <TIM_OC3_SetConfig+0x100>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d10d      	bne.n	8007b02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b00:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <TIM_OC3_SetConfig+0xfc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00f      	beq.n	8007b2a <TIM_OC3_SetConfig+0xae>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <TIM_OC3_SetConfig+0x100>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00b      	beq.n	8007b2a <TIM_OC3_SetConfig+0xae>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1a      	ldr	r2, [pc, #104]	; (8007b80 <TIM_OC3_SetConfig+0x104>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d007      	beq.n	8007b2a <TIM_OC3_SetConfig+0xae>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <TIM_OC3_SetConfig+0x108>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC3_SetConfig+0xae>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a18      	ldr	r2, [pc, #96]	; (8007b88 <TIM_OC3_SetConfig+0x10c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d113      	bne.n	8007b52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	621a      	str	r2, [r3, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40013400 	.word	0x40013400
 8007b80:	40014000 	.word	0x40014000
 8007b84:	40014400 	.word	0x40014400
 8007b88:	40014800 	.word	0x40014800

08007b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	031b      	lsls	r3, r3, #12
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a18      	ldr	r2, [pc, #96]	; (8007c4c <TIM_OC4_SetConfig+0xc0>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00f      	beq.n	8007c10 <TIM_OC4_SetConfig+0x84>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a17      	ldr	r2, [pc, #92]	; (8007c50 <TIM_OC4_SetConfig+0xc4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <TIM_OC4_SetConfig+0x84>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <TIM_OC4_SetConfig+0xc8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d007      	beq.n	8007c10 <TIM_OC4_SetConfig+0x84>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <TIM_OC4_SetConfig+0xcc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC4_SetConfig+0x84>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a14      	ldr	r2, [pc, #80]	; (8007c5c <TIM_OC4_SetConfig+0xd0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d109      	bne.n	8007c24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	019b      	lsls	r3, r3, #6
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40012c00 	.word	0x40012c00
 8007c50:	40013400 	.word	0x40013400
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800

08007c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	041b      	lsls	r3, r3, #16
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <TIM_OC5_SetConfig+0xb4>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00f      	beq.n	8007cda <TIM_OC5_SetConfig+0x7a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <TIM_OC5_SetConfig+0xb8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00b      	beq.n	8007cda <TIM_OC5_SetConfig+0x7a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a15      	ldr	r2, [pc, #84]	; (8007d1c <TIM_OC5_SetConfig+0xbc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <TIM_OC5_SetConfig+0x7a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a14      	ldr	r2, [pc, #80]	; (8007d20 <TIM_OC5_SetConfig+0xc0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_OC5_SetConfig+0x7a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a13      	ldr	r2, [pc, #76]	; (8007d24 <TIM_OC5_SetConfig+0xc4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d109      	bne.n	8007cee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	621a      	str	r2, [r3, #32]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	40013400 	.word	0x40013400
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800

08007d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	051b      	lsls	r3, r3, #20
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <TIM_OC6_SetConfig+0xb8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00f      	beq.n	8007da4 <TIM_OC6_SetConfig+0x7c>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <TIM_OC6_SetConfig+0xbc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00b      	beq.n	8007da4 <TIM_OC6_SetConfig+0x7c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a16      	ldr	r2, [pc, #88]	; (8007de8 <TIM_OC6_SetConfig+0xc0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d007      	beq.n	8007da4 <TIM_OC6_SetConfig+0x7c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a15      	ldr	r2, [pc, #84]	; (8007dec <TIM_OC6_SetConfig+0xc4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_OC6_SetConfig+0x7c>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a14      	ldr	r2, [pc, #80]	; (8007df0 <TIM_OC6_SetConfig+0xc8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d109      	bne.n	8007db8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	029b      	lsls	r3, r3, #10
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	40012c00 	.word	0x40012c00
 8007de4:	40013400 	.word	0x40013400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40014400 	.word	0x40014400
 8007df0:	40014800 	.word	0x40014800

08007df4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <TIM_TI1_SetConfig+0xbc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d013      	beq.n	8007e4a <TIM_TI1_SetConfig+0x56>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e28:	d00f      	beq.n	8007e4a <TIM_TI1_SetConfig+0x56>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	; (8007eb4 <TIM_TI1_SetConfig+0xc0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00b      	beq.n	8007e4a <TIM_TI1_SetConfig+0x56>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a20      	ldr	r2, [pc, #128]	; (8007eb8 <TIM_TI1_SetConfig+0xc4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d007      	beq.n	8007e4a <TIM_TI1_SetConfig+0x56>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a1f      	ldr	r2, [pc, #124]	; (8007ebc <TIM_TI1_SetConfig+0xc8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d003      	beq.n	8007e4a <TIM_TI1_SetConfig+0x56>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a1e      	ldr	r2, [pc, #120]	; (8007ec0 <TIM_TI1_SetConfig+0xcc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d101      	bne.n	8007e4e <TIM_TI1_SetConfig+0x5a>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <TIM_TI1_SetConfig+0x5c>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e003      	b.n	8007e6e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f023 030a 	bic.w	r3, r3, #10
 8007e88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f003 030a 	and.w	r3, r3, #10
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40013400 	.word	0x40013400
 8007ec0:	40014000 	.word	0x40014000

08007ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 030a 	bic.w	r3, r3, #10
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b087      	sub	sp, #28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f023 0210 	bic.w	r2, r3, #16
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	031b      	lsls	r3, r3, #12
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	621a      	str	r2, [r3, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	b2db      	uxtb	r3, r3
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800804c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	031b      	lsls	r3, r3, #12
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	031b      	lsls	r3, r3, #12
 80080cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	f043 0307 	orr.w	r3, r3, #7
 8008110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	609a      	str	r2, [r3, #8]
}
 8008118:	bf00      	nop
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	021a      	lsls	r2, r3, #8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	431a      	orrs	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4313      	orrs	r3, r2
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	609a      	str	r2, [r3, #8]
}
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2201      	movs	r2, #1
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1a      	ldr	r2, [r3, #32]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	43db      	mvns	r3, r3
 8008186:	401a      	ands	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 031f 	and.w	r3, r3, #31
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	fa01 f303 	lsl.w	r3, r1, r3
 800819c:	431a      	orrs	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e063      	b.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a2b      	ldr	r2, [pc, #172]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a2a      	ldr	r2, [pc, #168]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d108      	bne.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d018      	beq.n	8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823a:	d013      	beq.n	8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00e      	beq.n	8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d009      	beq.n	8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a12      	ldr	r2, [pc, #72]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d004      	beq.n	8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a13      	ldr	r2, [pc, #76]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d10c      	bne.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800826a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	4313      	orrs	r3, r2
 8008274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40012c00 	.word	0x40012c00
 80082a0:	40013400 	.word	0x40013400
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40014000 	.word	0x40014000

080082b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e040      	b.n	8008380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fb f88c 	bl	800342c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2224      	movs	r2, #36	; 0x24
 8008318:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa1a 	bl	8008764 <UART_SetConfig>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e022      	b.n	8008380 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fc28 	bl	8008b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fcaf 	bl	8008cdc <UART_CheckIdleState>
 800837e:	4603      	mov	r3, r0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af02      	add	r7, sp, #8
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839c:	2b20      	cmp	r3, #32
 800839e:	f040 8081 	bne.w	80084a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <HAL_UART_Transmit+0x26>
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e079      	b.n	80084a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_UART_Transmit+0x38>
 80083bc:	2302      	movs	r3, #2
 80083be:	e072      	b.n	80084a6 <HAL_UART_Transmit+0x11e>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2221      	movs	r2, #33	; 0x21
 80083d2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80083d4:	f7fb f970 	bl	80036b8 <HAL_GetTick>
 80083d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	88fa      	ldrh	r2, [r7, #6]
 80083e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f2:	d108      	bne.n	8008406 <HAL_UART_Transmit+0x7e>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e003      	b.n	800840e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800840e:	e02d      	b.n	800846c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	2180      	movs	r1, #128	; 0x80
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fca3 	bl	8008d66 <UART_WaitOnFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e03d      	b.n	80084a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10b      	bne.n	8008448 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	881a      	ldrh	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800843c:	b292      	uxth	r2, r2
 800843e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	3302      	adds	r3, #2
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	e008      	b.n	800845a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	781a      	ldrb	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	b292      	uxth	r2, r2
 8008452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	3301      	adds	r3, #1
 8008458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008472:	b29b      	uxth	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1cb      	bne.n	8008410 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2200      	movs	r2, #0
 8008480:	2140      	movs	r1, #64	; 0x40
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fc6f 	bl	8008d66 <UART_WaitOnFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e009      	b.n	80084a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e000      	b.n	80084a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80084a4:	2302      	movs	r3, #2
  }
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084d0:	69fa      	ldr	r2, [r7, #28]
 80084d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80084d6:	4013      	ands	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d113      	bne.n	8008508 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00e      	beq.n	8008508 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8114 	beq.w	8008726 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
      }
      return;
 8008506:	e10e      	b.n	8008726 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 80d6 	beq.w	80086bc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80cb 	beq.w	80086bc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00e      	beq.n	800854e <HAL_UART_IRQHandler+0x9e>
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008546:	f043 0201 	orr.w	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <HAL_UART_IRQHandler+0xc6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d009      	beq.n	8008576 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2202      	movs	r2, #2
 8008568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856e:	f043 0204 	orr.w	r2, r3, #4
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00e      	beq.n	800859e <HAL_UART_IRQHandler+0xee>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2204      	movs	r2, #4
 8008590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008596:	f043 0202 	orr.w	r2, r3, #2
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d013      	beq.n	80085d0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2208      	movs	r2, #8
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c8:	f043 0208 	orr.w	r2, r3, #8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00f      	beq.n	80085fa <HAL_UART_IRQHandler+0x14a>
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085f2:	f043 0220 	orr.w	r2, r3, #32
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 8093 	beq.w	800872a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00c      	beq.n	8008628 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	d004      	beq.n	8008646 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008642:	2b00      	cmp	r3, #0
 8008644:	d031      	beq.n	80086aa <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fc08 	bl	8008e5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	d123      	bne.n	80086a2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008668:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d013      	beq.n	800869a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008676:	4a30      	ldr	r2, [pc, #192]	; (8008738 <HAL_UART_IRQHandler+0x288>)
 8008678:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867e:	4618      	mov	r0, r3
 8008680:	f7fb f959 	bl	8003936 <HAL_DMA_Abort_IT>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d016      	beq.n	80086b8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008698:	e00e      	b.n	80086b8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f858 	bl	8008750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a0:	e00a      	b.n	80086b8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f854 	bl	8008750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a8:	e006      	b.n	80086b8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f850 	bl	8008750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80086b6:	e038      	b.n	800872a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	bf00      	nop
    return;
 80086ba:	e036      	b.n	800872a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <HAL_UART_IRQHandler+0x232>
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fc0d 	bl	8008efa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086e0:	e026      	b.n	8008730 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00d      	beq.n	8008708 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d008      	beq.n	8008708 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
    }
    return;
 8008706:	e012      	b.n	800872e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00e      	beq.n	8008730 <HAL_UART_IRQHandler+0x280>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d009      	beq.n	8008730 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fbd3 	bl	8008ec8 <UART_EndTransmit_IT>
    return;
 8008722:	bf00      	nop
 8008724:	e004      	b.n	8008730 <HAL_UART_IRQHandler+0x280>
      return;
 8008726:	bf00      	nop
 8008728:	e002      	b.n	8008730 <HAL_UART_IRQHandler+0x280>
    return;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_UART_IRQHandler+0x280>
    return;
 800872e:	bf00      	nop
  }

}
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	08008e9d 	.word	0x08008e9d

0800873c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800876c:	2300      	movs	r3, #0
 800876e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008796:	f023 030c 	bic.w	r3, r3, #12
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	6939      	ldr	r1, [r7, #16]
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	430a      	orrs	r2, r1
 80087dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4aa9      	ldr	r2, [pc, #676]	; (8008a88 <UART_SetConfig+0x324>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d121      	bne.n	800882c <UART_SetConfig+0xc8>
 80087e8:	4ba8      	ldr	r3, [pc, #672]	; (8008a8c <UART_SetConfig+0x328>)
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d817      	bhi.n	8008824 <UART_SetConfig+0xc0>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <UART_SetConfig+0x98>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	08008819 	.word	0x08008819
 8008804:	0800881f 	.word	0x0800881f
 8008808:	08008813 	.word	0x08008813
 800880c:	2301      	movs	r3, #1
 800880e:	77fb      	strb	r3, [r7, #31]
 8008810:	e0b2      	b.n	8008978 <UART_SetConfig+0x214>
 8008812:	2302      	movs	r3, #2
 8008814:	77fb      	strb	r3, [r7, #31]
 8008816:	e0af      	b.n	8008978 <UART_SetConfig+0x214>
 8008818:	2304      	movs	r3, #4
 800881a:	77fb      	strb	r3, [r7, #31]
 800881c:	e0ac      	b.n	8008978 <UART_SetConfig+0x214>
 800881e:	2308      	movs	r3, #8
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e0a9      	b.n	8008978 <UART_SetConfig+0x214>
 8008824:	2310      	movs	r3, #16
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	bf00      	nop
 800882a:	e0a5      	b.n	8008978 <UART_SetConfig+0x214>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a97      	ldr	r2, [pc, #604]	; (8008a90 <UART_SetConfig+0x32c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d123      	bne.n	800887e <UART_SetConfig+0x11a>
 8008836:	4b95      	ldr	r3, [pc, #596]	; (8008a8c <UART_SetConfig+0x328>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800883e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008842:	d012      	beq.n	800886a <UART_SetConfig+0x106>
 8008844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008848:	d802      	bhi.n	8008850 <UART_SetConfig+0xec>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d007      	beq.n	800885e <UART_SetConfig+0xfa>
 800884e:	e012      	b.n	8008876 <UART_SetConfig+0x112>
 8008850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008854:	d00c      	beq.n	8008870 <UART_SetConfig+0x10c>
 8008856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800885a:	d003      	beq.n	8008864 <UART_SetConfig+0x100>
 800885c:	e00b      	b.n	8008876 <UART_SetConfig+0x112>
 800885e:	2300      	movs	r3, #0
 8008860:	77fb      	strb	r3, [r7, #31]
 8008862:	e089      	b.n	8008978 <UART_SetConfig+0x214>
 8008864:	2302      	movs	r3, #2
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	e086      	b.n	8008978 <UART_SetConfig+0x214>
 800886a:	2304      	movs	r3, #4
 800886c:	77fb      	strb	r3, [r7, #31]
 800886e:	e083      	b.n	8008978 <UART_SetConfig+0x214>
 8008870:	2308      	movs	r3, #8
 8008872:	77fb      	strb	r3, [r7, #31]
 8008874:	e080      	b.n	8008978 <UART_SetConfig+0x214>
 8008876:	2310      	movs	r3, #16
 8008878:	77fb      	strb	r3, [r7, #31]
 800887a:	bf00      	nop
 800887c:	e07c      	b.n	8008978 <UART_SetConfig+0x214>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a84      	ldr	r2, [pc, #528]	; (8008a94 <UART_SetConfig+0x330>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d123      	bne.n	80088d0 <UART_SetConfig+0x16c>
 8008888:	4b80      	ldr	r3, [pc, #512]	; (8008a8c <UART_SetConfig+0x328>)
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008894:	d012      	beq.n	80088bc <UART_SetConfig+0x158>
 8008896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800889a:	d802      	bhi.n	80088a2 <UART_SetConfig+0x13e>
 800889c:	2b00      	cmp	r3, #0
 800889e:	d007      	beq.n	80088b0 <UART_SetConfig+0x14c>
 80088a0:	e012      	b.n	80088c8 <UART_SetConfig+0x164>
 80088a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088a6:	d00c      	beq.n	80088c2 <UART_SetConfig+0x15e>
 80088a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80088ac:	d003      	beq.n	80088b6 <UART_SetConfig+0x152>
 80088ae:	e00b      	b.n	80088c8 <UART_SetConfig+0x164>
 80088b0:	2300      	movs	r3, #0
 80088b2:	77fb      	strb	r3, [r7, #31]
 80088b4:	e060      	b.n	8008978 <UART_SetConfig+0x214>
 80088b6:	2302      	movs	r3, #2
 80088b8:	77fb      	strb	r3, [r7, #31]
 80088ba:	e05d      	b.n	8008978 <UART_SetConfig+0x214>
 80088bc:	2304      	movs	r3, #4
 80088be:	77fb      	strb	r3, [r7, #31]
 80088c0:	e05a      	b.n	8008978 <UART_SetConfig+0x214>
 80088c2:	2308      	movs	r3, #8
 80088c4:	77fb      	strb	r3, [r7, #31]
 80088c6:	e057      	b.n	8008978 <UART_SetConfig+0x214>
 80088c8:	2310      	movs	r3, #16
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	bf00      	nop
 80088ce:	e053      	b.n	8008978 <UART_SetConfig+0x214>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a70      	ldr	r2, [pc, #448]	; (8008a98 <UART_SetConfig+0x334>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d123      	bne.n	8008922 <UART_SetConfig+0x1be>
 80088da:	4b6c      	ldr	r3, [pc, #432]	; (8008a8c <UART_SetConfig+0x328>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80088e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088e6:	d012      	beq.n	800890e <UART_SetConfig+0x1aa>
 80088e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ec:	d802      	bhi.n	80088f4 <UART_SetConfig+0x190>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <UART_SetConfig+0x19e>
 80088f2:	e012      	b.n	800891a <UART_SetConfig+0x1b6>
 80088f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088f8:	d00c      	beq.n	8008914 <UART_SetConfig+0x1b0>
 80088fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088fe:	d003      	beq.n	8008908 <UART_SetConfig+0x1a4>
 8008900:	e00b      	b.n	800891a <UART_SetConfig+0x1b6>
 8008902:	2300      	movs	r3, #0
 8008904:	77fb      	strb	r3, [r7, #31]
 8008906:	e037      	b.n	8008978 <UART_SetConfig+0x214>
 8008908:	2302      	movs	r3, #2
 800890a:	77fb      	strb	r3, [r7, #31]
 800890c:	e034      	b.n	8008978 <UART_SetConfig+0x214>
 800890e:	2304      	movs	r3, #4
 8008910:	77fb      	strb	r3, [r7, #31]
 8008912:	e031      	b.n	8008978 <UART_SetConfig+0x214>
 8008914:	2308      	movs	r3, #8
 8008916:	77fb      	strb	r3, [r7, #31]
 8008918:	e02e      	b.n	8008978 <UART_SetConfig+0x214>
 800891a:	2310      	movs	r3, #16
 800891c:	77fb      	strb	r3, [r7, #31]
 800891e:	bf00      	nop
 8008920:	e02a      	b.n	8008978 <UART_SetConfig+0x214>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a5d      	ldr	r2, [pc, #372]	; (8008a9c <UART_SetConfig+0x338>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d123      	bne.n	8008974 <UART_SetConfig+0x210>
 800892c:	4b57      	ldr	r3, [pc, #348]	; (8008a8c <UART_SetConfig+0x328>)
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008938:	d012      	beq.n	8008960 <UART_SetConfig+0x1fc>
 800893a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800893e:	d802      	bhi.n	8008946 <UART_SetConfig+0x1e2>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d007      	beq.n	8008954 <UART_SetConfig+0x1f0>
 8008944:	e012      	b.n	800896c <UART_SetConfig+0x208>
 8008946:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800894a:	d00c      	beq.n	8008966 <UART_SetConfig+0x202>
 800894c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008950:	d003      	beq.n	800895a <UART_SetConfig+0x1f6>
 8008952:	e00b      	b.n	800896c <UART_SetConfig+0x208>
 8008954:	2300      	movs	r3, #0
 8008956:	77fb      	strb	r3, [r7, #31]
 8008958:	e00e      	b.n	8008978 <UART_SetConfig+0x214>
 800895a:	2302      	movs	r3, #2
 800895c:	77fb      	strb	r3, [r7, #31]
 800895e:	e00b      	b.n	8008978 <UART_SetConfig+0x214>
 8008960:	2304      	movs	r3, #4
 8008962:	77fb      	strb	r3, [r7, #31]
 8008964:	e008      	b.n	8008978 <UART_SetConfig+0x214>
 8008966:	2308      	movs	r3, #8
 8008968:	77fb      	strb	r3, [r7, #31]
 800896a:	e005      	b.n	8008978 <UART_SetConfig+0x214>
 800896c:	2310      	movs	r3, #16
 800896e:	77fb      	strb	r3, [r7, #31]
 8008970:	bf00      	nop
 8008972:	e001      	b.n	8008978 <UART_SetConfig+0x214>
 8008974:	2310      	movs	r3, #16
 8008976:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008980:	f040 808e 	bne.w	8008aa0 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008984:	7ffb      	ldrb	r3, [r7, #31]
 8008986:	2b08      	cmp	r3, #8
 8008988:	d85e      	bhi.n	8008a48 <UART_SetConfig+0x2e4>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <UART_SetConfig+0x22c>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089d5 	.word	0x080089d5
 8008998:	080089f5 	.word	0x080089f5
 800899c:	08008a49 	.word	0x08008a49
 80089a0:	08008a11 	.word	0x08008a11
 80089a4:	08008a49 	.word	0x08008a49
 80089a8:	08008a49 	.word	0x08008a49
 80089ac:	08008a49 	.word	0x08008a49
 80089b0:	08008a31 	.word	0x08008a31
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089b4:	f7fd ff08 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 80089b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	005a      	lsls	r2, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	085b      	lsrs	r3, r3, #1
 80089c4:	441a      	add	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	61bb      	str	r3, [r7, #24]
        break;
 80089d2:	e03c      	b.n	8008a4e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089d4:	f7fd ff1a 	bl	800680c <HAL_RCC_GetPCLK2Freq>
 80089d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	005a      	lsls	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	441a      	add	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	61bb      	str	r3, [r7, #24]
        break;
 80089f2:	e02c      	b.n	8008a4e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	085b      	lsrs	r3, r3, #1
 80089fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80089fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6852      	ldr	r2, [r2, #4]
 8008a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	61bb      	str	r3, [r7, #24]
        break;
 8008a0e:	e01e      	b.n	8008a4e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a10:	f7fd fe64 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 8008a14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	005a      	lsls	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	441a      	add	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	61bb      	str	r3, [r7, #24]
        break;
 8008a2e:	e00e      	b.n	8008a4e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	61bb      	str	r3, [r7, #24]
        break;
 8008a46:	e002      	b.n	8008a4e <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]
        break;
 8008a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b0f      	cmp	r3, #15
 8008a52:	d916      	bls.n	8008a82 <UART_SetConfig+0x31e>
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5a:	d212      	bcs.n	8008a82 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f023 030f 	bic.w	r3, r3, #15
 8008a64:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	897b      	ldrh	r3, [r7, #10]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	897a      	ldrh	r2, [r7, #10]
 8008a7e:	60da      	str	r2, [r3, #12]
 8008a80:	e07e      	b.n	8008b80 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	75fb      	strb	r3, [r7, #23]
 8008a86:	e07b      	b.n	8008b80 <UART_SetConfig+0x41c>
 8008a88:	40013800 	.word	0x40013800
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	40004400 	.word	0x40004400
 8008a94:	40004800 	.word	0x40004800
 8008a98:	40004c00 	.word	0x40004c00
 8008a9c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008aa0:	7ffb      	ldrb	r3, [r7, #31]
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	d85b      	bhi.n	8008b5e <UART_SetConfig+0x3fa>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <UART_SetConfig+0x348>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008aef 	.word	0x08008aef
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b5f 	.word	0x08008b5f
 8008abc:	08008b29 	.word	0x08008b29
 8008ac0:	08008b5f 	.word	0x08008b5f
 8008ac4:	08008b5f 	.word	0x08008b5f
 8008ac8:	08008b5f 	.word	0x08008b5f
 8008acc:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad0:	f7fd fe7a 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 8008ad4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	085a      	lsrs	r2, r3, #1
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	441a      	add	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	61bb      	str	r3, [r7, #24]
        break;
 8008aec:	e03a      	b.n	8008b64 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aee:	f7fd fe8d 	bl	800680c <HAL_RCC_GetPCLK2Freq>
 8008af2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	085a      	lsrs	r2, r3, #1
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	441a      	add	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	61bb      	str	r3, [r7, #24]
        break;
 8008b0a:	e02b      	b.n	8008b64 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8008b16:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6852      	ldr	r2, [r2, #4]
 8008b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	61bb      	str	r3, [r7, #24]
        break;
 8008b26:	e01d      	b.n	8008b64 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b28:	f7fd fdd8 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 8008b2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	085a      	lsrs	r2, r3, #1
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	61bb      	str	r3, [r7, #24]
        break;
 8008b44:	e00e      	b.n	8008b64 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	085b      	lsrs	r3, r3, #1
 8008b4c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	61bb      	str	r3, [r7, #24]
        break;
 8008b5c:	e002      	b.n	8008b64 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	75fb      	strb	r3, [r7, #23]
        break;
 8008b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	d908      	bls.n	8008b7c <UART_SetConfig+0x418>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b70:	d204      	bcs.n	8008b7c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	e001      	b.n	8008b80 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop

08008b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01a      	beq.n	8008cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c96:	d10a      	bne.n	8008cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	605a      	str	r2, [r3, #4]
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008cea:	f7fa fce5 	bl	80036b8 <HAL_GetTick>
 8008cee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d10e      	bne.n	8008d1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f82a 	bl	8008d66 <UART_WaitOnFlagUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e020      	b.n	8008d5e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0304 	and.w	r3, r3, #4
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d10e      	bne.n	8008d48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f814 	bl	8008d66 <UART_WaitOnFlagUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e00a      	b.n	8008d5e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	603b      	str	r3, [r7, #0]
 8008d72:	4613      	mov	r3, r2
 8008d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d76:	e05d      	b.n	8008e34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d059      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d80:	f7fa fc9a 	bl	80036b8 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d302      	bcc.n	8008d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d11b      	bne.n	8008dce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008da4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0201 	bic.w	r2, r2, #1
 8008db4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2220      	movs	r2, #32
 8008dba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e042      	b.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d02b      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dea:	d123      	bne.n	8008e34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008df4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e00f      	b.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69da      	ldr	r2, [r3, #28]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	bf0c      	ite	eq
 8008e44:	2301      	moveq	r3, #1
 8008e46:	2300      	movne	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d092      	beq.n	8008d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0201 	bic.w	r2, r2, #1
 8008e82:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fc48 	bl	8008750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ede:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff fc25 	bl	800873c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
	...

08008f10 <__libc_init_array>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4e0d      	ldr	r6, [pc, #52]	; (8008f48 <__libc_init_array+0x38>)
 8008f14:	4c0d      	ldr	r4, [pc, #52]	; (8008f4c <__libc_init_array+0x3c>)
 8008f16:	1ba4      	subs	r4, r4, r6
 8008f18:	10a4      	asrs	r4, r4, #2
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	42a5      	cmp	r5, r4
 8008f1e:	d109      	bne.n	8008f34 <__libc_init_array+0x24>
 8008f20:	4e0b      	ldr	r6, [pc, #44]	; (8008f50 <__libc_init_array+0x40>)
 8008f22:	4c0c      	ldr	r4, [pc, #48]	; (8008f54 <__libc_init_array+0x44>)
 8008f24:	f000 f82c 	bl	8008f80 <_init>
 8008f28:	1ba4      	subs	r4, r4, r6
 8008f2a:	10a4      	asrs	r4, r4, #2
 8008f2c:	2500      	movs	r5, #0
 8008f2e:	42a5      	cmp	r5, r4
 8008f30:	d105      	bne.n	8008f3e <__libc_init_array+0x2e>
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f38:	4798      	blx	r3
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	e7ee      	b.n	8008f1c <__libc_init_array+0xc>
 8008f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f42:	4798      	blx	r3
 8008f44:	3501      	adds	r5, #1
 8008f46:	e7f2      	b.n	8008f2e <__libc_init_array+0x1e>
 8008f48:	08009634 	.word	0x08009634
 8008f4c:	08009634 	.word	0x08009634
 8008f50:	08009634 	.word	0x08009634
 8008f54:	08009638 	.word	0x08009638

08008f58 <memcpy>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	1e43      	subs	r3, r0, #1
 8008f5c:	440a      	add	r2, r1
 8008f5e:	4291      	cmp	r1, r2
 8008f60:	d100      	bne.n	8008f64 <memcpy+0xc>
 8008f62:	bd10      	pop	{r4, pc}
 8008f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f6c:	e7f7      	b.n	8008f5e <memcpy+0x6>

08008f6e <memset>:
 8008f6e:	4402      	add	r2, r0
 8008f70:	4603      	mov	r3, r0
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d100      	bne.n	8008f78 <memset+0xa>
 8008f76:	4770      	bx	lr
 8008f78:	f803 1b01 	strb.w	r1, [r3], #1
 8008f7c:	e7f9      	b.n	8008f72 <memset+0x4>
	...

08008f80 <_init>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr

08008f8c <_fini>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	bf00      	nop
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr
