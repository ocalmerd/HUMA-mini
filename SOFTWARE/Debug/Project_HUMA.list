
Project_HUMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800957c  0800957c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800957c  0800957c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800957c  0800957c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000010  08009594  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08009594  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c8a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003424  00000000  00000000  00039cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  0003d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  0003e308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdf2  00000000  00000000  0003f388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011aa6  00000000  00000000  0005c17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f0a2  00000000  00000000  0006dc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ccc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  0010cd40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ef8 	.word	0x08008ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008ef8 	.word	0x08008ef8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ESC_Calibration>:
//
extern uint8_t eeprom_data[32];


void ESC_Calibration ( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	PWM_Output_Start();
 8000a08:	f000 fdac 	bl	8001564 <PWM_Output_Start>

	while ( true )
	{
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f811 	bl	8000a34 <Convert_Receiver_Channel>
 8000a12:	4602      	mov	r2, r0
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <ESC_Calibration+0x28>)
 8000a16:	601a      	str	r2, [r3, #0]

		esc_3 = receiver_input_channel_3;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <ESC_Calibration+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a1e:	6013      	str	r3, [r2, #0]

		PWM_Output_ESC_Calibration( esc_3 );
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fdd1 	bl	80015cc <PWM_Output_ESC_Calibration>
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a2a:	e7ef      	b.n	8000a0c <ESC_Calibration+0x8>
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	200000fc 	.word	0x200000fc

08000a34 <Convert_Receiver_Channel>:
	}
}

int Convert_Receiver_Channel( uint8_t function )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       	//First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           		//What channel corresponds with the specific function
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3317      	adds	r3, #23
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000 )	{	reverse = 1;	}               //Reverse channel when most significant bit is set
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3317      	adds	r3, #23
 8000a50:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da03      	bge.n	8000a62 <Convert_Receiver_Channel+0x2e>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a60:	e002      	b.n	8000a68 <Convert_Receiver_Channel+0x34>
	else	{	reverse = 0;	}                                                       //If the most significant is not set there is no reverse
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            		//Read the actual receiver value for the corresponding function
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	4a3e      	ldr	r2, [pc, #248]	; (8000b64 <Convert_Receiver_Channel+0x130>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	623b      	str	r3, [r7, #32]
	low	   = ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14];  	//Store the low value for the specific receiver input channel
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	330f      	adds	r3, #15
 8000a78:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	7ffa      	ldrb	r2, [r7, #31]
 8000a80:	3207      	adds	r2, #7
 8000a82:	0052      	lsls	r2, r2, #1
 8000a84:	4936      	ldr	r1, [pc, #216]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a86:	5c8a      	ldrb	r2, [r1, r2]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
	center = ( eeprom_data[channel * 2 - 1]  << 8 ) | eeprom_data[channel * 2 - 2 ]; 	//Store the center value for the specific receiver input channel
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a33      	ldr	r2, [pc, #204]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	7ffa      	ldrb	r2, [r7, #31]
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	4930      	ldr	r1, [pc, #192]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aa0:	5c8a      	ldrb	r2, [r1, r2]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	617b      	str	r3, [r7, #20]
	high   = ( eeprom_data[channel * 2 + 7]  << 8 ) | eeprom_data[channel * 2 + 6 ];  	//Store the high value for the specific receiver input channel
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3307      	adds	r3, #7
 8000aac:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	7ffa      	ldrb	r2, [r7, #31]
 8000ab4:	3203      	adds	r2, #3
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	4929      	ldr	r1, [pc, #164]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aba:	5c8a      	ldrb	r2, [r1, r2]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000ac0:	6a3a      	ldr	r2, [r7, #32]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	da1f      	bge.n	8000b08 <Convert_Receiver_Channel+0xd4>
	{                                                         							//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                                       //Limit the lowest value to the value that was detected during setup
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	da01      	bge.n	8000ad4 <Convert_Receiver_Channel+0xa0>
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);       	//Calculate and scale the actual value to a 1000 - 2000us value
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ade:	fb02 f203 	mul.w	r2, r2, r3
 8000ae2:	6979      	ldr	r1, [r7, #20]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aec:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                           //If the channel is reversed
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <Convert_Receiver_Channel+0xca>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000afc:	e02a      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else 	 {	return 1500 - difference;	}                                       //If the channel is not reversed
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b04:	3304      	adds	r3, #4
 8000b06:	e025      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else if( actual > center )
 8000b08:	6a3a      	ldr	r2, [r7, #32]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dd1f      	ble.n	8000b50 <Convert_Receiver_Channel+0x11c>
	{                                                                        			//The actual receiver value is higher than the center value
		if( actual > high )	{	actual = high;	}                                       //Limit the lowest value to the value that was detected during setup
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dd01      	ble.n	8000b1c <Convert_Receiver_Channel+0xe8>
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center);      	//Calculate and scale the actual value to a 1000 - 2000us value
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b26:	fb02 f203 	mul.w	r2, r2, r3
 8000b2a:	6939      	ldr	r1, [r7, #16]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                           //If the channel is reversed
 8000b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <Convert_Receiver_Channel+0x114>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b44:	3304      	adds	r3, #4
 8000b46:	e005      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else	{	return 1500 + difference;	}                                       //If the channel is not reversed
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000b4e:	e001      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else	{	return 1500;	}
 8000b50:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	372c      	adds	r7, #44	; 0x2c
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	2000007c 	.word	0x2000007c
 8000b64:	200000a4 	.word	0x200000a4

08000b68 <Flash_ErasePage>:

uint32_t PageError;


void Flash_ErasePage( uint32_t pageaddress )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b70:	f002 ff58 	bl	8003a24 <HAL_FLASH_Unlock>

//	HAL_FLASHEx_Erase( (FLASH_EraseInitTypeDef *) FLASH_TYPEERASE_MASSERASE, (uint32_t *) PageError);
	FLASH_PageErase( pageaddress );
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f003 f819 	bl	8003bac <FLASH_PageErase>

	HAL_FLASH_Lock();
 8000b7a:	f002 ff79 	bl	8003a70 <HAL_FLASH_Lock>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Flash_EEPROM_Data_Write>:

void Flash_EEPROM_Data_Write( uint8_t page, uint32_t address, uint32_t index, void *writeBuffer )
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b087      	sub	sp, #28
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + (index*2);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	617b      	str	r3, [r7, #20]

	//Unlock Flash
	HAL_FLASH_Unlock();
 8000ba0:	f002 ff40 	bl	8003a24 <HAL_FLASH_Unlock>

	//Write to Flash
	for( uint32_t i = 0; i < 1; i++ )
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	e013      	b.n	8000bd2 <Flash_EEPROM_Data_Write+0x4c>
	{
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ( (uint16_t *)writeBuffer )[i] );
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	f04f 0400 	mov.w	r4, #0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4623      	mov	r3, r4
 8000bbe:	6979      	ldr	r1, [r7, #20]
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f002 febf 	bl	8003944 <HAL_FLASH_Program>
		flashAddress++;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
	for( uint32_t i = 0; i < 1; i++ )
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0e8      	beq.n	8000baa <Flash_EEPROM_Data_Write+0x24>
	}

	//Lock the Flash space
	HAL_FLASH_Lock();
 8000bd8:	f002 ff4a 	bl	8003a70 <HAL_FLASH_Lock>
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}

08000be4 <Flash_EEPROM_Data_Read>:

void Flash_EEPROM_Data_Read( uint8_t sector, uint32_t address, uint32_t index, void *readBuffer )
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + (index*2);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]

	for( uint32_t i = 0; i < 1; i++ )
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	e00d      	b.n	8000c20 <Flash_EEPROM_Data_Read+0x3c>
	{
		*((uint16_t *)readBuffer + i) = *(uint8_t *)flashAddress;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	7819      	ldrb	r1, [r3, #0]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b28a      	uxth	r2, r1
 8000c12:	801a      	strh	r2, [r3, #0]
		flashAddress++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
	for( uint32_t i = 0; i < 1; i++ )
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0ee      	beq.n	8000c04 <Flash_EEPROM_Data_Read+0x20>
	}
}
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <Flight_Control_Setup>:
//
extern uint8_t eeprom_data[32];


void Flight_Control_Setup( void )
{
 8000c34:	b598      	push	{r3, r4, r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_Delay( 3000 );
 8000c38:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c3c:	f002 fd04 	bl	8003648 <HAL_Delay>

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000c40:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <Flight_Control_Setup+0x10c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e033      	b.n	8000cb0 <Flight_Control_Setup+0x7c>
	{
		Flight_Gyro_Signalen();                                           //Read the gyro output.
 8000c48:	f000 f888 	bl	8000d5c <Flight_Gyro_Signalen>

		gyro_axis_cal[1] += gyro_axis[1];                          //Ad roll value to gyro_roll_cal.
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000c4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000c52:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <Flight_Control_Setup+0x114>)
 8000c54:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	f7ff faba 	bl	80001d4 <__adddf3>
 8000c60:	4603      	mov	r3, r0
 8000c62:	460c      	mov	r4, r1
 8000c64:	4a37      	ldr	r2, [pc, #220]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000c66:	e9c2 3402 	strd	r3, r4, [r2, #8]
		gyro_axis_cal[2] += gyro_axis[2];                          //Ad pitch value to gyro_pitch_cal.
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000c6c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <Flight_Control_Setup+0x114>)
 8000c72:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4623      	mov	r3, r4
 8000c7a:	f7ff faab 	bl	80001d4 <__adddf3>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460c      	mov	r4, r1
 8000c82:	4a30      	ldr	r2, [pc, #192]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000c84:	e9c2 3404 	strd	r3, r4, [r2, #16]
		gyro_axis_cal[3] += gyro_axis[3];                          //Ad yaw value to gyro_yaw_cal.                                               //Wait 3 milliseconds before the next loop.
 8000c88:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000c8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <Flight_Control_Setup+0x114>)
 8000c90:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4623      	mov	r3, r4
 8000c98:	f7ff fa9c 	bl	80001d4 <__adddf3>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000ca2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <Flight_Control_Setup+0x10c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <Flight_Control_Setup+0x10c>)
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <Flight_Control_Setup+0x10c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cb8:	dbc6      	blt.n	8000c48 <Flight_Control_Setup+0x14>
	}

	//Now that we have 2000 measures, we need to divide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                    //Divide the roll total by 2000.
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000cbc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <Flight_Control_Setup+0x118>)
 8000cc6:	f7ff fd65 	bl	8000794 <__aeabi_ddiv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460c      	mov	r4, r1
 8000cce:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000cd0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	gyro_axis_cal[2] /= 2000;                                    //Divide the pitch total by 2000.
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000cd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <Flight_Control_Setup+0x118>)
 8000ce0:	f7ff fd58 	bl	8000794 <__aeabi_ddiv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000cea:	e9c2 3404 	strd	r3, r4, [r2, #16]
	gyro_axis_cal[3] /= 2000;                                    //Divide the yaw total by 2000.
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000cf0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <Flight_Control_Setup+0x118>)
 8000cfa:	f7ff fd4b 	bl	8000794 <__aeabi_ddiv>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460c      	mov	r4, r1
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <Flight_Control_Setup+0x110>)
 8000d04:	e9c2 3406 	strd	r3, r4, [r2, #24]

	//Wait until the receiver is active and the throttle is set to the lower position.
	while( receiver_input_channel_3 > 1100 )
 8000d08:	e00b      	b.n	8000d22 <Flight_Control_Setup+0xee>
	{
		receiver_input_channel_3 = Convert_Receiver_Channels(3);    //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f8de 	bl	8000ecc <Convert_Receiver_Channels>
 8000d10:	4602      	mov	r2, r0
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <Flight_Control_Setup+0x11c>)
 8000d14:	601a      	str	r2, [r3, #0]
		receiver_input_channel_4 = Convert_Receiver_Channels(4);    //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
 8000d16:	2004      	movs	r0, #4
 8000d18:	f000 f8d8 	bl	8000ecc <Convert_Receiver_Channels>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <Flight_Control_Setup+0x120>)
 8000d20:	601a      	str	r2, [r3, #0]
	while( receiver_input_channel_3 > 1100 )
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <Flight_Control_Setup+0x11c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f240 424c 	movw	r2, #1100	; 0x44c
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	dced      	bgt.n	8000d0a <Flight_Control_Setup+0xd6>
	}

	PWM_Output_Start();
 8000d2e:	f000 fc19 	bl	8001564 <PWM_Output_Start>
	PWM_Output_Idle();
 8000d32:	f000 fc2d 	bl	8001590 <PWM_Output_Idle>

	start = 0;           //Set start back to 0.
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <Flight_Control_Setup+0x124>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	bd98      	pop	{r3, r4, r7, pc}
 8000d40:	2000002c 	.word	0x2000002c
 8000d44:	200001c8 	.word	0x200001c8
 8000d48:	200001a0 	.word	0x200001a0
 8000d4c:	409f4000 	.word	0x409f4000
 8000d50:	2000009c 	.word	0x2000009c
 8000d54:	20000388 	.word	0x20000388
 8000d58:	20000290 	.word	0x20000290

08000d5c <Flight_Gyro_Signalen>:
		PWM_Output_Idle();
	}
}

void Flight_Gyro_Signalen( void )
{
 8000d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d60:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8000d62:	f000 f9cd 	bl	8001100 <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_axis[1] = gX_Raw;
 8000d66:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <Flight_Gyro_Signalen+0x148>)
 8000d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb7d 	bl	800046c <__aeabi_i2d>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	494c      	ldr	r1, [pc, #304]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000d78:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_axis[2] = gY_Raw;
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <Flight_Gyro_Signalen+0x150>)
 8000d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fb72 	bl	800046c <__aeabi_i2d>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4946      	ldr	r1, [pc, #280]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000d8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gyro_axis[3] = gZ_Raw;
 8000d92:	4b47      	ldr	r3, [pc, #284]	; (8000eb0 <Flight_Gyro_Signalen+0x154>)
 8000d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fb67 	bl	800046c <__aeabi_i2d>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4941      	ldr	r1, [pc, #260]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000da4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(cal_int == 2000)
 8000da8:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <Flight_Gyro_Signalen+0x158>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000db0:	d126      	bne.n	8000e00 <Flight_Gyro_Signalen+0xa4>
	{
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000db4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000db8:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <Flight_Gyro_Signalen+0x15c>)
 8000dba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000dbe:	f7ff fa07 	bl	80001d0 <__aeabi_dsub>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4938      	ldr	r1, [pc, #224]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000dc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000dce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <Flight_Gyro_Signalen+0x15c>)
 8000dd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000dd8:	f7ff f9fa 	bl	80001d0 <__aeabi_dsub>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4931      	ldr	r1, [pc, #196]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000de2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000de8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <Flight_Gyro_Signalen+0x15c>)
 8000dee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000df2:	f7ff f9ed 	bl	80001d0 <__aeabi_dsub>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	492b      	ldr	r1, [pc, #172]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	gyro_roll  = gyro_axis[eeprom_data[28] & 0b00000011];
 8000e00:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <Flight_Gyro_Signalen+0x160>)
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	492b      	ldr	r1, [pc, #172]	; (8000ec0 <Flight_Gyro_Signalen+0x164>)
 8000e14:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[28] & 0b10000000 )	{	gyro_roll *= -1;	}
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <Flight_Gyro_Signalen+0x160>)
 8000e1a:	7f1b      	ldrb	r3, [r3, #28]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da08      	bge.n	8000e34 <Flight_Gyro_Signalen+0xd8>
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <Flight_Gyro_Signalen+0x164>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	4692      	mov	sl, r2
 8000e2a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <Flight_Gyro_Signalen+0x164>)
 8000e30:	e9c3 ab00 	strd	sl, fp, [r3]

	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <Flight_Gyro_Signalen+0x160>)
 8000e36:	7f5b      	ldrb	r3, [r3, #29]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4413      	add	r3, r2
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	491f      	ldr	r1, [pc, #124]	; (8000ec4 <Flight_Gyro_Signalen+0x168>)
 8000e48:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[29] & 0b10000000 )	{	gyro_pitch *= -1;	}
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <Flight_Gyro_Signalen+0x160>)
 8000e4e:	7f5b      	ldrb	r3, [r3, #29]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da08      	bge.n	8000e68 <Flight_Gyro_Signalen+0x10c>
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <Flight_Gyro_Signalen+0x168>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	4690      	mov	r8, r2
 8000e5e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <Flight_Gyro_Signalen+0x168>)
 8000e64:	e9c3 8900 	strd	r8, r9, [r3]

	gyro_yaw   = gyro_axis[eeprom_data[30] & 0b00000011];
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <Flight_Gyro_Signalen+0x160>)
 8000e6a:	7f9b      	ldrb	r3, [r3, #30]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <Flight_Gyro_Signalen+0x14c>)
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4413      	add	r3, r2
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <Flight_Gyro_Signalen+0x16c>)
 8000e7c:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[30] & 0b10000000 )	{	gyro_yaw *= -1;		}
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <Flight_Gyro_Signalen+0x160>)
 8000e82:	7f9b      	ldrb	r3, [r3, #30]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da08      	bge.n	8000e9c <Flight_Gyro_Signalen+0x140>
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <Flight_Gyro_Signalen+0x16c>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	4614      	mov	r4, r2
 8000e92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <Flight_Gyro_Signalen+0x16c>)
 8000e98:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000e9c:	bf00      	nop
 8000e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000386 	.word	0x20000386
 8000ea8:	200001a0 	.word	0x200001a0
 8000eac:	20000384 	.word	0x20000384
 8000eb0:	20000368 	.word	0x20000368
 8000eb4:	2000002c 	.word	0x2000002c
 8000eb8:	200001c8 	.word	0x200001c8
 8000ebc:	2000007c 	.word	0x2000007c
 8000ec0:	20000390 	.word	0x20000390
 8000ec4:	20000370 	.word	0x20000370
 8000ec8:	20000378 	.word	0x20000378

08000ecc <Convert_Receiver_Channels>:

	pid_last_yaw_d_error = pid_error_temp;
}

int Convert_Receiver_Channels( uint8_t function )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           //What channel corresponds with the specific function
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	3317      	adds	r3, #23
 8000eda:	4a47      	ldr	r2, [pc, #284]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000  )	{	reverse = 1;	}            //Reverse channel when most significant bit is set
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3317      	adds	r3, #23
 8000ee8:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da03      	bge.n	8000efa <Convert_Receiver_Channels+0x2e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef8:	e002      	b.n	8000f00 <Convert_Receiver_Channels+0x34>
	else	{	reverse = 0;	}                                                            //If the most significant is not set there is no reverse
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            //Read the actual receiver value for the corresponding function
 8000f00:	7ffb      	ldrb	r3, [r7, #31]
 8000f02:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <Convert_Receiver_Channels+0x130>)
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	623b      	str	r3, [r7, #32]
	low 	= ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14]; 	//Store the low value for the specific receiver input channel
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	330f      	adds	r3, #15
 8000f10:	4a39      	ldr	r2, [pc, #228]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	7ffa      	ldrb	r2, [r7, #31]
 8000f18:	3207      	adds	r2, #7
 8000f1a:	0052      	lsls	r2, r2, #1
 8000f1c:	4936      	ldr	r1, [pc, #216]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000f1e:	5c8a      	ldrb	r2, [r1, r2]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
	center 	= ( eeprom_data[channel * 2 - 1] << 8 )  | eeprom_data[channel * 2 - 2];	//Store the center value for the specific receiver input channel
 8000f24:	7ffb      	ldrb	r3, [r7, #31]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	7ffa      	ldrb	r2, [r7, #31]
 8000f32:	3a01      	subs	r2, #1
 8000f34:	0052      	lsls	r2, r2, #1
 8000f36:	4930      	ldr	r1, [pc, #192]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000f38:	5c8a      	ldrb	r2, [r1, r2]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
	high 	= ( eeprom_data[channel * 2 + 7] << 8 )  | eeprom_data[channel * 2 + 6];   	//Store the high value for the specific receiver input channel
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	3307      	adds	r3, #7
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	7ffa      	ldrb	r2, [r7, #31]
 8000f4c:	3203      	adds	r2, #3
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	4929      	ldr	r1, [pc, #164]	; (8000ff8 <Convert_Receiver_Channels+0x12c>)
 8000f52:	5c8a      	ldrb	r2, [r1, r2]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000f58:	6a3a      	ldr	r2, [r7, #32]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	da1f      	bge.n	8000fa0 <Convert_Receiver_Channels+0xd4>
	{                                             	//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                              	//Limit the lowest value to the value that was detected during setup
 8000f60:	6a3a      	ldr	r2, [r7, #32]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	da01      	bge.n	8000f6c <Convert_Receiver_Channels+0xa0>
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);  //Calculate and scale the actual value to a 1000 - 2000us value
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f76:	fb02 f203 	mul.w	r2, r2, r3
 8000f7a:	6979      	ldr	r1, [r7, #20]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f84:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                   //If the channel is reversed
 8000f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d103      	bne.n	8000f96 <Convert_Receiver_Channels+0xca>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000f94:	e02a      	b.n	8000fec <Convert_Receiver_Channels+0x120>
		else	{	return 1500 - difference;	}                               //If the channel is not reversed
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	e025      	b.n	8000fec <Convert_Receiver_Channels+0x120>
	}
	else if(actual > center)
 8000fa0:	6a3a      	ldr	r2, [r7, #32]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dd1f      	ble.n	8000fe8 <Convert_Receiver_Channels+0x11c>
	{                                           	//The actual receiver value is higher than the center value
		if(actual > high)	{	actual = high;	}                               //Limit the lowest value to the value that was detected during setup
 8000fa8:	6a3a      	ldr	r2, [r7, #32]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dd01      	ble.n	8000fb4 <Convert_Receiver_Channels+0xe8>
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center); //Calculate and scale the actual value to a 1000 - 2000us value
 8000fb4:	6a3a      	ldr	r2, [r7, #32]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbe:	fb02 f203 	mul.w	r2, r2, r3
 8000fc2:	6939      	ldr	r1, [r7, #16]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	1acb      	subs	r3, r1, r3
 8000fc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fcc:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                  	//If the channel is reversed
 8000fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d104      	bne.n	8000fe0 <Convert_Receiver_Channels+0x114>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000fdc:	3304      	adds	r3, #4
 8000fde:	e005      	b.n	8000fec <Convert_Receiver_Channels+0x120>
		else	{	return 1500 + difference;	}                               //If the channel is not reversed
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000fe6:	e001      	b.n	8000fec <Convert_Receiver_Channels+0x120>
	}
	else	{	return 1500;	}
 8000fe8:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	372c      	adds	r7, #44	; 0x2c
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	2000007c 	.word	0x2000007c
 8000ffc:	200000a4 	.word	0x200000a4

08001000 <L3GD20H_Init>:
//
extern bool gyro_error;


void L3GD20H_Init( void )
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
	uint8_t L3GD20H_WHO_AM_I_Check = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD , L3GD20H_REG_WHO_AM_I, 1, &L3GD20H_WHO_AM_I_Check, 1, 100 );
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	220f      	movs	r2, #15
 800101a:	21d7      	movs	r1, #215	; 0xd7
 800101c:	482f      	ldr	r0, [pc, #188]	; (80010dc <L3GD20H_Init+0xdc>)
 800101e:	f003 f933 	bl	8004288 <HAL_I2C_Mem_Read>

	if ( L3GD20H_WHO_AM_I_Check == L3GD20H_WHO_AM_I )
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2bd4      	cmp	r3, #212	; 0xd4
 8001026:	d137      	bne.n	8001098 <L3GD20H_Init+0x98>
	{
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL1, 1, &L3GD20H_SET_CTRL1,	1, 10 );
 8001028:	230a      	movs	r3, #10
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <L3GD20H_Init+0xe0>)
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	2220      	movs	r2, #32
 8001038:	21d6      	movs	r1, #214	; 0xd6
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <L3GD20H_Init+0xdc>)
 800103c:	f003 f810 	bl	8004060 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL4, 1, &L3GD20H_SET_CTRL4, 1, 10 );
 8001040:	230a      	movs	r3, #10
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <L3GD20H_Init+0xe4>)
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	2223      	movs	r2, #35	; 0x23
 8001050:	21d6      	movs	r1, #214	; 0xd6
 8001052:	4822      	ldr	r0, [pc, #136]	; (80010dc <L3GD20H_Init+0xdc>)
 8001054:	f003 f804 	bl	8004060 <HAL_I2C_Mem_Write>

		sprintf(uartTX, "                                                                                                    ");
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <L3GD20H_Init+0xe8>)
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <L3GD20H_Init+0xec>)
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	2365      	movs	r3, #101	; 0x65
 8001062:	461a      	mov	r2, r3
 8001064:	f007 ff34 	bl	8008ed0 <memcpy>
		sprintf(uartTX, "\nL3GD20H is found and settled!\n");
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <L3GD20H_Init+0xe8>)
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <L3GD20H_Init+0xf0>)
 800106c:	4614      	mov	r4, r2
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	6020      	str	r0, [r4, #0]
 8001074:	6061      	str	r1, [r4, #4]
 8001076:	60a2      	str	r2, [r4, #8]
 8001078:	60e3      	str	r3, [r4, #12]
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	6120      	str	r0, [r4, #16]
 800107e:	6161      	str	r1, [r4, #20]
 8001080:	61a2      	str	r2, [r4, #24]
 8001082:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2265      	movs	r2, #101	; 0x65
 8001088:	4917      	ldr	r1, [pc, #92]	; (80010e8 <L3GD20H_Init+0xe8>)
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <L3GD20H_Init+0xf4>)
 800108c:	f007 f938 	bl	8008300 <HAL_UART_Transmit>

		gyro_error = false;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <L3GD20H_Init+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );

		gyro_error = true;
	}
}
 8001096:	e01c      	b.n	80010d2 <L3GD20H_Init+0xd2>
		sprintf(uartTX, "                                                                                                    ");
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <L3GD20H_Init+0xe8>)
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <L3GD20H_Init+0xec>)
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	2365      	movs	r3, #101	; 0x65
 80010a2:	461a      	mov	r2, r3
 80010a4:	f007 ff14 	bl	8008ed0 <memcpy>
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <L3GD20H_Init+0xe8>)
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <L3GD20H_Init+0xfc>)
 80010ac:	4615      	mov	r5, r2
 80010ae:	461c      	mov	r4, r3
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	6028      	str	r0, [r5, #0]
 80010b4:	6069      	str	r1, [r5, #4]
 80010b6:	60aa      	str	r2, [r5, #8]
 80010b8:	60eb      	str	r3, [r5, #12]
 80010ba:	cc03      	ldmia	r4!, {r0, r1}
 80010bc:	6128      	str	r0, [r5, #16]
 80010be:	6169      	str	r1, [r5, #20]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	2265      	movs	r2, #101	; 0x65
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <L3GD20H_Init+0xe8>)
 80010c6:	480b      	ldr	r0, [pc, #44]	; (80010f4 <L3GD20H_Init+0xf4>)
 80010c8:	f007 f91a 	bl	8008300 <HAL_UART_Transmit>
		gyro_error = true;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <L3GD20H_Init+0xf8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdb0      	pop	{r4, r5, r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000150 	.word	0x20000150
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000001 	.word	0x20000001
 80010e8:	200002a4 	.word	0x200002a4
 80010ec:	08008f10 	.word	0x08008f10
 80010f0:	08008f78 	.word	0x08008f78
 80010f4:	200001f8 	.word	0x200001f8
 80010f8:	2000036b 	.word	0x2000036b
 80010fc:	08008f98 	.word	0x08008f98

08001100 <L3GD20H_Read_Gyro_RAW_Outputs>:

void L3GD20H_Read_Gyro_RAW_Outputs( void )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_L, 1,  &L3GD20H_OUT_X_L, 1, 100);
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2228      	movs	r2, #40	; 0x28
 8001116:	21d7      	movs	r1, #215	; 0xd7
 8001118:	4832      	ldr	r0, [pc, #200]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800111a:	f003 f8b5 	bl	8004288 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_H, 1, 	&L3GD20H_OUT_X_H, 1, 100);
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2229      	movs	r2, #41	; 0x29
 800112e:	21d7      	movs	r1, #215	; 0xd7
 8001130:	482c      	ldr	r0, [pc, #176]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001132:	f003 f8a9 	bl	8004288 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_L, 1,  &L3GD20H_OUT_Y_L, 1, 100);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	222a      	movs	r2, #42	; 0x2a
 8001146:	21d7      	movs	r1, #215	; 0xd7
 8001148:	4826      	ldr	r0, [pc, #152]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800114a:	f003 f89d 	bl	8004288 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_H, 1,  &L3GD20H_OUT_Y_H, 1, 100);
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	222b      	movs	r2, #43	; 0x2b
 800115e:	21d7      	movs	r1, #215	; 0xd7
 8001160:	4820      	ldr	r0, [pc, #128]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001162:	f003 f891 	bl	8004288 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_L, 1,  &L3GD20H_OUT_Z_L, 1, 100);
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	222c      	movs	r2, #44	; 0x2c
 8001176:	21d7      	movs	r1, #215	; 0xd7
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800117a:	f003 f885 	bl	8004288 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_H, 1,  &L3GD20H_OUT_Z_H, 1, 100);
 800117e:	2364      	movs	r3, #100	; 0x64
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	222d      	movs	r2, #45	; 0x2d
 800118e:	21d7      	movs	r1, #215	; 0xd7
 8001190:	4814      	ldr	r0, [pc, #80]	; (80011e4 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001192:	f003 f879 	bl	8004288 <HAL_I2C_Mem_Read>

	gX_Raw = (int16_t) (L3GD20H_OUT_X_H << 8 | L3GD20H_OUT_X_L);
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <L3GD20H_Read_Gyro_RAW_Outputs+0xfc>)
 80011aa:	801a      	strh	r2, [r3, #0]
	gY_Raw = (int16_t) (L3GD20H_OUT_Y_H << 8 | L3GD20H_OUT_Y_L);
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <L3GD20H_Read_Gyro_RAW_Outputs+0x100>)
 80011c0:	801a      	strh	r2, [r3, #0]
	gZ_Raw = (int16_t) (L3GD20H_OUT_Z_H << 8 | L3GD20H_OUT_Z_L);
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <L3GD20H_Read_Gyro_RAW_Outputs+0x104>)
 80011d6:	801a      	strh	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000030 	.word	0x20000030
 80011e4:	20000150 	.word	0x20000150
 80011e8:	20000031 	.word	0x20000031
 80011ec:	20000032 	.word	0x20000032
 80011f0:	20000033 	.word	0x20000033
 80011f4:	20000034 	.word	0x20000034
 80011f8:	20000035 	.word	0x20000035
 80011fc:	20000386 	.word	0x20000386
 8001200:	20000384 	.word	0x20000384
 8001204:	20000368 	.word	0x20000368

08001208 <PWM_IC_Start>:
extern int receiver_input_channel_1, receiver_input_channel_2, receiver_input_channel_3, receiver_input_channel_4;
extern int receiver_input[5];


void PWM_IC_Start( void )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 800120c:	2100      	movs	r1, #0
 800120e:	4802      	ldr	r0, [pc, #8]	; (8001218 <PWM_IC_Start+0x10>)
 8001210:	f005 fd6e 	bl	8006cf0 <HAL_TIM_IC_Start_IT>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000100 	.word	0x20000100

0800121c <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3);
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4);
}

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 )   // if the interrupt source is channel1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7f1b      	ldrb	r3, [r3, #28]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d158      	bne.n	80012de <HAL_TIM_IC_CaptureCallback+0xc2>
	{
		if ( First_Captured == false ) 												// if the first value is not captured
 800122c:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d11a      	bne.n	800126a <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			Roll_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 ); 	// read the first value
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f006 f9c6 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 800123c:	4602      	mov	r2, r0
 800123e:	4b69      	ldr	r3, [pc, #420]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001240:	601a      	str	r2, [r3, #0]
			First_Captured = true;  											// set the first captured as true
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6a1a      	ldr	r2, [r3, #32]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 020a 	bic.w	r2, r2, #10
 8001256:	621a      	str	r2, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a1a      	ldr	r2, [r3, #32]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0202 	orr.w	r2, r2, #2
 8001266:	621a      	str	r2, [r3, #32]
 8001268:	e039      	b.n	80012de <HAL_TIM_IC_CaptureCallback+0xc2>
		}

		else if ( First_Captured == true )   // if the first is already captured
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d135      	bne.n	80012de <HAL_TIM_IC_CaptureCallback+0xc2>
		{
			Roll_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 );  // read second value
 8001272:	2100      	movs	r1, #0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f006 f9a7 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 800127a:	4602      	mov	r2, r0
 800127c:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800127e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Roll_IC_Val2 > Roll_IC_Val1 )
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d90b      	bls.n	80012ac <HAL_TIM_IC_CaptureCallback+0x90>
			{
				receiver_input_channel_1 = Roll_IC_Val2 - Roll_IC_Val1;
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80012a2:	601a      	str	r2, [r3, #0]
				receiver_input[1] = receiver_input_channel_1;
 80012a4:	4b51      	ldr	r3, [pc, #324]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80012aa:	6053      	str	r3, [r2, #4]
			}

			First_Captured = false;	// set it back to false
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING );	// set polarity to rising edge
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a1a      	ldr	r2, [r3, #32]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 020a 	bic.w	r2, r2, #10
 80012c0:	621a      	str	r2, [r3, #32]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a12      	ldr	r2, [r2, #32]
 80012cc:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_1 );
 80012ce:	2100      	movs	r1, #0
 80012d0:	4848      	ldr	r0, [pc, #288]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012d2:	f005 fd7b 	bl	8006dcc <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_2 );
 80012d6:	2104      	movs	r1, #4
 80012d8:	4846      	ldr	r0, [pc, #280]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80012da:	f005 fd09 	bl	8006cf0 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2 )   // if the interrupt source is channel2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7f1b      	ldrb	r3, [r3, #28]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d158      	bne.n	8001398 <HAL_TIM_IC_CaptureCallback+0x17c>
	{
		if ( First_Captured == false ) // if the first value is not captured
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11a      	bne.n	8001324 <HAL_TIM_IC_CaptureCallback+0x108>
		{
			Pitch_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 ); 	// read the first value
 80012ee:	2104      	movs	r1, #4
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f006 f969 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80012fa:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001310:	621a      	str	r2, [r3, #32]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0220 	orr.w	r2, r2, #32
 8001320:	621a      	str	r2, [r3, #32]
 8001322:	e039      	b.n	8001398 <HAL_TIM_IC_CaptureCallback+0x17c>
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d135      	bne.n	8001398 <HAL_TIM_IC_CaptureCallback+0x17c>
		{
			Pitch_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 );  // read second value
 800132c:	2104      	movs	r1, #4
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f006 f94a 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 8001334:	4602      	mov	r2, r0
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001338:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Pitch_IC_Val2 > Pitch_IC_Val1 )
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d90b      	bls.n	8001366 <HAL_TIM_IC_CaptureCallback+0x14a>
			{
				receiver_input_channel_2 = Pitch_IC_Val2 - Pitch_IC_Val1;
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800135c:	601a      	str	r2, [r3, #0]
				receiver_input[2] = receiver_input_channel_2;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001364:	6093      	str	r3, [r2, #8]
			}

			First_Captured = false; // set it back to false
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a1a      	ldr	r2, [r3, #32]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800137a:	621a      	str	r2, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a12      	ldr	r2, [r2, #32]
 8001386:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_2 );
 8001388:	2104      	movs	r1, #4
 800138a:	481a      	ldr	r0, [pc, #104]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800138c:	f005 fd1e 	bl	8006dcc <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_3 );
 8001390:	2108      	movs	r1, #8
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001394:	f005 fcac 	bl	8006cf0 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3 )   // if the interrupt source is channel2
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7f1b      	ldrb	r3, [r3, #28]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d16d      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x260>
	{
		if ( First_Captured == false ) // if the first value is not captured
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d12f      	bne.n	8001408 <HAL_TIM_IC_CaptureCallback+0x1ec>
		{
			Throttle_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 ); 	// read the first value
 80013a8:	2108      	movs	r1, #8
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f006 f90c 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80013b4:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80013ca:	621a      	str	r2, [r3, #32]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	e04e      	b.n	800147c <HAL_TIM_IC_CaptureCallback+0x260>
 80013de:	bf00      	nop
 80013e0:	20000036 	.word	0x20000036
 80013e4:	20000038 	.word	0x20000038
 80013e8:	2000003c 	.word	0x2000003c
 80013ec:	2000038c 	.word	0x2000038c
 80013f0:	200000a4 	.word	0x200000a4
 80013f4:	20000100 	.word	0x20000100
 80013f8:	20000040 	.word	0x20000040
 80013fc:	20000044 	.word	0x20000044
 8001400:	20000380 	.word	0x20000380
 8001404:	20000048 	.word	0x20000048
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001408:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x324>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d135      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x260>
		{
			Throttle_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 );  // read second value
 8001410:	2108      	movs	r1, #8
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f006 f8d8 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 8001418:	4602      	mov	r2, r0
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_TIM_IC_CaptureCallback+0x328>)
 800141c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Throttle_IC_Val2 > Throttle_IC_Val1 )
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d90b      	bls.n	800144a <HAL_TIM_IC_CaptureCallback+0x22e>
			{
				receiver_input_channel_3 = Throttle_IC_Val2 - Throttle_IC_Val1;
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b44      	ldr	r3, [pc, #272]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_TIM_IC_CaptureCallback+0x330>)
 8001440:	601a      	str	r2, [r3, #0]
				receiver_input[3] = receiver_input_channel_3;
 8001442:	4b42      	ldr	r3, [pc, #264]	; (800154c <HAL_TIM_IC_CaptureCallback+0x330>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a42      	ldr	r2, [pc, #264]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001448:	60d3      	str	r3, [r2, #12]
			}

			First_Captured = false; // set it back to false
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x324>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a1a      	ldr	r2, [r3, #32]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a12      	ldr	r2, [r2, #32]
 800146a:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3 );
 800146c:	2108      	movs	r1, #8
 800146e:	4839      	ldr	r0, [pc, #228]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001470:	f005 fcac 	bl	8006dcc <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_4 );
 8001474:	210c      	movs	r1, #12
 8001476:	4837      	ldr	r0, [pc, #220]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001478:	f005 fc3a 	bl	8006cf0 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_4 )   // if the interrupt source is channel2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7f1b      	ldrb	r3, [r3, #28]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d158      	bne.n	8001536 <HAL_TIM_IC_CaptureCallback+0x31a>
	{
		if ( First_Captured == false ) // if the first value is not captured
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11a      	bne.n	80014c2 <HAL_TIM_IC_CaptureCallback+0x2a6>
		{
			Yaw_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_4 ); 	// read the first value
 800148c:	210c      	movs	r1, #12
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f006 f89a 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 8001494:	4602      	mov	r2, r0
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001498:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x324>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80014ae:	621a      	str	r2, [r3, #32]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014be:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
		}
	}
}
 80014c0:	e039      	b.n	8001536 <HAL_TIM_IC_CaptureCallback+0x31a>
		else if ( First_Captured == true )   // if the first is already captured
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x324>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d135      	bne.n	8001536 <HAL_TIM_IC_CaptureCallback+0x31a>
			Yaw_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80014ca:	210c      	movs	r1, #12
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f006 f87b 	bl	80075c8 <HAL_TIM_ReadCapturedValue>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_TIM_IC_CaptureCallback+0x340>)
 80014d6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
			if ( Yaw_IC_Val2 > Yaw_IC_Val1 )
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_TIM_IC_CaptureCallback+0x340>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d90b      	bls.n	8001504 <HAL_TIM_IC_CaptureCallback+0x2e8>
				receiver_input_channel_4 = Yaw_IC_Val2 - Yaw_IC_Val1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_TIM_IC_CaptureCallback+0x340>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x344>)
 80014fa:	601a      	str	r2, [r3, #0]
				receiver_input[4] = receiver_input_channel_4;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x344>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001502:	6113      	str	r3, [r2, #16]
			First_Captured = false; // set it back to false
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a1a      	ldr	r2, [r3, #32]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001518:	621a      	str	r2, [r3, #32]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a12      	ldr	r2, [r2, #32]
 8001524:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
 8001526:	210c      	movs	r1, #12
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x338>)
 800152a:	f005 fc4f 	bl	8006dcc <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 800152e:	2100      	movs	r1, #0
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001532:	f005 fbdd 	bl	8006cf0 <HAL_TIM_IC_Start_IT>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000036 	.word	0x20000036
 8001544:	2000004c 	.word	0x2000004c
 8001548:	20000048 	.word	0x20000048
 800154c:	2000009c 	.word	0x2000009c
 8001550:	200000a4 	.word	0x200000a4
 8001554:	20000100 	.word	0x20000100
 8001558:	20000050 	.word	0x20000050
 800155c:	20000054 	.word	0x20000054
 8001560:	20000388 	.word	0x20000388

08001564 <PWM_Output_Start>:

#include "PWM_Output.h"


void PWM_Output_Start( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1);
 8001568:	2100      	movs	r1, #0
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <PWM_Output_Start+0x28>)
 800156c:	f005 fb3c 	bl	8006be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2);
 8001570:	2104      	movs	r1, #4
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <PWM_Output_Start+0x28>)
 8001574:	f005 fb38 	bl	8006be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_3);
 8001578:	2108      	movs	r1, #8
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <PWM_Output_Start+0x28>)
 800157c:	f005 fb34 	bl	8006be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_4);
 8001580:	210c      	movs	r1, #12
 8001582:	4802      	ldr	r0, [pc, #8]	; (800158c <PWM_Output_Start+0x28>)
 8001584:	f005 fb30 	bl	8006be8 <HAL_TIM_PWM_Start>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000b8 	.word	0x200000b8

08001590 <PWM_Output_Idle>:

void PWM_Output_Idle( void )
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = 1000;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <PWM_Output_Idle+0x38>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 1000;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <PWM_Output_Idle+0x38>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 1000;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <PWM_Output_Idle+0x38>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 1000;
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <PWM_Output_Idle+0x38>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200000b8 	.word	0x200000b8

080015cc <PWM_Output_ESC_Calibration>:

void PWM_Output_ESC_Calibration( int esc_3 )
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = esc_3;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <PWM_Output_ESC_Calibration+0x34>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = esc_3;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <PWM_Output_ESC_Calibration+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = esc_3;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <PWM_Output_ESC_Calibration+0x34>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = esc_3;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <PWM_Output_ESC_Calibration+0x34>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	200000b8 	.word	0x200000b8

08001604 <Main_Setup>:
extern float gyro_pitch, gyro_roll, gyro_yaw;
extern int16_t gX_Raw, gY_Raw, gZ_Raw;


void Main_Setup( void )
{
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	af00      	add	r7, sp, #0
    sprintf(uartTX, "                                                                                                    ");
 8001608:	4a8f      	ldr	r2, [pc, #572]	; (8001848 <Main_Setup+0x244>)
 800160a:	4b90      	ldr	r3, [pc, #576]	; (800184c <Main_Setup+0x248>)
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	2365      	movs	r3, #101	; 0x65
 8001612:	461a      	mov	r2, r3
 8001614:	f007 fc5c 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nMove the sticks to the center position within 10 seconds!\n");
 8001618:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <Main_Setup+0x244>)
 800161a:	4a8d      	ldr	r2, [pc, #564]	; (8001850 <Main_Setup+0x24c>)
 800161c:	4614      	mov	r4, r2
 800161e:	469c      	mov	ip, r3
 8001620:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001624:	4665      	mov	r5, ip
 8001626:	4626      	mov	r6, r4
 8001628:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800162a:	6028      	str	r0, [r5, #0]
 800162c:	6069      	str	r1, [r5, #4]
 800162e:	60aa      	str	r2, [r5, #8]
 8001630:	60eb      	str	r3, [r5, #12]
 8001632:	3410      	adds	r4, #16
 8001634:	f10c 0c10 	add.w	ip, ip, #16
 8001638:	4574      	cmp	r4, lr
 800163a:	d1f3      	bne.n	8001624 <Main_Setup+0x20>
 800163c:	4665      	mov	r5, ip
 800163e:	4623      	mov	r3, r4
 8001640:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001642:	6028      	str	r0, [r5, #0]
 8001644:	6069      	str	r1, [r5, #4]
 8001646:	60aa      	str	r2, [r5, #8]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	2265      	movs	r2, #101	; 0x65
 800164c:	497e      	ldr	r1, [pc, #504]	; (8001848 <Main_Setup+0x244>)
 800164e:	4881      	ldr	r0, [pc, #516]	; (8001854 <Main_Setup+0x250>)
 8001650:	f006 fe56 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001654:	f242 7010 	movw	r0, #10000	; 0x2710
 8001658:	f001 fff6 	bl	8003648 <HAL_Delay>

    //Store the central stick positions
    center_channel_1 = receiver_input_channel_1;
 800165c:	4b7e      	ldr	r3, [pc, #504]	; (8001858 <Main_Setup+0x254>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a7e      	ldr	r2, [pc, #504]	; (800185c <Main_Setup+0x258>)
 8001662:	6013      	str	r3, [r2, #0]
    center_channel_2 = receiver_input_channel_2;
 8001664:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <Main_Setup+0x25c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a7e      	ldr	r2, [pc, #504]	; (8001864 <Main_Setup+0x260>)
 800166a:	6013      	str	r3, [r2, #0]
    center_channel_3 = receiver_input_channel_3;
 800166c:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <Main_Setup+0x264>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a7e      	ldr	r2, [pc, #504]	; (800186c <Main_Setup+0x268>)
 8001672:	6013      	str	r3, [r2, #0]
    center_channel_4 = receiver_input_channel_4;
 8001674:	4b7e      	ldr	r3, [pc, #504]	; (8001870 <Main_Setup+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a7e      	ldr	r2, [pc, #504]	; (8001874 <Main_Setup+0x270>)
 800167a:	6013      	str	r3, [r2, #0]


    sprintf(uartTX, "                                                                                                    ");
 800167c:	4a72      	ldr	r2, [pc, #456]	; (8001848 <Main_Setup+0x244>)
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <Main_Setup+0x248>)
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	2365      	movs	r3, #101	; 0x65
 8001686:	461a      	mov	r2, r3
 8001688:	f007 fc22 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nMove the sticks to min & max positions then back to center within 10 seconds!\n");
 800168c:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <Main_Setup+0x244>)
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <Main_Setup+0x274>)
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	2350      	movs	r3, #80	; 0x50
 8001696:	461a      	mov	r2, r3
 8001698:	f007 fc1a 	bl	8008ed0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800169c:	2364      	movs	r3, #100	; 0x64
 800169e:	2265      	movs	r2, #101	; 0x65
 80016a0:	4969      	ldr	r1, [pc, #420]	; (8001848 <Main_Setup+0x244>)
 80016a2:	486c      	ldr	r0, [pc, #432]	; (8001854 <Main_Setup+0x250>)
 80016a4:	f006 fe2c 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 1000 );
 80016a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ac:	f001 ffcc 	bl	8003648 <HAL_Delay>
    //Register the min and max values of the receiver channels
    Register_Min_Max();
 80016b0:	f000 fe5a 	bl	8002368 <Register_Min_Max>


    sprintf(uartTX, "                                                                                                    ");
 80016b4:	4a64      	ldr	r2, [pc, #400]	; (8001848 <Main_Setup+0x244>)
 80016b6:	4b65      	ldr	r3, [pc, #404]	; (800184c <Main_Setup+0x248>)
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	2365      	movs	r3, #101	; 0x65
 80016be:	461a      	mov	r2, r3
 80016c0:	f007 fc06 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nMove the throttle stick to full throttle within 10 seconds!\n");
 80016c4:	4b60      	ldr	r3, [pc, #384]	; (8001848 <Main_Setup+0x244>)
 80016c6:	4a6d      	ldr	r2, [pc, #436]	; (800187c <Main_Setup+0x278>)
 80016c8:	4614      	mov	r4, r2
 80016ca:	469c      	mov	ip, r3
 80016cc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80016d0:	4665      	mov	r5, ip
 80016d2:	4626      	mov	r6, r4
 80016d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016d6:	6028      	str	r0, [r5, #0]
 80016d8:	6069      	str	r1, [r5, #4]
 80016da:	60aa      	str	r2, [r5, #8]
 80016dc:	60eb      	str	r3, [r5, #12]
 80016de:	3410      	adds	r4, #16
 80016e0:	f10c 0c10 	add.w	ip, ip, #16
 80016e4:	4574      	cmp	r4, lr
 80016e6:	d1f3      	bne.n	80016d0 <Main_Setup+0xcc>
 80016e8:	4665      	mov	r5, ip
 80016ea:	4623      	mov	r3, r4
 80016ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80016ee:	6028      	str	r0, [r5, #0]
 80016f0:	6069      	str	r1, [r5, #4]
 80016f2:	60aa      	str	r2, [r5, #8]
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80016f8:	2364      	movs	r3, #100	; 0x64
 80016fa:	2265      	movs	r2, #101	; 0x65
 80016fc:	4952      	ldr	r1, [pc, #328]	; (8001848 <Main_Setup+0x244>)
 80016fe:	4855      	ldr	r0, [pc, #340]	; (8001854 <Main_Setup+0x250>)
 8001700:	f006 fdfe 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001704:	f242 7010 	movw	r0, #10000	; 0x2710
 8001708:	f001 ff9e 	bl	8003648 <HAL_Delay>
    Check_Receiver_Inputs( 1 );			//	Move the throttle stick to full throttle and back to center within 10 seconds
 800170c:	2001      	movs	r0, #1
 800170e:	f000 ff31 	bl	8002574 <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 8001712:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <Main_Setup+0x244>)
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <Main_Setup+0x248>)
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	2365      	movs	r3, #101	; 0x65
 800171c:	461a      	mov	r2, r3
 800171e:	f007 fbd7 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nMove the roll stick to simulate left wing up within 10 seconds!\n");
 8001722:	4a49      	ldr	r2, [pc, #292]	; (8001848 <Main_Setup+0x244>)
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <Main_Setup+0x27c>)
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	2342      	movs	r3, #66	; 0x42
 800172c:	461a      	mov	r2, r3
 800172e:	f007 fbcf 	bl	8008ed0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	2265      	movs	r2, #101	; 0x65
 8001736:	4944      	ldr	r1, [pc, #272]	; (8001848 <Main_Setup+0x244>)
 8001738:	4846      	ldr	r0, [pc, #280]	; (8001854 <Main_Setup+0x250>)
 800173a:	f006 fde1 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 800173e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001742:	f001 ff81 	bl	8003648 <HAL_Delay>
    Check_Receiver_Inputs( 2 );			//	Move the roll stick to simulate left wing up and back to center within 10 seconds
 8001746:	2002      	movs	r0, #2
 8001748:	f000 ff14 	bl	8002574 <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 800174c:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <Main_Setup+0x244>)
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <Main_Setup+0x248>)
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	2365      	movs	r3, #101	; 0x65
 8001756:	461a      	mov	r2, r3
 8001758:	f007 fbba 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nMove the pitch stick to simulate nose up within 10 seconds!\n");
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <Main_Setup+0x244>)
 800175e:	4a49      	ldr	r2, [pc, #292]	; (8001884 <Main_Setup+0x280>)
 8001760:	4614      	mov	r4, r2
 8001762:	469c      	mov	ip, r3
 8001764:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001768:	4665      	mov	r5, ip
 800176a:	4626      	mov	r6, r4
 800176c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800176e:	6028      	str	r0, [r5, #0]
 8001770:	6069      	str	r1, [r5, #4]
 8001772:	60aa      	str	r2, [r5, #8]
 8001774:	60eb      	str	r3, [r5, #12]
 8001776:	3410      	adds	r4, #16
 8001778:	f10c 0c10 	add.w	ip, ip, #16
 800177c:	4574      	cmp	r4, lr
 800177e:	d1f3      	bne.n	8001768 <Main_Setup+0x164>
 8001780:	4665      	mov	r5, ip
 8001782:	4623      	mov	r3, r4
 8001784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001786:	6028      	str	r0, [r5, #0]
 8001788:	6069      	str	r1, [r5, #4]
 800178a:	60aa      	str	r2, [r5, #8]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001790:	2364      	movs	r3, #100	; 0x64
 8001792:	2265      	movs	r2, #101	; 0x65
 8001794:	492c      	ldr	r1, [pc, #176]	; (8001848 <Main_Setup+0x244>)
 8001796:	482f      	ldr	r0, [pc, #188]	; (8001854 <Main_Setup+0x250>)
 8001798:	f006 fdb2 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 800179c:	f242 7010 	movw	r0, #10000	; 0x2710
 80017a0:	f001 ff52 	bl	8003648 <HAL_Delay>
    Check_Receiver_Inputs( 3 );			//	Move the pitch stick to simulate left wing up and back to center within 10 seconds
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 fee5 	bl	8002574 <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 80017aa:	4a27      	ldr	r2, [pc, #156]	; (8001848 <Main_Setup+0x244>)
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <Main_Setup+0x248>)
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	2365      	movs	r3, #101	; 0x65
 80017b4:	461a      	mov	r2, r3
 80017b6:	f007 fb8b 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nMove the yaw stick to simulate nose right within 10 seconds!\n");
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <Main_Setup+0x244>)
 80017bc:	4a32      	ldr	r2, [pc, #200]	; (8001888 <Main_Setup+0x284>)
 80017be:	4615      	mov	r5, r2
 80017c0:	469c      	mov	ip, r3
 80017c2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80017c6:	4664      	mov	r4, ip
 80017c8:	462e      	mov	r6, r5
 80017ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017cc:	6020      	str	r0, [r4, #0]
 80017ce:	6061      	str	r1, [r4, #4]
 80017d0:	60a2      	str	r2, [r4, #8]
 80017d2:	60e3      	str	r3, [r4, #12]
 80017d4:	3510      	adds	r5, #16
 80017d6:	f10c 0c10 	add.w	ip, ip, #16
 80017da:	4575      	cmp	r5, lr
 80017dc:	d1f3      	bne.n	80017c6 <Main_Setup+0x1c2>
 80017de:	4664      	mov	r4, ip
 80017e0:	462b      	mov	r3, r5
 80017e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017e4:	6020      	str	r0, [r4, #0]
 80017e6:	6061      	str	r1, [r4, #4]
 80017e8:	60a2      	str	r2, [r4, #8]
 80017ea:	881a      	ldrh	r2, [r3, #0]
 80017ec:	789b      	ldrb	r3, [r3, #2]
 80017ee:	81a2      	strh	r2, [r4, #12]
 80017f0:	73a3      	strb	r3, [r4, #14]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	2265      	movs	r2, #101	; 0x65
 80017f6:	4914      	ldr	r1, [pc, #80]	; (8001848 <Main_Setup+0x244>)
 80017f8:	4816      	ldr	r0, [pc, #88]	; (8001854 <Main_Setup+0x250>)
 80017fa:	f006 fd81 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 80017fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8001802:	f001 ff21 	bl	8003648 <HAL_Delay>
    Check_Receiver_Inputs( 4 );			//	Move the yaw stick to simulate nose right and back to center within 10 seconds
 8001806:	2004      	movs	r0, #4
 8001808:	f000 feb4 	bl	8002574 <Check_Receiver_Inputs>


    sprintf(uartTX, "                                                                                                    ");
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <Main_Setup+0x244>)
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <Main_Setup+0x248>)
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	2365      	movs	r3, #101	; 0x65
 8001816:	461a      	mov	r2, r3
 8001818:	f007 fb5a 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nTaking multiple gyro data samples (calibration) during ~8 seconds!\n");
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <Main_Setup+0x244>)
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <Main_Setup+0x288>)
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	2345      	movs	r3, #69	; 0x45
 8001826:	461a      	mov	r2, r3
 8001828:	f007 fb52 	bl	8008ed0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	2265      	movs	r2, #101	; 0x65
 8001830:	4905      	ldr	r1, [pc, #20]	; (8001848 <Main_Setup+0x244>)
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <Main_Setup+0x250>)
 8001834:	f006 fd64 	bl	8008300 <HAL_UART_Transmit>
    HAL_Delay( 5000 );
 8001838:	f241 3088 	movw	r0, #5000	; 0x1388
 800183c:	f001 ff04 	bl	8003648 <HAL_Delay>
	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <Main_Setup+0x28c>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e04d      	b.n	80018e4 <Main_Setup+0x2e0>
 8001848:	200002a4 	.word	0x200002a4
 800184c:	08008fb0 	.word	0x08008fb0
 8001850:	08009018 	.word	0x08009018
 8001854:	200001f8 	.word	0x200001f8
 8001858:	2000038c 	.word	0x2000038c
 800185c:	2000035c 	.word	0x2000035c
 8001860:	20000380 	.word	0x20000380
 8001864:	20000328 	.word	0x20000328
 8001868:	2000009c 	.word	0x2000009c
 800186c:	2000034c 	.word	0x2000034c
 8001870:	20000388 	.word	0x20000388
 8001874:	20000314 	.word	0x20000314
 8001878:	08009054 	.word	0x08009054
 800187c:	080090a4 	.word	0x080090a4
 8001880:	080090e4 	.word	0x080090e4
 8001884:	08009128 	.word	0x08009128
 8001888:	08009168 	.word	0x08009168
 800188c:	080091a8 	.word	0x080091a8
 8001890:	2000002c 	.word	0x2000002c
	{              													//Take 2000 readings for calibration.
		Setup_Gyro_Signalen();                          	//Read the gyro output.
 8001894:	f000 fb52 	bl	8001f3c <Setup_Gyro_Signalen>

		gyro_roll_cal += gyro_roll;                               	//Ad roll value to gyro_roll_cal.
 8001898:	4bab      	ldr	r3, [pc, #684]	; (8001b48 <Main_Setup+0x544>)
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	4bab      	ldr	r3, [pc, #684]	; (8001b4c <Main_Setup+0x548>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a8:	4ba7      	ldr	r3, [pc, #668]	; (8001b48 <Main_Setup+0x544>)
 80018aa:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch_cal += gyro_pitch;                              	//Ad pitch value to gyro_pitch_cal.
 80018ae:	4ba8      	ldr	r3, [pc, #672]	; (8001b50 <Main_Setup+0x54c>)
 80018b0:	ed93 7a00 	vldr	s14, [r3]
 80018b4:	4ba7      	ldr	r3, [pc, #668]	; (8001b54 <Main_Setup+0x550>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	4ba4      	ldr	r3, [pc, #656]	; (8001b50 <Main_Setup+0x54c>)
 80018c0:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw_cal += gyro_yaw;                                  	//Ad yaw value to gyro_yaw_cal.
 80018c4:	4ba4      	ldr	r3, [pc, #656]	; (8001b58 <Main_Setup+0x554>)
 80018c6:	ed93 7a00 	vldr	s14, [r3]
 80018ca:	4ba4      	ldr	r3, [pc, #656]	; (8001b5c <Main_Setup+0x558>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	4ba0      	ldr	r3, [pc, #640]	; (8001b58 <Main_Setup+0x554>)
 80018d6:	edc3 7a00 	vstr	s15, [r3]
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 80018da:	4ba1      	ldr	r3, [pc, #644]	; (8001b60 <Main_Setup+0x55c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a9f      	ldr	r2, [pc, #636]	; (8001b60 <Main_Setup+0x55c>)
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b9e      	ldr	r3, [pc, #632]	; (8001b60 <Main_Setup+0x55c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018ec:	dbd2      	blt.n	8001894 <Main_Setup+0x290>
	}

	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_roll_cal /= 2000;                                       //Divide the roll total by 2000.
 80018ee:	4b96      	ldr	r3, [pc, #600]	; (8001b48 <Main_Setup+0x544>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8001b64 <Main_Setup+0x560>
 80018f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <Main_Setup+0x544>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch_cal /= 2000;                                      //Divide the pitch total by 2000.
 8001902:	4b93      	ldr	r3, [pc, #588]	; (8001b50 <Main_Setup+0x54c>)
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001b64 <Main_Setup+0x560>
 800190c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001910:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <Main_Setup+0x54c>)
 8001912:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw_cal /= 2000;                                        //Divide the yaw total by 2000.
 8001916:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <Main_Setup+0x554>)
 8001918:	ed93 7a00 	vldr	s14, [r3]
 800191c:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001b64 <Main_Setup+0x560>
 8001920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001924:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <Main_Setup+0x554>)
 8001926:	edc3 7a00 	vstr	s15, [r3]


    sprintf(uartTX, "                                                                                                    ");
 800192a:	4a8f      	ldr	r2, [pc, #572]	; (8001b68 <Main_Setup+0x564>)
 800192c:	4b8f      	ldr	r3, [pc, #572]	; (8001b6c <Main_Setup+0x568>)
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	2365      	movs	r3, #101	; 0x65
 8001934:	461a      	mov	r2, r3
 8001936:	f007 facb 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nLift the left side of the quadcopter to a 45 degree angle within 5 seconds!\n");
 800193a:	4a8b      	ldr	r2, [pc, #556]	; (8001b68 <Main_Setup+0x564>)
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <Main_Setup+0x56c>)
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	234e      	movs	r3, #78	; 0x4e
 8001944:	461a      	mov	r2, r3
 8001946:	f007 fac3 	bl	8008ed0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800194a:	2364      	movs	r3, #100	; 0x64
 800194c:	2265      	movs	r2, #101	; 0x65
 800194e:	4986      	ldr	r1, [pc, #536]	; (8001b68 <Main_Setup+0x564>)
 8001950:	4888      	ldr	r0, [pc, #544]	; (8001b74 <Main_Setup+0x570>)
 8001952:	f006 fcd5 	bl	8008300 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 8001956:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800195a:	f001 fe75 	bl	8003648 <HAL_Delay>
	Check_Gyro_Axes( 1 );		//	Lift the left side of the quadcopter to a 45 degree angle within 10 seconds
 800195e:	2001      	movs	r0, #1
 8001960:	f000 fb4a 	bl	8001ff8 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 8001964:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <Main_Setup+0x564>)
 8001966:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <Main_Setup+0x568>)
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	2365      	movs	r3, #101	; 0x65
 800196e:	461a      	mov	r2, r3
 8001970:	f007 faae 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nLift the nose of the quadcopter to a 45 degree angle within 5 seconds!\n");
 8001974:	4a7c      	ldr	r2, [pc, #496]	; (8001b68 <Main_Setup+0x564>)
 8001976:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <Main_Setup+0x574>)
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	2349      	movs	r3, #73	; 0x49
 800197e:	461a      	mov	r2, r3
 8001980:	f007 faa6 	bl	8008ed0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2265      	movs	r2, #101	; 0x65
 8001988:	4977      	ldr	r1, [pc, #476]	; (8001b68 <Main_Setup+0x564>)
 800198a:	487a      	ldr	r0, [pc, #488]	; (8001b74 <Main_Setup+0x570>)
 800198c:	f006 fcb8 	bl	8008300 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 8001990:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001994:	f001 fe58 	bl	8003648 <HAL_Delay>
	Check_Gyro_Axes( 2 );		//	Lift the nose of the quadcopter to a 45 degree angle within 10 seconds
 8001998:	2002      	movs	r0, #2
 800199a:	f000 fb2d 	bl	8001ff8 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <Main_Setup+0x564>)
 80019a0:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <Main_Setup+0x568>)
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	2365      	movs	r3, #101	; 0x65
 80019a8:	461a      	mov	r2, r3
 80019aa:	f007 fa91 	bl	8008ed0 <memcpy>
    sprintf(uartTX, "\nRotate the nose of the quadcopter 45 degree to the right within 5 seconds!\n");
 80019ae:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <Main_Setup+0x564>)
 80019b0:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <Main_Setup+0x578>)
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	234d      	movs	r3, #77	; 0x4d
 80019b8:	461a      	mov	r2, r3
 80019ba:	f007 fa89 	bl	8008ed0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80019be:	2364      	movs	r3, #100	; 0x64
 80019c0:	2265      	movs	r2, #101	; 0x65
 80019c2:	4969      	ldr	r1, [pc, #420]	; (8001b68 <Main_Setup+0x564>)
 80019c4:	486b      	ldr	r0, [pc, #428]	; (8001b74 <Main_Setup+0x570>)
 80019c6:	f006 fc9b 	bl	8008300 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 80019ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ce:	f001 fe3b 	bl	8003648 <HAL_Delay>
	Check_Gyro_Axes( 3 );		//	Rotate the nose of the quadcopter 45 degree to the right within 10 seconds
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 fb10 	bl	8001ff8 <Check_Gyro_Axes>

    eeprom_data[0]  = center_channel_1 & 0b11111111;
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <Main_Setup+0x57c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b69      	ldr	r3, [pc, #420]	; (8001b84 <Main_Setup+0x580>)
 80019e0:	701a      	strb	r2, [r3, #0]
    eeprom_data[1]  = center_channel_1 >> 8;
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <Main_Setup+0x57c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	121b      	asrs	r3, r3, #8
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <Main_Setup+0x580>)
 80019ec:	705a      	strb	r2, [r3, #1]
    eeprom_data[2]  = center_channel_2 & 0b11111111;
 80019ee:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <Main_Setup+0x584>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <Main_Setup+0x580>)
 80019f6:	709a      	strb	r2, [r3, #2]
    eeprom_data[3]  = center_channel_2 >> 8;
 80019f8:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <Main_Setup+0x584>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	121b      	asrs	r3, r3, #8
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <Main_Setup+0x580>)
 8001a02:	70da      	strb	r2, [r3, #3]
    eeprom_data[4]  = center_channel_3 & 0b11111111;
 8001a04:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <Main_Setup+0x588>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <Main_Setup+0x580>)
 8001a0c:	711a      	strb	r2, [r3, #4]
    eeprom_data[5]  = center_channel_3 >> 8;
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <Main_Setup+0x588>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	121b      	asrs	r3, r3, #8
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <Main_Setup+0x580>)
 8001a18:	715a      	strb	r2, [r3, #5]
    eeprom_data[6]  = center_channel_4 & 0b11111111;
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <Main_Setup+0x58c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <Main_Setup+0x580>)
 8001a22:	719a      	strb	r2, [r3, #6]
    eeprom_data[7]  = center_channel_4 >> 8;
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <Main_Setup+0x58c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	121b      	asrs	r3, r3, #8
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <Main_Setup+0x580>)
 8001a2e:	71da      	strb	r2, [r3, #7]
    eeprom_data[8]  = high_channel_1 & 0b11111111;
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <Main_Setup+0x590>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <Main_Setup+0x580>)
 8001a38:	721a      	strb	r2, [r3, #8]
    eeprom_data[9]  = high_channel_1 >> 8;
 8001a3a:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <Main_Setup+0x590>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	121b      	asrs	r3, r3, #8
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <Main_Setup+0x580>)
 8001a44:	725a      	strb	r2, [r3, #9]
    eeprom_data[10] = high_channel_2 & 0b11111111;
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <Main_Setup+0x594>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <Main_Setup+0x580>)
 8001a4e:	729a      	strb	r2, [r3, #10]
    eeprom_data[11] = high_channel_2 >> 8;
 8001a50:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <Main_Setup+0x594>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	121b      	asrs	r3, r3, #8
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <Main_Setup+0x580>)
 8001a5a:	72da      	strb	r2, [r3, #11]
    eeprom_data[12] = high_channel_3 & 0b11111111;
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <Main_Setup+0x598>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <Main_Setup+0x580>)
 8001a64:	731a      	strb	r2, [r3, #12]
    eeprom_data[13] = high_channel_3 >> 8;
 8001a66:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <Main_Setup+0x598>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	121b      	asrs	r3, r3, #8
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <Main_Setup+0x580>)
 8001a70:	735a      	strb	r2, [r3, #13]
    eeprom_data[14] = high_channel_4 & 0b11111111;
 8001a72:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <Main_Setup+0x59c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <Main_Setup+0x580>)
 8001a7a:	739a      	strb	r2, [r3, #14]
    eeprom_data[15] = high_channel_4 >> 8;
 8001a7c:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <Main_Setup+0x59c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	121b      	asrs	r3, r3, #8
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <Main_Setup+0x580>)
 8001a86:	73da      	strb	r2, [r3, #15]
    eeprom_data[16] = low_channel_1 & 0b11111111;
 8001a88:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <Main_Setup+0x5a0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <Main_Setup+0x580>)
 8001a90:	741a      	strb	r2, [r3, #16]
    eeprom_data[17] = low_channel_1 >> 8;
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <Main_Setup+0x5a0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	121b      	asrs	r3, r3, #8
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <Main_Setup+0x580>)
 8001a9c:	745a      	strb	r2, [r3, #17]
    eeprom_data[18] = low_channel_2 & 0b11111111;
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <Main_Setup+0x5a4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <Main_Setup+0x580>)
 8001aa6:	749a      	strb	r2, [r3, #18]
    eeprom_data[19] = low_channel_2 >> 8;
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <Main_Setup+0x5a4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	121b      	asrs	r3, r3, #8
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <Main_Setup+0x580>)
 8001ab2:	74da      	strb	r2, [r3, #19]
    eeprom_data[20] = low_channel_3 & 0b11111111;
 8001ab4:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <Main_Setup+0x5a8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <Main_Setup+0x580>)
 8001abc:	751a      	strb	r2, [r3, #20]
    eeprom_data[21] = low_channel_3 >> 8;
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <Main_Setup+0x5a8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	121b      	asrs	r3, r3, #8
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <Main_Setup+0x580>)
 8001ac8:	755a      	strb	r2, [r3, #21]
    eeprom_data[22] = low_channel_4 & 0b11111111;
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <Main_Setup+0x5ac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <Main_Setup+0x580>)
 8001ad2:	759a      	strb	r2, [r3, #22]
    eeprom_data[23] = low_channel_4 >> 8;
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <Main_Setup+0x5ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	121b      	asrs	r3, r3, #8
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <Main_Setup+0x580>)
 8001ade:	75da      	strb	r2, [r3, #23]
    eeprom_data[24] = channel_1_assign;
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <Main_Setup+0x5b0>)
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <Main_Setup+0x580>)
 8001ae6:	761a      	strb	r2, [r3, #24]
    eeprom_data[25] = channel_2_assign;
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <Main_Setup+0x5b4>)
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <Main_Setup+0x580>)
 8001aee:	765a      	strb	r2, [r3, #25]
    eeprom_data[26] = channel_3_assign;
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <Main_Setup+0x5b8>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <Main_Setup+0x580>)
 8001af6:	769a      	strb	r2, [r3, #26]
    eeprom_data[27] = channel_4_assign;
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <Main_Setup+0x5bc>)
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <Main_Setup+0x580>)
 8001afe:	76da      	strb	r2, [r3, #27]
    eeprom_data[28] = roll_axis;
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <Main_Setup+0x5c0>)
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <Main_Setup+0x580>)
 8001b06:	771a      	strb	r2, [r3, #28]
    eeprom_data[29] = pitch_axis;
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <Main_Setup+0x5c4>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <Main_Setup+0x580>)
 8001b0e:	775a      	strb	r2, [r3, #29]
    eeprom_data[30] = yaw_axis;
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <Main_Setup+0x5c8>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <Main_Setup+0x580>)
 8001b16:	779a      	strb	r2, [r3, #30]
	eeprom_data[31] = 92;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <Main_Setup+0x580>)
 8001b1a:	225c      	movs	r2, #92	; 0x5c
 8001b1c:	77da      	strb	r2, [r3, #31]


	if( eeprom_data[31] == 92 /* && eeprom_data[28] == 2 && eeprom_data[29] == 1 && eeprom_data[30] == 131 */ )
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <Main_Setup+0x580>)
 8001b20:	7fdb      	ldrb	r3, [r3, #31]
 8001b22:	2b5c      	cmp	r3, #92	; 0x5c
 8001b24:	f040 814e 	bne.w	8001dc4 <Main_Setup+0x7c0>
	{
	    sprintf(uartTX, "                                                                                                    ");
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <Main_Setup+0x564>)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <Main_Setup+0x568>)
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	2365      	movs	r3, #101	; 0x65
 8001b32:	461a      	mov	r2, r3
 8001b34:	f007 f9cc 	bl	8008ed0 <memcpy>
	    sprintf(uartTX, "\nValues look good! Saving data to the flash.....!\n");
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <Main_Setup+0x564>)
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <Main_Setup+0x5cc>)
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	469c      	mov	ip, r3
 8001b40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b44:	e046      	b.n	8001bd4 <Main_Setup+0x5d0>
 8001b46:	bf00      	nop
 8001b48:	2000030c 	.word	0x2000030c
 8001b4c:	20000390 	.word	0x20000390
 8001b50:	20000338 	.word	0x20000338
 8001b54:	20000370 	.word	0x20000370
 8001b58:	20000318 	.word	0x20000318
 8001b5c:	20000378 	.word	0x20000378
 8001b60:	2000002c 	.word	0x2000002c
 8001b64:	44fa0000 	.word	0x44fa0000
 8001b68:	200002a4 	.word	0x200002a4
 8001b6c:	08008fb0 	.word	0x08008fb0
 8001b70:	080091f0 	.word	0x080091f0
 8001b74:	200001f8 	.word	0x200001f8
 8001b78:	08009240 	.word	0x08009240
 8001b7c:	0800928c 	.word	0x0800928c
 8001b80:	2000035c 	.word	0x2000035c
 8001b84:	2000005c 	.word	0x2000005c
 8001b88:	20000328 	.word	0x20000328
 8001b8c:	2000034c 	.word	0x2000034c
 8001b90:	20000314 	.word	0x20000314
 8001b94:	2000032c 	.word	0x2000032c
 8001b98:	20000364 	.word	0x20000364
 8001b9c:	20000340 	.word	0x20000340
 8001ba0:	20000354 	.word	0x20000354
 8001ba4:	20000348 	.word	0x20000348
 8001ba8:	20000330 	.word	0x20000330
 8001bac:	20000310 	.word	0x20000310
 8001bb0:	20000358 	.word	0x20000358
 8001bb4:	20000351 	.word	0x20000351
 8001bb8:	20000335 	.word	0x20000335
 8001bbc:	20000344 	.word	0x20000344
 8001bc0:	20000350 	.word	0x20000350
 8001bc4:	20000361 	.word	0x20000361
 8001bc8:	20000360 	.word	0x20000360
 8001bcc:	20000334 	.word	0x20000334
 8001bd0:	080092dc 	.word	0x080092dc
 8001bd4:	4665      	mov	r5, ip
 8001bd6:	4626      	mov	r6, r4
 8001bd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bda:	6028      	str	r0, [r5, #0]
 8001bdc:	6069      	str	r1, [r5, #4]
 8001bde:	60aa      	str	r2, [r5, #8]
 8001be0:	60eb      	str	r3, [r5, #12]
 8001be2:	3410      	adds	r4, #16
 8001be4:	f10c 0c10 	add.w	ip, ip, #16
 8001be8:	4574      	cmp	r4, lr
 8001bea:	d1f3      	bne.n	8001bd4 <Main_Setup+0x5d0>
 8001bec:	4663      	mov	r3, ip
 8001bee:	4622      	mov	r2, r4
 8001bf0:	8811      	ldrh	r1, [r2, #0]
 8001bf2:	7892      	ldrb	r2, [r2, #2]
 8001bf4:	8019      	strh	r1, [r3, #0]
 8001bf6:	709a      	strb	r2, [r3, #2]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001bf8:	2364      	movs	r3, #100	; 0x64
 8001bfa:	2265      	movs	r2, #101	; 0x65
 8001bfc:	49a7      	ldr	r1, [pc, #668]	; (8001e9c <Main_Setup+0x898>)
 8001bfe:	48a8      	ldr	r0, [pc, #672]	; (8001ea0 <Main_Setup+0x89c>)
 8001c00:	f006 fb7e 	bl	8008300 <HAL_UART_Transmit>


		Flash_ErasePage( 0x0803F800 );
 8001c04:	48a7      	ldr	r0, [pc, #668]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c06:	f7fe ffaf 	bl	8000b68 <Flash_ErasePage>
																				// EEPROM Array to Flash
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  0, &eeprom_data[0]);
 8001c0a:	4ba7      	ldr	r3, [pc, #668]	; (8001ea8 <Main_Setup+0x8a4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	49a5      	ldr	r1, [pc, #660]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c10:	207f      	movs	r0, #127	; 0x7f
 8001c12:	f7fe ffb8 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  1, &eeprom_data[1]);
 8001c16:	4ba5      	ldr	r3, [pc, #660]	; (8001eac <Main_Setup+0x8a8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	49a2      	ldr	r1, [pc, #648]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c1c:	207f      	movs	r0, #127	; 0x7f
 8001c1e:	f7fe ffb2 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  2, &eeprom_data[2]);
 8001c22:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <Main_Setup+0x8ac>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	499f      	ldr	r1, [pc, #636]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c28:	207f      	movs	r0, #127	; 0x7f
 8001c2a:	f7fe ffac 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  3, &eeprom_data[3]);
 8001c2e:	4ba1      	ldr	r3, [pc, #644]	; (8001eb4 <Main_Setup+0x8b0>)
 8001c30:	2203      	movs	r2, #3
 8001c32:	499c      	ldr	r1, [pc, #624]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c34:	207f      	movs	r0, #127	; 0x7f
 8001c36:	f7fe ffa6 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  4, &eeprom_data[4]);
 8001c3a:	4b9f      	ldr	r3, [pc, #636]	; (8001eb8 <Main_Setup+0x8b4>)
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4999      	ldr	r1, [pc, #612]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c40:	207f      	movs	r0, #127	; 0x7f
 8001c42:	f7fe ffa0 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  5, &eeprom_data[5]);
 8001c46:	4b9d      	ldr	r3, [pc, #628]	; (8001ebc <Main_Setup+0x8b8>)
 8001c48:	2205      	movs	r2, #5
 8001c4a:	4996      	ldr	r1, [pc, #600]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c4c:	207f      	movs	r0, #127	; 0x7f
 8001c4e:	f7fe ff9a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  6, &eeprom_data[6]);
 8001c52:	4b9b      	ldr	r3, [pc, #620]	; (8001ec0 <Main_Setup+0x8bc>)
 8001c54:	2206      	movs	r2, #6
 8001c56:	4993      	ldr	r1, [pc, #588]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c58:	207f      	movs	r0, #127	; 0x7f
 8001c5a:	f7fe ff94 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  7, &eeprom_data[7]);
 8001c5e:	4b99      	ldr	r3, [pc, #612]	; (8001ec4 <Main_Setup+0x8c0>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	4990      	ldr	r1, [pc, #576]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c64:	207f      	movs	r0, #127	; 0x7f
 8001c66:	f7fe ff8e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  8, &eeprom_data[8]);
 8001c6a:	4b97      	ldr	r3, [pc, #604]	; (8001ec8 <Main_Setup+0x8c4>)
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	498d      	ldr	r1, [pc, #564]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c70:	207f      	movs	r0, #127	; 0x7f
 8001c72:	f7fe ff88 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  9, &eeprom_data[9]);
 8001c76:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <Main_Setup+0x8c8>)
 8001c78:	2209      	movs	r2, #9
 8001c7a:	498a      	ldr	r1, [pc, #552]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c7c:	207f      	movs	r0, #127	; 0x7f
 8001c7e:	f7fe ff82 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 10, &eeprom_data[10]);
 8001c82:	4b93      	ldr	r3, [pc, #588]	; (8001ed0 <Main_Setup+0x8cc>)
 8001c84:	220a      	movs	r2, #10
 8001c86:	4987      	ldr	r1, [pc, #540]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c88:	207f      	movs	r0, #127	; 0x7f
 8001c8a:	f7fe ff7c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 11, &eeprom_data[11]);
 8001c8e:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <Main_Setup+0x8d0>)
 8001c90:	220b      	movs	r2, #11
 8001c92:	4984      	ldr	r1, [pc, #528]	; (8001ea4 <Main_Setup+0x8a0>)
 8001c94:	207f      	movs	r0, #127	; 0x7f
 8001c96:	f7fe ff76 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 12, &eeprom_data[12]);
 8001c9a:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <Main_Setup+0x8d4>)
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	4981      	ldr	r1, [pc, #516]	; (8001ea4 <Main_Setup+0x8a0>)
 8001ca0:	207f      	movs	r0, #127	; 0x7f
 8001ca2:	f7fe ff70 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 13, &eeprom_data[13]);
 8001ca6:	4b8d      	ldr	r3, [pc, #564]	; (8001edc <Main_Setup+0x8d8>)
 8001ca8:	220d      	movs	r2, #13
 8001caa:	497e      	ldr	r1, [pc, #504]	; (8001ea4 <Main_Setup+0x8a0>)
 8001cac:	207f      	movs	r0, #127	; 0x7f
 8001cae:	f7fe ff6a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 14, &eeprom_data[14]);
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <Main_Setup+0x8dc>)
 8001cb4:	220e      	movs	r2, #14
 8001cb6:	497b      	ldr	r1, [pc, #492]	; (8001ea4 <Main_Setup+0x8a0>)
 8001cb8:	207f      	movs	r0, #127	; 0x7f
 8001cba:	f7fe ff64 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 15, &eeprom_data[15]);
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <Main_Setup+0x8e0>)
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	4978      	ldr	r1, [pc, #480]	; (8001ea4 <Main_Setup+0x8a0>)
 8001cc4:	207f      	movs	r0, #127	; 0x7f
 8001cc6:	f7fe ff5e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 16, &eeprom_data[16]);
 8001cca:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <Main_Setup+0x8e4>)
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4975      	ldr	r1, [pc, #468]	; (8001ea4 <Main_Setup+0x8a0>)
 8001cd0:	207f      	movs	r0, #127	; 0x7f
 8001cd2:	f7fe ff58 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 17, &eeprom_data[17]);
 8001cd6:	4b85      	ldr	r3, [pc, #532]	; (8001eec <Main_Setup+0x8e8>)
 8001cd8:	2211      	movs	r2, #17
 8001cda:	4972      	ldr	r1, [pc, #456]	; (8001ea4 <Main_Setup+0x8a0>)
 8001cdc:	207f      	movs	r0, #127	; 0x7f
 8001cde:	f7fe ff52 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 18, &eeprom_data[18]);
 8001ce2:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <Main_Setup+0x8ec>)
 8001ce4:	2212      	movs	r2, #18
 8001ce6:	496f      	ldr	r1, [pc, #444]	; (8001ea4 <Main_Setup+0x8a0>)
 8001ce8:	207f      	movs	r0, #127	; 0x7f
 8001cea:	f7fe ff4c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 19, &eeprom_data[19]);
 8001cee:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <Main_Setup+0x8f0>)
 8001cf0:	2213      	movs	r2, #19
 8001cf2:	496c      	ldr	r1, [pc, #432]	; (8001ea4 <Main_Setup+0x8a0>)
 8001cf4:	207f      	movs	r0, #127	; 0x7f
 8001cf6:	f7fe ff46 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 20, &eeprom_data[20]);
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <Main_Setup+0x8f4>)
 8001cfc:	2214      	movs	r2, #20
 8001cfe:	4969      	ldr	r1, [pc, #420]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d00:	207f      	movs	r0, #127	; 0x7f
 8001d02:	f7fe ff40 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 21, &eeprom_data[21]);
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <Main_Setup+0x8f8>)
 8001d08:	2215      	movs	r2, #21
 8001d0a:	4966      	ldr	r1, [pc, #408]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d0c:	207f      	movs	r0, #127	; 0x7f
 8001d0e:	f7fe ff3a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 22, &eeprom_data[22]);
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <Main_Setup+0x8fc>)
 8001d14:	2216      	movs	r2, #22
 8001d16:	4963      	ldr	r1, [pc, #396]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d18:	207f      	movs	r0, #127	; 0x7f
 8001d1a:	f7fe ff34 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 23, &eeprom_data[23]);
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <Main_Setup+0x900>)
 8001d20:	2217      	movs	r2, #23
 8001d22:	4960      	ldr	r1, [pc, #384]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d24:	207f      	movs	r0, #127	; 0x7f
 8001d26:	f7fe ff2e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 24, &eeprom_data[24]);
 8001d2a:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <Main_Setup+0x904>)
 8001d2c:	2218      	movs	r2, #24
 8001d2e:	495d      	ldr	r1, [pc, #372]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d30:	207f      	movs	r0, #127	; 0x7f
 8001d32:	f7fe ff28 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 25, &eeprom_data[25]);
 8001d36:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <Main_Setup+0x908>)
 8001d38:	2219      	movs	r2, #25
 8001d3a:	495a      	ldr	r1, [pc, #360]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d3c:	207f      	movs	r0, #127	; 0x7f
 8001d3e:	f7fe ff22 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 26, &eeprom_data[26]);
 8001d42:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <Main_Setup+0x90c>)
 8001d44:	221a      	movs	r2, #26
 8001d46:	4957      	ldr	r1, [pc, #348]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d48:	207f      	movs	r0, #127	; 0x7f
 8001d4a:	f7fe ff1c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 27, &eeprom_data[27]);
 8001d4e:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <Main_Setup+0x910>)
 8001d50:	221b      	movs	r2, #27
 8001d52:	4954      	ldr	r1, [pc, #336]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d54:	207f      	movs	r0, #127	; 0x7f
 8001d56:	f7fe ff16 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 28, &eeprom_data[28]);
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <Main_Setup+0x914>)
 8001d5c:	221c      	movs	r2, #28
 8001d5e:	4951      	ldr	r1, [pc, #324]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d60:	207f      	movs	r0, #127	; 0x7f
 8001d62:	f7fe ff10 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 29, &eeprom_data[29]);
 8001d66:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <Main_Setup+0x918>)
 8001d68:	221d      	movs	r2, #29
 8001d6a:	494e      	ldr	r1, [pc, #312]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d6c:	207f      	movs	r0, #127	; 0x7f
 8001d6e:	f7fe ff0a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 30, &eeprom_data[30]);
 8001d72:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <Main_Setup+0x91c>)
 8001d74:	221e      	movs	r2, #30
 8001d76:	494b      	ldr	r1, [pc, #300]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d78:	207f      	movs	r0, #127	; 0x7f
 8001d7a:	f7fe ff04 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 31, &eeprom_data[31]);
 8001d7e:	4b69      	ldr	r3, [pc, #420]	; (8001f24 <Main_Setup+0x920>)
 8001d80:	221f      	movs	r2, #31
 8001d82:	4948      	ldr	r1, [pc, #288]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d84:	207f      	movs	r0, #127	; 0x7f
 8001d86:	f7fe fefe 	bl	8000b86 <Flash_EEPROM_Data_Write>


		Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data_test[0]);
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <Main_Setup+0x924>)
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	4945      	ldr	r1, [pc, #276]	; (8001ea4 <Main_Setup+0x8a0>)
 8001d90:	207f      	movs	r0, #127	; 0x7f
 8001d92:	f7fe ff27 	bl	8000be4 <Flash_EEPROM_Data_Read>

	    sprintf(uartTX, "                                                                                                    ");
 8001d96:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <Main_Setup+0x898>)
 8001d98:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <Main_Setup+0x928>)
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	2365      	movs	r3, #101	; 0x65
 8001da0:	461a      	mov	r2, r3
 8001da2:	f007 f895 	bl	8008ed0 <memcpy>
	    sprintf(uartTX, "\nSetup is done! Everything is looks OKAY! All data is saved to the flash! Reset!\n");
 8001da6:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <Main_Setup+0x898>)
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <Main_Setup+0x92c>)
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	2352      	movs	r3, #82	; 0x52
 8001db0:	461a      	mov	r2, r3
 8001db2:	f007 f88d 	bl	8008ed0 <memcpy>
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001db6:	2364      	movs	r3, #100	; 0x64
 8001db8:	2265      	movs	r2, #101	; 0x65
 8001dba:	4938      	ldr	r1, [pc, #224]	; (8001e9c <Main_Setup+0x898>)
 8001dbc:	4838      	ldr	r0, [pc, #224]	; (8001ea0 <Main_Setup+0x89c>)
 8001dbe:	f006 fa9f 	bl	8008300 <HAL_UART_Transmit>
	    sprintf(uartTX, "\nSetup is NOT done! All data is useless! Re-do the setup!\n");
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );

		Flash_ErasePage( 0x0803F800 );
	}
}
 8001dc2:	e069      	b.n	8001e98 <Main_Setup+0x894>
	else if( eeprom_data_test[0] == 92 && eeprom_data[28] != 2 && eeprom_data[29] != 1 && eeprom_data[30] != 131 )
 8001dc4:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <Main_Setup+0x924>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8001dca:	d139      	bne.n	8001e40 <Main_Setup+0x83c>
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <Main_Setup+0x8a4>)
 8001dce:	7f1b      	ldrb	r3, [r3, #28]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d035      	beq.n	8001e40 <Main_Setup+0x83c>
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <Main_Setup+0x8a4>)
 8001dd6:	7f5b      	ldrb	r3, [r3, #29]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d031      	beq.n	8001e40 <Main_Setup+0x83c>
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <Main_Setup+0x8a4>)
 8001dde:	7f9b      	ldrb	r3, [r3, #30]
 8001de0:	2b83      	cmp	r3, #131	; 0x83
 8001de2:	d02d      	beq.n	8001e40 <Main_Setup+0x83c>
	    sprintf(uartTX, "                                                                                                    ");
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <Main_Setup+0x898>)
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <Main_Setup+0x928>)
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	2365      	movs	r3, #101	; 0x65
 8001dee:	461a      	mov	r2, r3
 8001df0:	f007 f86e 	bl	8008ed0 <memcpy>
	    sprintf(uartTX, "\nSetup is NOT done! Gyro axises are useless! Re-do the setup!\n");
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <Main_Setup+0x898>)
 8001df6:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <Main_Setup+0x930>)
 8001df8:	4615      	mov	r5, r2
 8001dfa:	469c      	mov	ip, r3
 8001dfc:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001e00:	4664      	mov	r4, ip
 8001e02:	462e      	mov	r6, r5
 8001e04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e06:	6020      	str	r0, [r4, #0]
 8001e08:	6061      	str	r1, [r4, #4]
 8001e0a:	60a2      	str	r2, [r4, #8]
 8001e0c:	60e3      	str	r3, [r4, #12]
 8001e0e:	3510      	adds	r5, #16
 8001e10:	f10c 0c10 	add.w	ip, ip, #16
 8001e14:	4575      	cmp	r5, lr
 8001e16:	d1f3      	bne.n	8001e00 <Main_Setup+0x7fc>
 8001e18:	4664      	mov	r4, ip
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e1e:	6020      	str	r0, [r4, #0]
 8001e20:	6061      	str	r1, [r4, #4]
 8001e22:	60a2      	str	r2, [r4, #8]
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	789b      	ldrb	r3, [r3, #2]
 8001e28:	81a2      	strh	r2, [r4, #12]
 8001e2a:	73a3      	strb	r3, [r4, #14]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	2265      	movs	r2, #101	; 0x65
 8001e30:	491a      	ldr	r1, [pc, #104]	; (8001e9c <Main_Setup+0x898>)
 8001e32:	481b      	ldr	r0, [pc, #108]	; (8001ea0 <Main_Setup+0x89c>)
 8001e34:	f006 fa64 	bl	8008300 <HAL_UART_Transmit>
		Flash_ErasePage( 0x0803F800 );
 8001e38:	481a      	ldr	r0, [pc, #104]	; (8001ea4 <Main_Setup+0x8a0>)
 8001e3a:	f7fe fe95 	bl	8000b68 <Flash_ErasePage>
}
 8001e3e:	e02b      	b.n	8001e98 <Main_Setup+0x894>
	    sprintf(uartTX, "                                                                                                    ");
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <Main_Setup+0x898>)
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <Main_Setup+0x928>)
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	2365      	movs	r3, #101	; 0x65
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f007 f840 	bl	8008ed0 <memcpy>
	    sprintf(uartTX, "\nSetup is NOT done! All data is useless! Re-do the setup!\n");
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <Main_Setup+0x898>)
 8001e52:	4a39      	ldr	r2, [pc, #228]	; (8001f38 <Main_Setup+0x934>)
 8001e54:	4614      	mov	r4, r2
 8001e56:	469c      	mov	ip, r3
 8001e58:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001e5c:	4665      	mov	r5, ip
 8001e5e:	4626      	mov	r6, r4
 8001e60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e62:	6028      	str	r0, [r5, #0]
 8001e64:	6069      	str	r1, [r5, #4]
 8001e66:	60aa      	str	r2, [r5, #8]
 8001e68:	60eb      	str	r3, [r5, #12]
 8001e6a:	3410      	adds	r4, #16
 8001e6c:	f10c 0c10 	add.w	ip, ip, #16
 8001e70:	4574      	cmp	r4, lr
 8001e72:	d1f3      	bne.n	8001e5c <Main_Setup+0x858>
 8001e74:	4662      	mov	r2, ip
 8001e76:	4623      	mov	r3, r4
 8001e78:	cb03      	ldmia	r3!, {r0, r1}
 8001e7a:	6010      	str	r0, [r2, #0]
 8001e7c:	6051      	str	r1, [r2, #4]
 8001e7e:	8819      	ldrh	r1, [r3, #0]
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	8111      	strh	r1, [r2, #8]
 8001e84:	7293      	strb	r3, [r2, #10]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e86:	2364      	movs	r3, #100	; 0x64
 8001e88:	2265      	movs	r2, #101	; 0x65
 8001e8a:	4904      	ldr	r1, [pc, #16]	; (8001e9c <Main_Setup+0x898>)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <Main_Setup+0x89c>)
 8001e8e:	f006 fa37 	bl	8008300 <HAL_UART_Transmit>
		Flash_ErasePage( 0x0803F800 );
 8001e92:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <Main_Setup+0x8a0>)
 8001e94:	f7fe fe68 	bl	8000b68 <Flash_ErasePage>
}
 8001e98:	bf00      	nop
 8001e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e9c:	200002a4 	.word	0x200002a4
 8001ea0:	200001f8 	.word	0x200001f8
 8001ea4:	0803f800 	.word	0x0803f800
 8001ea8:	2000005c 	.word	0x2000005c
 8001eac:	2000005d 	.word	0x2000005d
 8001eb0:	2000005e 	.word	0x2000005e
 8001eb4:	2000005f 	.word	0x2000005f
 8001eb8:	20000060 	.word	0x20000060
 8001ebc:	20000061 	.word	0x20000061
 8001ec0:	20000062 	.word	0x20000062
 8001ec4:	20000063 	.word	0x20000063
 8001ec8:	20000064 	.word	0x20000064
 8001ecc:	20000065 	.word	0x20000065
 8001ed0:	20000066 	.word	0x20000066
 8001ed4:	20000067 	.word	0x20000067
 8001ed8:	20000068 	.word	0x20000068
 8001edc:	20000069 	.word	0x20000069
 8001ee0:	2000006a 	.word	0x2000006a
 8001ee4:	2000006b 	.word	0x2000006b
 8001ee8:	2000006c 	.word	0x2000006c
 8001eec:	2000006d 	.word	0x2000006d
 8001ef0:	2000006e 	.word	0x2000006e
 8001ef4:	2000006f 	.word	0x2000006f
 8001ef8:	20000070 	.word	0x20000070
 8001efc:	20000071 	.word	0x20000071
 8001f00:	20000072 	.word	0x20000072
 8001f04:	20000073 	.word	0x20000073
 8001f08:	20000074 	.word	0x20000074
 8001f0c:	20000075 	.word	0x20000075
 8001f10:	20000076 	.word	0x20000076
 8001f14:	20000077 	.word	0x20000077
 8001f18:	20000078 	.word	0x20000078
 8001f1c:	20000079 	.word	0x20000079
 8001f20:	2000007a 	.word	0x2000007a
 8001f24:	2000007b 	.word	0x2000007b
 8001f28:	2000031c 	.word	0x2000031c
 8001f2c:	08008fb0 	.word	0x08008fb0
 8001f30:	08009310 	.word	0x08009310
 8001f34:	08009364 	.word	0x08009364
 8001f38:	080093a4 	.word	0x080093a4

08001f3c <Setup_Gyro_Signalen>:

void Setup_Gyro_Signalen()
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8001f40:	f7ff f8de 	bl	8001100 <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_roll  = gX_Raw;
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <Setup_Gyro_Signalen+0x94>)
 8001f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <Setup_Gyro_Signalen+0x98>)
 8001f54:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch = gY_Raw;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <Setup_Gyro_Signalen+0x9c>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <Setup_Gyro_Signalen+0xa0>)
 8001f68:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw   = gZ_Raw;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <Setup_Gyro_Signalen+0xa4>)
 8001f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <Setup_Gyro_Signalen+0xa8>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]

	if(cal_int == 2000)							//Only compensate after the calibration
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <Setup_Gyro_Signalen+0xac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f88:	d120      	bne.n	8001fcc <Setup_Gyro_Signalen+0x90>
	{
		gyro_roll  -= gyro_roll_cal;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <Setup_Gyro_Signalen+0x98>)
 8001f8c:	ed93 7a00 	vldr	s14, [r3]
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <Setup_Gyro_Signalen+0xb0>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <Setup_Gyro_Signalen+0x98>)
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch -= gyro_pitch_cal;
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <Setup_Gyro_Signalen+0xa0>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <Setup_Gyro_Signalen+0xb4>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <Setup_Gyro_Signalen+0xa0>)
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw   -= gyro_yaw_cal;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <Setup_Gyro_Signalen+0xa8>)
 8001fb8:	ed93 7a00 	vldr	s14, [r3]
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <Setup_Gyro_Signalen+0xb8>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <Setup_Gyro_Signalen+0xa8>)
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000386 	.word	0x20000386
 8001fd4:	20000390 	.word	0x20000390
 8001fd8:	20000384 	.word	0x20000384
 8001fdc:	20000370 	.word	0x20000370
 8001fe0:	20000368 	.word	0x20000368
 8001fe4:	20000378 	.word	0x20000378
 8001fe8:	2000002c 	.word	0x2000002c
 8001fec:	2000030c 	.word	0x2000030c
 8001ff0:	20000338 	.word	0x20000338
 8001ff4:	20000318 	.word	0x20000318

08001ff8 <Check_Gyro_Axes>:

void Check_Gyro_Axes( uint8_t movement )
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger_axis = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	77fb      	strb	r3, [r7, #31]
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;

	//Reset all axes
	gyro_angle_roll = 0;
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
	gyro_angle_pitch = 0;
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
	gyro_angle_yaw = 0;
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	613b      	str	r3, [r7, #16]

	Setup_Gyro_Signalen();
 8002018:	f7ff ff90 	bl	8001f3c <Setup_Gyro_Signalen>

	unsigned int i = 10000;
 800201c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002020:	60fb      	str	r3, [r7, #12]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 8002022:	e05b      	b.n	80020dc <Check_Gyro_Axes+0xe4>
	{
		Setup_Gyro_Signalen();
 8002024:	f7ff ff8a 	bl	8001f3c <Setup_Gyro_Signalen>
		i--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3b01      	subs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]

		gyro_angle_roll += gyro_roll * 0.00007;              //0.00007 = 17.5 (md/s) / 250(Hz)
 800202e:	69b8      	ldr	r0, [r7, #24]
 8002030:	f7fe fa2e 	bl	8000490 <__aeabi_f2d>
 8002034:	4604      	mov	r4, r0
 8002036:	460d      	mov	r5, r1
 8002038:	4bc3      	ldr	r3, [pc, #780]	; (8002348 <Check_Gyro_Axes+0x350>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa27 	bl	8000490 <__aeabi_f2d>
 8002042:	a3bf      	add	r3, pc, #764	; (adr r3, 8002340 <Check_Gyro_Axes+0x348>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fa7a 	bl	8000540 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f8be 	bl	80001d4 <__adddf3>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	4618      	mov	r0, r3
 800205e:	4621      	mov	r1, r4
 8002060:	f7fe fc80 	bl	8000964 <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	61bb      	str	r3, [r7, #24]
		gyro_angle_pitch += gyro_pitch * 0.00007;
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7fe fa11 	bl	8000490 <__aeabi_f2d>
 800206e:	4604      	mov	r4, r0
 8002070:	460d      	mov	r5, r1
 8002072:	4bb6      	ldr	r3, [pc, #728]	; (800234c <Check_Gyro_Axes+0x354>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa0a 	bl	8000490 <__aeabi_f2d>
 800207c:	a3b0      	add	r3, pc, #704	; (adr r3, 8002340 <Check_Gyro_Axes+0x348>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fa5d 	bl	8000540 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe f8a1 	bl	80001d4 <__adddf3>
 8002092:	4603      	mov	r3, r0
 8002094:	460c      	mov	r4, r1
 8002096:	4618      	mov	r0, r3
 8002098:	4621      	mov	r1, r4
 800209a:	f7fe fc63 	bl	8000964 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	617b      	str	r3, [r7, #20]
		gyro_angle_yaw += gyro_yaw * 0.00007;
 80020a2:	6938      	ldr	r0, [r7, #16]
 80020a4:	f7fe f9f4 	bl	8000490 <__aeabi_f2d>
 80020a8:	4604      	mov	r4, r0
 80020aa:	460d      	mov	r5, r1
 80020ac:	4ba8      	ldr	r3, [pc, #672]	; (8002350 <Check_Gyro_Axes+0x358>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f9ed 	bl	8000490 <__aeabi_f2d>
 80020b6:	a3a2      	add	r3, pc, #648	; (adr r3, 8002340 <Check_Gyro_Axes+0x348>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fa40 	bl	8000540 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	f7fe f884 	bl	80001d4 <__adddf3>
 80020cc:	4603      	mov	r3, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	4618      	mov	r0, r3
 80020d2:	4621      	mov	r1, r4
 80020d4:	f7fe fc46 	bl	8000964 <__aeabi_d2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	613b      	str	r3, [r7, #16]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80020dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80020e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	dd2d      	ble.n	800214a <Check_Gyro_Axes+0x152>
 80020ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80020f2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d524      	bpl.n	800214a <Check_Gyro_Axes+0x152>
 8002100:	edd7 7a05 	vldr	s15, [r7, #20]
 8002104:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	dd1b      	ble.n	800214a <Check_Gyro_Axes+0x152>
 8002112:	edd7 7a05 	vldr	s15, [r7, #20]
 8002116:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800211a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	d512      	bpl.n	800214a <Check_Gyro_Axes+0x152>
 8002124:	edd7 7a04 	vldr	s15, [r7, #16]
 8002128:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800212c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	dd09      	ble.n	800214a <Check_Gyro_Axes+0x152>
 8002136:	edd7 7a04 	vldr	s15, [r7, #16]
 800213a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800213e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	f53f af6d 	bmi.w	8002024 <Check_Gyro_Axes+0x2c>
//		HAL_Delay( 4 );	 //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}


	//Assign the moved axis to the corresponding function (pitch, roll, yaw)
	if(( gyro_angle_roll < -30 || gyro_angle_roll > 30 ) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 800214a:	edd7 7a06 	vldr	s15, [r7, #24]
 800214e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d408      	bmi.n	800216e <Check_Gyro_Axes+0x176>
 800215c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002160:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	dd36      	ble.n	80021dc <Check_Gyro_Axes+0x1e4>
 800216e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002172:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd2d      	ble.n	80021dc <Check_Gyro_Axes+0x1e4>
 8002180:	edd7 7a05 	vldr	s15, [r7, #20]
 8002184:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	d524      	bpl.n	80021dc <Check_Gyro_Axes+0x1e4>
 8002192:	edd7 7a04 	vldr	s15, [r7, #16]
 8002196:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	dd1b      	ble.n	80021dc <Check_Gyro_Axes+0x1e4>
 80021a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	d512      	bpl.n	80021dc <Check_Gyro_Axes+0x1e4>
	{
		gyro_check_byte |= 0b00000001;
 80021b6:	4b67      	ldr	r3, [pc, #412]	; (8002354 <Check_Gyro_Axes+0x35c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <Check_Gyro_Axes+0x35c>)
 80021c2:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_roll < 0 )	{	trigger_axis = 0b10000001;	}
 80021c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80021c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d0:	d502      	bpl.n	80021d8 <Check_Gyro_Axes+0x1e0>
 80021d2:	2381      	movs	r3, #129	; 0x81
 80021d4:	77fb      	strb	r3, [r7, #31]
 80021d6:	e001      	b.n	80021dc <Check_Gyro_Axes+0x1e4>
		else	{	trigger_axis = 0b00000001;	}
 80021d8:	2301      	movs	r3, #1
 80021da:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_pitch < -30 || gyro_angle_pitch > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80021dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d408      	bmi.n	8002200 <Check_Gyro_Axes+0x208>
 80021ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	dd36      	ble.n	800226e <Check_Gyro_Axes+0x276>
 8002200:	edd7 7a06 	vldr	s15, [r7, #24]
 8002204:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	dd2d      	ble.n	800226e <Check_Gyro_Axes+0x276>
 8002212:	edd7 7a06 	vldr	s15, [r7, #24]
 8002216:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	d524      	bpl.n	800226e <Check_Gyro_Axes+0x276>
 8002224:	edd7 7a04 	vldr	s15, [r7, #16]
 8002228:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800222c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	dd1b      	ble.n	800226e <Check_Gyro_Axes+0x276>
 8002236:	edd7 7a04 	vldr	s15, [r7, #16]
 800223a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800223e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	d512      	bpl.n	800226e <Check_Gyro_Axes+0x276>
	{
		gyro_check_byte |= 0b00000010;
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <Check_Gyro_Axes+0x35c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <Check_Gyro_Axes+0x35c>)
 8002254:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_pitch < 0 )	{	trigger_axis = 0b10000010;	}
 8002256:	edd7 7a05 	vldr	s15, [r7, #20]
 800225a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	d502      	bpl.n	800226a <Check_Gyro_Axes+0x272>
 8002264:	2382      	movs	r3, #130	; 0x82
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e001      	b.n	800226e <Check_Gyro_Axes+0x276>
		else	{	trigger_axis = 0b00000010;	}
 800226a:	2302      	movs	r3, #2
 800226c:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_yaw < -30 || gyro_angle_yaw > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 )
 800226e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002272:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d408      	bmi.n	8002292 <Check_Gyro_Axes+0x29a>
 8002280:	edd7 7a04 	vldr	s15, [r7, #16]
 8002284:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dd36      	ble.n	8002300 <Check_Gyro_Axes+0x308>
 8002292:	edd7 7a06 	vldr	s15, [r7, #24]
 8002296:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	dd2d      	ble.n	8002300 <Check_Gyro_Axes+0x308>
 80022a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d524      	bpl.n	8002300 <Check_Gyro_Axes+0x308>
 80022b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ba:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	dd1b      	ble.n	8002300 <Check_Gyro_Axes+0x308>
 80022c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d512      	bpl.n	8002300 <Check_Gyro_Axes+0x308>
	{
		gyro_check_byte |= 0b00000100;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <Check_Gyro_Axes+0x35c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <Check_Gyro_Axes+0x35c>)
 80022e6:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_yaw < 0 )	{	trigger_axis = 0b10000011;	}
 80022e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	d502      	bpl.n	80022fc <Check_Gyro_Axes+0x304>
 80022f6:	2383      	movs	r3, #131	; 0x83
 80022f8:	77fb      	strb	r3, [r7, #31]
 80022fa:	e001      	b.n	8002300 <Check_Gyro_Axes+0x308>
		else	{	trigger_axis = 0b00000011;	}
 80022fc:	2303      	movs	r3, #3
 80022fe:	77fb      	strb	r3, [r7, #31]
	}

	if( trigger_axis == 0 )
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <Check_Gyro_Axes+0x316>
	{
		error = true;
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <Check_Gyro_Axes+0x360>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e005      	b.n	800231a <Check_Gyro_Axes+0x322>
	}

	else
	if( movement == 1 )	{	roll_axis  = trigger_axis;	}
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <Check_Gyro_Axes+0x322>
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <Check_Gyro_Axes+0x364>)
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	7013      	strb	r3, [r2, #0]
	if( movement == 2 )	{	pitch_axis = trigger_axis;	}
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d102      	bne.n	8002326 <Check_Gyro_Axes+0x32e>
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <Check_Gyro_Axes+0x368>)
 8002322:	7ffb      	ldrb	r3, [r7, #31]
 8002324:	7013      	strb	r3, [r2, #0]
	if( movement == 3 )	{	yaw_axis   = trigger_axis;	}
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d102      	bne.n	8002332 <Check_Gyro_Axes+0x33a>
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <Check_Gyro_Axes+0x36c>)
 800232e:	7ffb      	ldrb	r3, [r7, #31]
 8002330:	7013      	strb	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bdb0      	pop	{r4, r5, r7, pc}
 800233a:	bf00      	nop
 800233c:	f3af 8000 	nop.w
 8002340:	d7c6fbd2 	.word	0xd7c6fbd2
 8002344:	3f12599e 	.word	0x3f12599e
 8002348:	20000390 	.word	0x20000390
 800234c:	20000370 	.word	0x20000370
 8002350:	20000378 	.word	0x20000378
 8002354:	2000033d 	.word	0x2000033d
 8002358:	20000058 	.word	0x20000058
 800235c:	20000361 	.word	0x20000361
 8002360:	20000360 	.word	0x20000360
 8002364:	20000334 	.word	0x20000334

08002368 <Register_Min_Max>:

void Register_Min_Max( void )
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
	uint8_t zero = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
	low_channel_1 = receiver_input_channel_1;
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <Register_Min_Max+0x1c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	; (8002534 <Register_Min_Max+0x1cc>)
 8002378:	6013      	str	r3, [r2, #0]
	low_channel_2 = receiver_input_channel_2;
 800237a:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <Register_Min_Max+0x1d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	; (800253c <Register_Min_Max+0x1d4>)
 8002380:	6013      	str	r3, [r2, #0]
	low_channel_3 = receiver_input_channel_3;
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <Register_Min_Max+0x1d8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6f      	ldr	r2, [pc, #444]	; (8002544 <Register_Min_Max+0x1dc>)
 8002388:	6013      	str	r3, [r2, #0]
	low_channel_4 = receiver_input_channel_4;
 800238a:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <Register_Min_Max+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6f      	ldr	r2, [pc, #444]	; (800254c <Register_Min_Max+0x1e4>)
 8002390:	6013      	str	r3, [r2, #0]

	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 8002392:	e009      	b.n	80023a8 <Register_Min_Max+0x40>
	{
		for(int i = 10000; i > 0; i-- )	{	}
 8002394:	f242 7310 	movw	r3, #10000	; 0x2710
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	e002      	b.n	80023a2 <Register_Min_Max+0x3a>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dcf9      	bgt.n	800239c <Register_Min_Max+0x34>
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <Register_Min_Max+0x1e8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f103 0214 	add.w	r2, r3, #20
 80023b0:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <Register_Min_Max+0x1c8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dd07      	ble.n	80023c8 <Register_Min_Max+0x60>
 80023b8:	4b65      	ldr	r3, [pc, #404]	; (8002550 <Register_Min_Max+0x1e8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1a3 0214 	sub.w	r2, r3, #20
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <Register_Min_Max+0x1c8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dbe5      	blt.n	8002394 <Register_Min_Max+0x2c>
	}
	
	int k = 20000000;
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <Register_Min_Max+0x1ec>)
 80023ca:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 80023cc:	e0a2      	b.n	8002514 <Register_Min_Max+0x1ac>
	{
		if(	receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)	{	zero |= 0b00000001;	}
 80023ce:	4b60      	ldr	r3, [pc, #384]	; (8002550 <Register_Min_Max+0x1e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f103 0214 	add.w	r2, r3, #20
 80023d6:	4b56      	ldr	r3, [pc, #344]	; (8002530 <Register_Min_Max+0x1c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dd0b      	ble.n	80023f6 <Register_Min_Max+0x8e>
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <Register_Min_Max+0x1e8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1a3 0214 	sub.w	r2, r3, #20
 80023e6:	4b52      	ldr	r3, [pc, #328]	; (8002530 <Register_Min_Max+0x1c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	da03      	bge.n	80023f6 <Register_Min_Max+0x8e>
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)	{	zero |= 0b00000010;	}
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <Register_Min_Max+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f103 0214 	add.w	r2, r3, #20
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <Register_Min_Max+0x1d0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	dd0b      	ble.n	800241e <Register_Min_Max+0xb6>
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <Register_Min_Max+0x1f0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1a3 0214 	sub.w	r2, r3, #20
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <Register_Min_Max+0x1d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	da03      	bge.n	800241e <Register_Min_Max+0xb6>
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)	{	zero |= 0b00000100;	}
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <Register_Min_Max+0x1f4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f103 0214 	add.w	r2, r3, #20
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <Register_Min_Max+0x1d8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	dd0b      	ble.n	8002446 <Register_Min_Max+0xde>
 800242e:	4b4b      	ldr	r3, [pc, #300]	; (800255c <Register_Min_Max+0x1f4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1a3 0214 	sub.w	r2, r3, #20
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <Register_Min_Max+0x1d8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	da03      	bge.n	8002446 <Register_Min_Max+0xde>
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)	{	zero |= 0b00001000;	}
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <Register_Min_Max+0x1f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f103 0214 	add.w	r2, r3, #20
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <Register_Min_Max+0x1e0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	dd0b      	ble.n	800246e <Register_Min_Max+0x106>
 8002456:	4b42      	ldr	r3, [pc, #264]	; (8002560 <Register_Min_Max+0x1f8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1a3 0214 	sub.w	r2, r3, #20
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <Register_Min_Max+0x1e0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	da03      	bge.n	800246e <Register_Min_Max+0x106>
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	73fb      	strb	r3, [r7, #15]

		if(	receiver_input_channel_1 < low_channel_1)	{	low_channel_1 = receiver_input_channel_1;	}
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <Register_Min_Max+0x1c8>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <Register_Min_Max+0x1cc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	da03      	bge.n	8002482 <Register_Min_Max+0x11a>
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <Register_Min_Max+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <Register_Min_Max+0x1cc>)
 8002480:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 < low_channel_2)	{	low_channel_2 = receiver_input_channel_2;	}
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <Register_Min_Max+0x1d0>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <Register_Min_Max+0x1d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	da03      	bge.n	8002496 <Register_Min_Max+0x12e>
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <Register_Min_Max+0x1d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <Register_Min_Max+0x1d4>)
 8002494:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 < low_channel_3)	{	low_channel_3 = receiver_input_channel_3;	}
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <Register_Min_Max+0x1d8>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <Register_Min_Max+0x1dc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	da03      	bge.n	80024aa <Register_Min_Max+0x142>
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <Register_Min_Max+0x1d8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a27      	ldr	r2, [pc, #156]	; (8002544 <Register_Min_Max+0x1dc>)
 80024a8:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 < low_channel_4)	{	low_channel_4 = receiver_input_channel_4;	}
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <Register_Min_Max+0x1e0>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <Register_Min_Max+0x1e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	da03      	bge.n	80024be <Register_Min_Max+0x156>
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <Register_Min_Max+0x1e0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <Register_Min_Max+0x1e4>)
 80024bc:	6013      	str	r3, [r2, #0]
		
		if(	receiver_input_channel_1 > high_channel_1)	{	high_channel_1 = receiver_input_channel_1;	}
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <Register_Min_Max+0x1c8>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <Register_Min_Max+0x1fc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	dd03      	ble.n	80024d2 <Register_Min_Max+0x16a>
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <Register_Min_Max+0x1c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <Register_Min_Max+0x1fc>)
 80024d0:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 > high_channel_2)	{	high_channel_2 = receiver_input_channel_2;	}
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <Register_Min_Max+0x1d0>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <Register_Min_Max+0x200>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	dd03      	ble.n	80024e6 <Register_Min_Max+0x17e>
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <Register_Min_Max+0x1d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <Register_Min_Max+0x200>)
 80024e4:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 > high_channel_3)	{	high_channel_3 = receiver_input_channel_3;	}
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <Register_Min_Max+0x1d8>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <Register_Min_Max+0x204>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	dd03      	ble.n	80024fa <Register_Min_Max+0x192>
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <Register_Min_Max+0x1d8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <Register_Min_Max+0x204>)
 80024f8:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 > high_channel_4)	{	high_channel_4 = receiver_input_channel_4;	}
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <Register_Min_Max+0x1e0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <Register_Min_Max+0x208>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	dd03      	ble.n	800250e <Register_Min_Max+0x1a6>
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <Register_Min_Max+0x1e0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <Register_Min_Max+0x208>)
 800250c:	6013      	str	r3, [r2, #0]

		k--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3b01      	subs	r3, #1
 8002512:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	dd03      	ble.n	8002522 <Register_Min_Max+0x1ba>
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b0e      	cmp	r3, #14
 800251e:	f67f af56 	bls.w	80023ce <Register_Min_Max+0x66>
	}
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000038c 	.word	0x2000038c
 8002534:	20000348 	.word	0x20000348
 8002538:	20000380 	.word	0x20000380
 800253c:	20000330 	.word	0x20000330
 8002540:	2000009c 	.word	0x2000009c
 8002544:	20000310 	.word	0x20000310
 8002548:	20000388 	.word	0x20000388
 800254c:	20000358 	.word	0x20000358
 8002550:	2000035c 	.word	0x2000035c
 8002554:	01312d00 	.word	0x01312d00
 8002558:	20000328 	.word	0x20000328
 800255c:	2000034c 	.word	0x2000034c
 8002560:	20000314 	.word	0x20000314
 8002564:	2000032c 	.word	0x2000032c
 8002568:	20000364 	.word	0x20000364
 800256c:	20000340 	.word	0x20000340
 8002570:	20000354 	.word	0x20000354

08002574 <Check_Receiver_Inputs>:

void Check_Receiver_Inputs( uint8_t movement )			//Check if a receiver input value is changing within 30 seconds
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]
	int pulse_length;
	unsigned int i = 3000000;
 8002582:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <Check_Receiver_Inputs+0x18c>)
 8002584:	60fb      	str	r3, [r7, #12]

	while( i > 0 && trigger == 0 )
 8002586:	e065      	b.n	8002654 <Check_Receiver_Inputs+0xe0>
	{
		HAL_Delay( 250 );
 8002588:	20fa      	movs	r0, #250	; 0xfa
 800258a:	f001 f85d 	bl	8003648 <HAL_Delay>

		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <Check_Receiver_Inputs+0x190>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8002596:	4293      	cmp	r3, r2
 8002598:	dc05      	bgt.n	80025a6 <Check_Receiver_Inputs+0x32>
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <Check_Receiver_Inputs+0x190>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80025a2:	4293      	cmp	r3, r2
 80025a4:	dc0b      	bgt.n	80025be <Check_Receiver_Inputs+0x4a>
		{
			trigger = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000001;
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <Check_Receiver_Inputs+0x194>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b54      	ldr	r3, [pc, #336]	; (8002708 <Check_Receiver_Inputs+0x194>)
 80025b6:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_1;
 80025b8:	4b52      	ldr	r3, [pc, #328]	; (8002704 <Check_Receiver_Inputs+0x190>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250)
 80025be:	4b53      	ldr	r3, [pc, #332]	; (800270c <Check_Receiver_Inputs+0x198>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80025c6:	4293      	cmp	r3, r2
 80025c8:	dc05      	bgt.n	80025d6 <Check_Receiver_Inputs+0x62>
 80025ca:	4b50      	ldr	r3, [pc, #320]	; (800270c <Check_Receiver_Inputs+0x198>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80025d2:	4293      	cmp	r3, r2
 80025d4:	dc0b      	bgt.n	80025ee <Check_Receiver_Inputs+0x7a>
		{
			trigger = 2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000010;
 80025da:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <Check_Receiver_Inputs+0x194>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b48      	ldr	r3, [pc, #288]	; (8002708 <Check_Receiver_Inputs+0x194>)
 80025e6:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_2;
 80025e8:	4b48      	ldr	r3, [pc, #288]	; (800270c <Check_Receiver_Inputs+0x198>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250)
 80025ee:	4b48      	ldr	r3, [pc, #288]	; (8002710 <Check_Receiver_Inputs+0x19c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80025f6:	4293      	cmp	r3, r2
 80025f8:	dc05      	bgt.n	8002606 <Check_Receiver_Inputs+0x92>
 80025fa:	4b45      	ldr	r3, [pc, #276]	; (8002710 <Check_Receiver_Inputs+0x19c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002602:	4293      	cmp	r3, r2
 8002604:	dc0b      	bgt.n	800261e <Check_Receiver_Inputs+0xaa>
		{
			trigger = 3;
 8002606:	2303      	movs	r3, #3
 8002608:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000100;
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <Check_Receiver_Inputs+0x194>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <Check_Receiver_Inputs+0x194>)
 8002616:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_3;
 8002618:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <Check_Receiver_Inputs+0x19c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250)
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <Check_Receiver_Inputs+0x1a0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8002626:	4293      	cmp	r3, r2
 8002628:	dc05      	bgt.n	8002636 <Check_Receiver_Inputs+0xc2>
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <Check_Receiver_Inputs+0x1a0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002632:	4293      	cmp	r3, r2
 8002634:	dc0b      	bgt.n	800264e <Check_Receiver_Inputs+0xda>
		{
			trigger = 4;
 8002636:	2304      	movs	r3, #4
 8002638:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00001000;
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <Check_Receiver_Inputs+0x194>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <Check_Receiver_Inputs+0x194>)
 8002646:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_4;
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <Check_Receiver_Inputs+0x1a0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]
		}

		i--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
	while( i > 0 && trigger == 0 )
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <Check_Receiver_Inputs+0xec>
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d093      	beq.n	8002588 <Check_Receiver_Inputs+0x14>
	}

	if(trigger == 0)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <Check_Receiver_Inputs+0xfa>
	{
		error = 1;
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <Check_Receiver_Inputs+0x1a4>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
		{
			channel_4_assign = trigger;
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
 800266c:	e043      	b.n	80026f6 <Check_Receiver_Inputs+0x182>
		if(movement == 1)
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10d      	bne.n	8002690 <Check_Receiver_Inputs+0x11c>
			channel_3_assign = trigger;
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <Check_Receiver_Inputs+0x1a8>)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002680:	4293      	cmp	r3, r2
 8002682:	dc05      	bgt.n	8002690 <Check_Receiver_Inputs+0x11c>
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <Check_Receiver_Inputs+0x1a8>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3b80      	subs	r3, #128	; 0x80
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <Check_Receiver_Inputs+0x1a8>)
 800268e:	701a      	strb	r2, [r3, #0]
		if(movement == 2)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d10d      	bne.n	80026b2 <Check_Receiver_Inputs+0x13e>
			channel_1_assign = trigger;
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <Check_Receiver_Inputs+0x1ac>)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_1_assign += 0b10000000;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026a2:	4293      	cmp	r3, r2
 80026a4:	dc05      	bgt.n	80026b2 <Check_Receiver_Inputs+0x13e>
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <Check_Receiver_Inputs+0x1ac>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	3b80      	subs	r3, #128	; 0x80
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <Check_Receiver_Inputs+0x1ac>)
 80026b0:	701a      	strb	r2, [r3, #0]
		if(movement == 3)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10d      	bne.n	80026d4 <Check_Receiver_Inputs+0x160>
			channel_2_assign = trigger;
 80026b8:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <Check_Receiver_Inputs+0x1b0>)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026c4:	4293      	cmp	r3, r2
 80026c6:	dc05      	bgt.n	80026d4 <Check_Receiver_Inputs+0x160>
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <Check_Receiver_Inputs+0x1b0>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	3b80      	subs	r3, #128	; 0x80
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <Check_Receiver_Inputs+0x1b0>)
 80026d2:	701a      	strb	r2, [r3, #0]
		if(movement == 4)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d10d      	bne.n	80026f6 <Check_Receiver_Inputs+0x182>
			channel_4_assign = trigger;
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <Check_Receiver_Inputs+0x1b4>)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	7013      	strb	r3, [r2, #0]
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026e6:	4293      	cmp	r3, r2
 80026e8:	dc05      	bgt.n	80026f6 <Check_Receiver_Inputs+0x182>
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <Check_Receiver_Inputs+0x1b4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	3b80      	subs	r3, #128	; 0x80
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <Check_Receiver_Inputs+0x1b4>)
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	002dc6c0 	.word	0x002dc6c0
 8002704:	2000038c 	.word	0x2000038c
 8002708:	2000033c 	.word	0x2000033c
 800270c:	20000380 	.word	0x20000380
 8002710:	2000009c 	.word	0x2000009c
 8002714:	20000388 	.word	0x20000388
 8002718:	20000058 	.word	0x20000058
 800271c:	20000344 	.word	0x20000344
 8002720:	20000351 	.word	0x20000351
 8002724:	20000335 	.word	0x20000335
 8002728:	20000350 	.word	0x20000350

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002732:	f000 ff23 	bl	800357c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 fa9b 	bl	8002c70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay( 3000 );
 800273a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800273e:	f000 ff83 	bl	8003648 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002742:	f000 fc71 	bl	8003028 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002746:	f000 faf1 	bl	8002d2c <MX_I2C1_Init>
  MX_TIM2_Init();
 800274a:	f000 fb2f 	bl	8002dac <MX_TIM2_Init>
  MX_TIM3_Init();
 800274e:	f000 fba1 	bl	8002e94 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002752:	f000 fc39 	bl	8002fc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// Flash to EEPROM Array
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  0, &eeprom_data[0]);
 8002756:	4b99      	ldr	r3, [pc, #612]	; (80029bc <main+0x290>)
 8002758:	2200      	movs	r2, #0
 800275a:	4999      	ldr	r1, [pc, #612]	; (80029c0 <main+0x294>)
 800275c:	207f      	movs	r0, #127	; 0x7f
 800275e:	f7fe fa41 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  1, &eeprom_data[1]);
 8002762:	4b98      	ldr	r3, [pc, #608]	; (80029c4 <main+0x298>)
 8002764:	2201      	movs	r2, #1
 8002766:	4996      	ldr	r1, [pc, #600]	; (80029c0 <main+0x294>)
 8002768:	207f      	movs	r0, #127	; 0x7f
 800276a:	f7fe fa3b 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  2, &eeprom_data[2]);
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <main+0x29c>)
 8002770:	2202      	movs	r2, #2
 8002772:	4993      	ldr	r1, [pc, #588]	; (80029c0 <main+0x294>)
 8002774:	207f      	movs	r0, #127	; 0x7f
 8002776:	f7fe fa35 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  3, &eeprom_data[3]);
 800277a:	4b94      	ldr	r3, [pc, #592]	; (80029cc <main+0x2a0>)
 800277c:	2203      	movs	r2, #3
 800277e:	4990      	ldr	r1, [pc, #576]	; (80029c0 <main+0x294>)
 8002780:	207f      	movs	r0, #127	; 0x7f
 8002782:	f7fe fa2f 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  4, &eeprom_data[4]);
 8002786:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <main+0x2a4>)
 8002788:	2204      	movs	r2, #4
 800278a:	498d      	ldr	r1, [pc, #564]	; (80029c0 <main+0x294>)
 800278c:	207f      	movs	r0, #127	; 0x7f
 800278e:	f7fe fa29 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  5, &eeprom_data[5]);
 8002792:	4b90      	ldr	r3, [pc, #576]	; (80029d4 <main+0x2a8>)
 8002794:	2205      	movs	r2, #5
 8002796:	498a      	ldr	r1, [pc, #552]	; (80029c0 <main+0x294>)
 8002798:	207f      	movs	r0, #127	; 0x7f
 800279a:	f7fe fa23 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  6, &eeprom_data[6]);
 800279e:	4b8e      	ldr	r3, [pc, #568]	; (80029d8 <main+0x2ac>)
 80027a0:	2206      	movs	r2, #6
 80027a2:	4987      	ldr	r1, [pc, #540]	; (80029c0 <main+0x294>)
 80027a4:	207f      	movs	r0, #127	; 0x7f
 80027a6:	f7fe fa1d 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  7, &eeprom_data[7]);
 80027aa:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <main+0x2b0>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	4984      	ldr	r1, [pc, #528]	; (80029c0 <main+0x294>)
 80027b0:	207f      	movs	r0, #127	; 0x7f
 80027b2:	f7fe fa17 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  8, &eeprom_data[8]);
 80027b6:	4b8a      	ldr	r3, [pc, #552]	; (80029e0 <main+0x2b4>)
 80027b8:	2208      	movs	r2, #8
 80027ba:	4981      	ldr	r1, [pc, #516]	; (80029c0 <main+0x294>)
 80027bc:	207f      	movs	r0, #127	; 0x7f
 80027be:	f7fe fa11 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  9, &eeprom_data[9]);
 80027c2:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <main+0x2b8>)
 80027c4:	2209      	movs	r2, #9
 80027c6:	497e      	ldr	r1, [pc, #504]	; (80029c0 <main+0x294>)
 80027c8:	207f      	movs	r0, #127	; 0x7f
 80027ca:	f7fe fa0b 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 10, &eeprom_data[10]);
 80027ce:	4b86      	ldr	r3, [pc, #536]	; (80029e8 <main+0x2bc>)
 80027d0:	220a      	movs	r2, #10
 80027d2:	497b      	ldr	r1, [pc, #492]	; (80029c0 <main+0x294>)
 80027d4:	207f      	movs	r0, #127	; 0x7f
 80027d6:	f7fe fa05 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 11, &eeprom_data[11]);
 80027da:	4b84      	ldr	r3, [pc, #528]	; (80029ec <main+0x2c0>)
 80027dc:	220b      	movs	r2, #11
 80027de:	4978      	ldr	r1, [pc, #480]	; (80029c0 <main+0x294>)
 80027e0:	207f      	movs	r0, #127	; 0x7f
 80027e2:	f7fe f9ff 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 12, &eeprom_data[12]);
 80027e6:	4b82      	ldr	r3, [pc, #520]	; (80029f0 <main+0x2c4>)
 80027e8:	220c      	movs	r2, #12
 80027ea:	4975      	ldr	r1, [pc, #468]	; (80029c0 <main+0x294>)
 80027ec:	207f      	movs	r0, #127	; 0x7f
 80027ee:	f7fe f9f9 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 13, &eeprom_data[13]);
 80027f2:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <main+0x2c8>)
 80027f4:	220d      	movs	r2, #13
 80027f6:	4972      	ldr	r1, [pc, #456]	; (80029c0 <main+0x294>)
 80027f8:	207f      	movs	r0, #127	; 0x7f
 80027fa:	f7fe f9f3 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 14, &eeprom_data[14]);
 80027fe:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <main+0x2cc>)
 8002800:	220e      	movs	r2, #14
 8002802:	496f      	ldr	r1, [pc, #444]	; (80029c0 <main+0x294>)
 8002804:	207f      	movs	r0, #127	; 0x7f
 8002806:	f7fe f9ed 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 15, &eeprom_data[15]);
 800280a:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <main+0x2d0>)
 800280c:	220f      	movs	r2, #15
 800280e:	496c      	ldr	r1, [pc, #432]	; (80029c0 <main+0x294>)
 8002810:	207f      	movs	r0, #127	; 0x7f
 8002812:	f7fe f9e7 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 16, &eeprom_data[16]);
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <main+0x2d4>)
 8002818:	2210      	movs	r2, #16
 800281a:	4969      	ldr	r1, [pc, #420]	; (80029c0 <main+0x294>)
 800281c:	207f      	movs	r0, #127	; 0x7f
 800281e:	f7fe f9e1 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 17, &eeprom_data[17]);
 8002822:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <main+0x2d8>)
 8002824:	2211      	movs	r2, #17
 8002826:	4966      	ldr	r1, [pc, #408]	; (80029c0 <main+0x294>)
 8002828:	207f      	movs	r0, #127	; 0x7f
 800282a:	f7fe f9db 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 18, &eeprom_data[18]);
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <main+0x2dc>)
 8002830:	2212      	movs	r2, #18
 8002832:	4963      	ldr	r1, [pc, #396]	; (80029c0 <main+0x294>)
 8002834:	207f      	movs	r0, #127	; 0x7f
 8002836:	f7fe f9d5 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 19, &eeprom_data[19]);
 800283a:	4b74      	ldr	r3, [pc, #464]	; (8002a0c <main+0x2e0>)
 800283c:	2213      	movs	r2, #19
 800283e:	4960      	ldr	r1, [pc, #384]	; (80029c0 <main+0x294>)
 8002840:	207f      	movs	r0, #127	; 0x7f
 8002842:	f7fe f9cf 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 20, &eeprom_data[20]);
 8002846:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <main+0x2e4>)
 8002848:	2214      	movs	r2, #20
 800284a:	495d      	ldr	r1, [pc, #372]	; (80029c0 <main+0x294>)
 800284c:	207f      	movs	r0, #127	; 0x7f
 800284e:	f7fe f9c9 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 21, &eeprom_data[21]);
 8002852:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <main+0x2e8>)
 8002854:	2215      	movs	r2, #21
 8002856:	495a      	ldr	r1, [pc, #360]	; (80029c0 <main+0x294>)
 8002858:	207f      	movs	r0, #127	; 0x7f
 800285a:	f7fe f9c3 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 22, &eeprom_data[22]);
 800285e:	4b6e      	ldr	r3, [pc, #440]	; (8002a18 <main+0x2ec>)
 8002860:	2216      	movs	r2, #22
 8002862:	4957      	ldr	r1, [pc, #348]	; (80029c0 <main+0x294>)
 8002864:	207f      	movs	r0, #127	; 0x7f
 8002866:	f7fe f9bd 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 23, &eeprom_data[23]);
 800286a:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <main+0x2f0>)
 800286c:	2217      	movs	r2, #23
 800286e:	4954      	ldr	r1, [pc, #336]	; (80029c0 <main+0x294>)
 8002870:	207f      	movs	r0, #127	; 0x7f
 8002872:	f7fe f9b7 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 24, &eeprom_data[24]);
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <main+0x2f4>)
 8002878:	2218      	movs	r2, #24
 800287a:	4951      	ldr	r1, [pc, #324]	; (80029c0 <main+0x294>)
 800287c:	207f      	movs	r0, #127	; 0x7f
 800287e:	f7fe f9b1 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 25, &eeprom_data[25]);
 8002882:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <main+0x2f8>)
 8002884:	2219      	movs	r2, #25
 8002886:	494e      	ldr	r1, [pc, #312]	; (80029c0 <main+0x294>)
 8002888:	207f      	movs	r0, #127	; 0x7f
 800288a:	f7fe f9ab 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 26, &eeprom_data[26]);
 800288e:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <main+0x2fc>)
 8002890:	221a      	movs	r2, #26
 8002892:	494b      	ldr	r1, [pc, #300]	; (80029c0 <main+0x294>)
 8002894:	207f      	movs	r0, #127	; 0x7f
 8002896:	f7fe f9a5 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 27, &eeprom_data[27]);
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <main+0x300>)
 800289c:	221b      	movs	r2, #27
 800289e:	4948      	ldr	r1, [pc, #288]	; (80029c0 <main+0x294>)
 80028a0:	207f      	movs	r0, #127	; 0x7f
 80028a2:	f7fe f99f 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 28, &eeprom_data[28]);
 80028a6:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <main+0x304>)
 80028a8:	221c      	movs	r2, #28
 80028aa:	4945      	ldr	r1, [pc, #276]	; (80029c0 <main+0x294>)
 80028ac:	207f      	movs	r0, #127	; 0x7f
 80028ae:	f7fe f999 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 29, &eeprom_data[29]);
 80028b2:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <main+0x308>)
 80028b4:	221d      	movs	r2, #29
 80028b6:	4942      	ldr	r1, [pc, #264]	; (80029c0 <main+0x294>)
 80028b8:	207f      	movs	r0, #127	; 0x7f
 80028ba:	f7fe f993 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 30, &eeprom_data[30]);
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <main+0x30c>)
 80028c0:	221e      	movs	r2, #30
 80028c2:	493f      	ldr	r1, [pc, #252]	; (80029c0 <main+0x294>)
 80028c4:	207f      	movs	r0, #127	; 0x7f
 80028c6:	f7fe f98d 	bl	8000be4 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data[31]);
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <main+0x310>)
 80028cc:	221f      	movs	r2, #31
 80028ce:	493c      	ldr	r1, [pc, #240]	; (80029c0 <main+0x294>)
 80028d0:	207f      	movs	r0, #127	; 0x7f
 80028d2:	f7fe f987 	bl	8000be4 <Flash_EEPROM_Data_Read>

	L3GD20H_Init();
 80028d6:	f7fe fb93 	bl	8001000 <L3GD20H_Init>
	PWM_IC_Start();
 80028da:	f7fe fc95 	bl	8001208 <PWM_IC_Start>
	///
	HAL_Delay( 2500 );
 80028de:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80028e2:	f000 feb1 	bl	8003648 <HAL_Delay>

	/////////////////////////////////////////////////////////////////////////


	if( gyro_error == false )
 80028e6:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <main+0x314>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01d      	beq.n	8002930 <main+0x204>
	{
		sprintf(uartTX, "                                                                                                    ");
 80028f4:	4a53      	ldr	r2, [pc, #332]	; (8002a44 <main+0x318>)
 80028f6:	4b54      	ldr	r3, [pc, #336]	; (8002a48 <main+0x31c>)
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	2365      	movs	r3, #101	; 0x65
 80028fe:	461a      	mov	r2, r3
 8002900:	f006 fae6 	bl	8008ed0 <memcpy>
		sprintf(uartTX, "\nSystem started!\n");
 8002904:	4a4f      	ldr	r2, [pc, #316]	; (8002a44 <main+0x318>)
 8002906:	4b51      	ldr	r3, [pc, #324]	; (8002a4c <main+0x320>)
 8002908:	4615      	mov	r5, r2
 800290a:	461c      	mov	r4, r3
 800290c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290e:	6028      	str	r0, [r5, #0]
 8002910:	6069      	str	r1, [r5, #4]
 8002912:	60aa      	str	r2, [r5, #8]
 8002914:	60eb      	str	r3, [r5, #12]
 8002916:	8823      	ldrh	r3, [r4, #0]
 8002918:	822b      	strh	r3, [r5, #16]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800291a:	2364      	movs	r3, #100	; 0x64
 800291c:	2265      	movs	r2, #101	; 0x65
 800291e:	4949      	ldr	r1, [pc, #292]	; (8002a44 <main+0x318>)
 8002920:	484b      	ldr	r0, [pc, #300]	; (8002a50 <main+0x324>)
 8002922:	f005 fced 	bl	8008300 <HAL_UART_Transmit>
		HAL_Delay( 2500 );
 8002926:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800292a:	f000 fe8d 	bl	8003648 <HAL_Delay>
 800292e:	e03c      	b.n	80029aa <main+0x27e>
	}
	else if( gyro_error == true )
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <main+0x314>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d021      	beq.n	800297c <main+0x250>
	{
		  sprintf(uartTX, "                                                                                                    ");
 8002938:	4a42      	ldr	r2, [pc, #264]	; (8002a44 <main+0x318>)
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <main+0x31c>)
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	2365      	movs	r3, #101	; 0x65
 8002942:	461a      	mov	r2, r3
 8002944:	f006 fac4 	bl	8008ed0 <memcpy>
		  sprintf(uartTX, "\nSystem failed to start!\n");
 8002948:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <main+0x318>)
 800294a:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <main+0x328>)
 800294c:	4615      	mov	r5, r2
 800294e:	461c      	mov	r4, r3
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	6028      	str	r0, [r5, #0]
 8002954:	6069      	str	r1, [r5, #4]
 8002956:	60aa      	str	r2, [r5, #8]
 8002958:	60eb      	str	r3, [r5, #12]
 800295a:	cc03      	ldmia	r4!, {r0, r1}
 800295c:	6128      	str	r0, [r5, #16]
 800295e:	6169      	str	r1, [r5, #20]
 8002960:	8823      	ldrh	r3, [r4, #0]
 8002962:	832b      	strh	r3, [r5, #24]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002964:	2364      	movs	r3, #100	; 0x64
 8002966:	2265      	movs	r2, #101	; 0x65
 8002968:	4936      	ldr	r1, [pc, #216]	; (8002a44 <main+0x318>)
 800296a:	4839      	ldr	r0, [pc, #228]	; (8002a50 <main+0x324>)
 800296c:	f005 fcc8 	bl	8008300 <HAL_UART_Transmit>

		  while ( gyro_error ) {	} 		// Endless Loop
 8002970:	bf00      	nop
 8002972:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <main+0x314>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1fb      	bne.n	8002972 <main+0x246>
 800297a:	e016      	b.n	80029aa <main+0x27e>
	}
	else
	{
		  sprintf(uartTX, "                                                                                                    ");
 800297c:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <main+0x318>)
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <main+0x31c>)
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	2365      	movs	r3, #101	; 0x65
 8002986:	461a      	mov	r2, r3
 8002988:	f006 faa2 	bl	8008ed0 <memcpy>
		  sprintf(uartTX, "\nOh shit!\n");
 800298c:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <main+0x318>)
 800298e:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <main+0x32c>)
 8002990:	cb03      	ldmia	r3!, {r0, r1}
 8002992:	6010      	str	r0, [r2, #0]
 8002994:	6051      	str	r1, [r2, #4]
 8002996:	8819      	ldrh	r1, [r3, #0]
 8002998:	789b      	ldrb	r3, [r3, #2]
 800299a:	8111      	strh	r1, [r2, #8]
 800299c:	7293      	strb	r3, [r2, #10]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800299e:	2364      	movs	r3, #100	; 0x64
 80029a0:	2265      	movs	r2, #101	; 0x65
 80029a2:	4928      	ldr	r1, [pc, #160]	; (8002a44 <main+0x318>)
 80029a4:	482a      	ldr	r0, [pc, #168]	; (8002a50 <main+0x324>)
 80029a6:	f005 fcab 	bl	8008300 <HAL_UART_Transmit>
	}

	/////////////////////////////////////////////////////////////////////////

	if ( eeprom_data[31] == 92 )
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <main+0x290>)
 80029ac:	7fdb      	ldrb	r3, [r3, #31]
 80029ae:	2b5c      	cmp	r3, #92	; 0x5c
 80029b0:	f040 80db 	bne.w	8002b6a <main+0x43e>
	{
		while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 80029b4:	e08c      	b.n	8002ad0 <main+0x3a4>
		{
			for (int i = 0; i <= 50000000; i++ )
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	e085      	b.n	8002ac8 <main+0x39c>
 80029bc:	2000007c 	.word	0x2000007c
 80029c0:	0803f800 	.word	0x0803f800
 80029c4:	2000007d 	.word	0x2000007d
 80029c8:	2000007e 	.word	0x2000007e
 80029cc:	2000007f 	.word	0x2000007f
 80029d0:	20000080 	.word	0x20000080
 80029d4:	20000081 	.word	0x20000081
 80029d8:	20000082 	.word	0x20000082
 80029dc:	20000083 	.word	0x20000083
 80029e0:	20000084 	.word	0x20000084
 80029e4:	20000085 	.word	0x20000085
 80029e8:	20000086 	.word	0x20000086
 80029ec:	20000087 	.word	0x20000087
 80029f0:	20000088 	.word	0x20000088
 80029f4:	20000089 	.word	0x20000089
 80029f8:	2000008a 	.word	0x2000008a
 80029fc:	2000008b 	.word	0x2000008b
 8002a00:	2000008c 	.word	0x2000008c
 8002a04:	2000008d 	.word	0x2000008d
 8002a08:	2000008e 	.word	0x2000008e
 8002a0c:	2000008f 	.word	0x2000008f
 8002a10:	20000090 	.word	0x20000090
 8002a14:	20000091 	.word	0x20000091
 8002a18:	20000092 	.word	0x20000092
 8002a1c:	20000093 	.word	0x20000093
 8002a20:	20000094 	.word	0x20000094
 8002a24:	20000095 	.word	0x20000095
 8002a28:	20000096 	.word	0x20000096
 8002a2c:	20000097 	.word	0x20000097
 8002a30:	20000098 	.word	0x20000098
 8002a34:	20000099 	.word	0x20000099
 8002a38:	2000009a 	.word	0x2000009a
 8002a3c:	2000009b 	.word	0x2000009b
 8002a40:	2000036b 	.word	0x2000036b
 8002a44:	200002a4 	.word	0x200002a4
 8002a48:	080093e0 	.word	0x080093e0
 8002a4c:	08009448 	.word	0x08009448
 8002a50:	200001f8 	.word	0x200001f8
 8002a54:	0800945c 	.word	0x0800945c
 8002a58:	08009478 	.word	0x08009478
			{
				if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a7a      	ldr	r2, [pc, #488]	; (8002c48 <main+0x51c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d12e      	bne.n	8002ac2 <main+0x396>
 8002a64:	2101      	movs	r1, #1
 8002a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6a:	f001 fa39 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d026      	beq.n	8002ac2 <main+0x396>
				{
					sprintf(uartTX, "                                                                                                    ");
 8002a74:	4a75      	ldr	r2, [pc, #468]	; (8002c4c <main+0x520>)
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <main+0x524>)
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	2365      	movs	r3, #101	; 0x65
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f006 fa26 	bl	8008ed0 <memcpy>
					sprintf(uartTX, "\nESC Calibration is starting! Reset after calibration!\n");
 8002a84:	4b71      	ldr	r3, [pc, #452]	; (8002c4c <main+0x520>)
 8002a86:	4a73      	ldr	r2, [pc, #460]	; (8002c54 <main+0x528>)
 8002a88:	4614      	mov	r4, r2
 8002a8a:	469c      	mov	ip, r3
 8002a8c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002a90:	4665      	mov	r5, ip
 8002a92:	4626      	mov	r6, r4
 8002a94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a96:	6028      	str	r0, [r5, #0]
 8002a98:	6069      	str	r1, [r5, #4]
 8002a9a:	60aa      	str	r2, [r5, #8]
 8002a9c:	60eb      	str	r3, [r5, #12]
 8002a9e:	3410      	adds	r4, #16
 8002aa0:	f10c 0c10 	add.w	ip, ip, #16
 8002aa4:	4574      	cmp	r4, lr
 8002aa6:	d1f3      	bne.n	8002a90 <main+0x364>
 8002aa8:	4662      	mov	r2, ip
 8002aaa:	4623      	mov	r3, r4
 8002aac:	cb03      	ldmia	r3!, {r0, r1}
 8002aae:	6010      	str	r0, [r2, #0]
 8002ab0:	6051      	str	r1, [r2, #4]
					HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	2265      	movs	r2, #101	; 0x65
 8002ab6:	4965      	ldr	r1, [pc, #404]	; (8002c4c <main+0x520>)
 8002ab8:	4867      	ldr	r0, [pc, #412]	; (8002c58 <main+0x52c>)
 8002aba:	f005 fc21 	bl	8008300 <HAL_UART_Transmit>

					ESC_Calibration();
 8002abe:	f7fd ffa1 	bl	8000a04 <ESC_Calibration>
			for (int i = 0; i <= 50000000; i++ )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a5f      	ldr	r2, [pc, #380]	; (8002c48 <main+0x51c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	ddc5      	ble.n	8002a5c <main+0x330>
		while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f001 fa03 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f af6a 	bne.w	80029b6 <main+0x28a>
				}
			}
		}


		sprintf(uartTX, "                                                                                                    ");
 8002ae2:	4a5a      	ldr	r2, [pc, #360]	; (8002c4c <main+0x520>)
 8002ae4:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <main+0x524>)
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2365      	movs	r3, #101	; 0x65
 8002aec:	461a      	mov	r2, r3
 8002aee:	f006 f9ef 	bl	8008ed0 <memcpy>
		sprintf(uartTX, "\nFlight Setup is starting!\n");
 8002af2:	4a56      	ldr	r2, [pc, #344]	; (8002c4c <main+0x520>)
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <main+0x530>)
 8002af6:	4615      	mov	r5, r2
 8002af8:	461c      	mov	r4, r3
 8002afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afc:	6028      	str	r0, [r5, #0]
 8002afe:	6069      	str	r1, [r5, #4]
 8002b00:	60aa      	str	r2, [r5, #8]
 8002b02:	60eb      	str	r3, [r5, #12]
 8002b04:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002b06:	6128      	str	r0, [r5, #16]
 8002b08:	6169      	str	r1, [r5, #20]
 8002b0a:	61aa      	str	r2, [r5, #24]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002b0c:	2364      	movs	r3, #100	; 0x64
 8002b0e:	2265      	movs	r2, #101	; 0x65
 8002b10:	494e      	ldr	r1, [pc, #312]	; (8002c4c <main+0x520>)
 8002b12:	4851      	ldr	r0, [pc, #324]	; (8002c58 <main+0x52c>)
 8002b14:	f005 fbf4 	bl	8008300 <HAL_UART_Transmit>

		Flight_Control_Setup();
 8002b18:	f7fe f88c 	bl	8000c34 <Flight_Control_Setup>

		sprintf(uartTX, "                                                                                                    ");
 8002b1c:	4a4b      	ldr	r2, [pc, #300]	; (8002c4c <main+0x520>)
 8002b1e:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <main+0x524>)
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	2365      	movs	r3, #101	; 0x65
 8002b26:	461a      	mov	r2, r3
 8002b28:	f006 f9d2 	bl	8008ed0 <memcpy>
		sprintf(uartTX, "\nFlight Setup is done! Ready to fly!\n");
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <main+0x520>)
 8002b2e:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <main+0x534>)
 8002b30:	4614      	mov	r4, r2
 8002b32:	469c      	mov	ip, r3
 8002b34:	f104 0e20 	add.w	lr, r4, #32
 8002b38:	4665      	mov	r5, ip
 8002b3a:	4626      	mov	r6, r4
 8002b3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b3e:	6028      	str	r0, [r5, #0]
 8002b40:	6069      	str	r1, [r5, #4]
 8002b42:	60aa      	str	r2, [r5, #8]
 8002b44:	60eb      	str	r3, [r5, #12]
 8002b46:	3410      	adds	r4, #16
 8002b48:	f10c 0c10 	add.w	ip, ip, #16
 8002b4c:	4574      	cmp	r4, lr
 8002b4e:	d1f3      	bne.n	8002b38 <main+0x40c>
 8002b50:	4663      	mov	r3, ip
 8002b52:	4622      	mov	r2, r4
 8002b54:	6810      	ldr	r0, [r2, #0]
 8002b56:	6018      	str	r0, [r3, #0]
 8002b58:	8892      	ldrh	r2, [r2, #4]
 8002b5a:	809a      	strh	r2, [r3, #4]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002b5c:	2364      	movs	r3, #100	; 0x64
 8002b5e:	2265      	movs	r2, #101	; 0x65
 8002b60:	493a      	ldr	r1, [pc, #232]	; (8002c4c <main+0x520>)
 8002b62:	483d      	ldr	r0, [pc, #244]	; (8002c58 <main+0x52c>)
 8002b64:	f005 fbcc 	bl	8008300 <HAL_UART_Transmit>
 8002b68:	e06c      	b.n	8002c44 <main+0x518>
	}
	else
	{
		setup_error = true;
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <main+0x538>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]

		sprintf(uartTX, "                                                                                                    ");
 8002b70:	4a36      	ldr	r2, [pc, #216]	; (8002c4c <main+0x520>)
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <main+0x524>)
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	2365      	movs	r3, #101	; 0x65
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f006 f9a8 	bl	8008ed0 <memcpy>
		sprintf(uartTX, "\nMain Setup has not been done correctly!\n");
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <main+0x520>)
 8002b82:	4a39      	ldr	r2, [pc, #228]	; (8002c68 <main+0x53c>)
 8002b84:	4614      	mov	r4, r2
 8002b86:	469c      	mov	ip, r3
 8002b88:	f104 0e20 	add.w	lr, r4, #32
 8002b8c:	4665      	mov	r5, ip
 8002b8e:	4626      	mov	r6, r4
 8002b90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b92:	6028      	str	r0, [r5, #0]
 8002b94:	6069      	str	r1, [r5, #4]
 8002b96:	60aa      	str	r2, [r5, #8]
 8002b98:	60eb      	str	r3, [r5, #12]
 8002b9a:	3410      	adds	r4, #16
 8002b9c:	f10c 0c10 	add.w	ip, ip, #16
 8002ba0:	4574      	cmp	r4, lr
 8002ba2:	d1f3      	bne.n	8002b8c <main+0x460>
 8002ba4:	4662      	mov	r2, ip
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	cb03      	ldmia	r3!, {r0, r1}
 8002baa:	6010      	str	r0, [r2, #0]
 8002bac:	6051      	str	r1, [r2, #4]
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	8113      	strh	r3, [r2, #8]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002bb2:	2364      	movs	r3, #100	; 0x64
 8002bb4:	2265      	movs	r2, #101	; 0x65
 8002bb6:	4925      	ldr	r1, [pc, #148]	; (8002c4c <main+0x520>)
 8002bb8:	4827      	ldr	r0, [pc, #156]	; (8002c58 <main+0x52c>)
 8002bba:	f005 fba1 	bl	8008300 <HAL_UART_Transmit>

		while ( setup_error )
 8002bbe:	e03d      	b.n	8002c3c <main+0x510>
		{
			if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc6:	f001 f98b 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d035      	beq.n	8002c3c <main+0x510>
			{
				for (int i = 0; i <= 50000000; i++ )
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	e02e      	b.n	8002c34 <main+0x508>
				{
					if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <main+0x51c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d127      	bne.n	8002c2e <main+0x502>
 8002bde:	2101      	movs	r1, #1
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f001 f97c 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01f      	beq.n	8002c2e <main+0x502>
					{
						sprintf(uartTX, "                                                                                                    ");
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <main+0x520>)
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <main+0x524>)
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2365      	movs	r3, #101	; 0x65
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f006 f969 	bl	8008ed0 <memcpy>
						sprintf(uartTX, "\nSetup is starting..!\n");
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <main+0x520>)
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <main+0x540>)
 8002c02:	4614      	mov	r4, r2
 8002c04:	461d      	mov	r5, r3
 8002c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c08:	6020      	str	r0, [r4, #0]
 8002c0a:	6061      	str	r1, [r4, #4]
 8002c0c:	60a2      	str	r2, [r4, #8]
 8002c0e:	60e3      	str	r3, [r4, #12]
 8002c10:	6828      	ldr	r0, [r5, #0]
 8002c12:	6120      	str	r0, [r4, #16]
 8002c14:	88ab      	ldrh	r3, [r5, #4]
 8002c16:	79aa      	ldrb	r2, [r5, #6]
 8002c18:	82a3      	strh	r3, [r4, #20]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	75a3      	strb	r3, [r4, #22]
						HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002c1e:	2364      	movs	r3, #100	; 0x64
 8002c20:	2265      	movs	r2, #101	; 0x65
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <main+0x520>)
 8002c24:	480c      	ldr	r0, [pc, #48]	; (8002c58 <main+0x52c>)
 8002c26:	f005 fb6b 	bl	8008300 <HAL_UART_Transmit>

						Main_Setup( );
 8002c2a:	f7fe fceb 	bl	8001604 <Main_Setup>
				for (int i = 0; i <= 50000000; i++ )
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <main+0x51c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	ddcc      	ble.n	8002bd6 <main+0x4aa>
		while ( setup_error )
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <main+0x538>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1bd      	bne.n	8002bc0 <main+0x494>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <main+0x518>
 8002c46:	bf00      	nop
 8002c48:	02faf080 	.word	0x02faf080
 8002c4c:	200002a4 	.word	0x200002a4
 8002c50:	080093e0 	.word	0x080093e0
 8002c54:	08009484 	.word	0x08009484
 8002c58:	200001f8 	.word	0x200001f8
 8002c5c:	080094bc 	.word	0x080094bc
 8002c60:	080094d8 	.word	0x080094d8
 8002c64:	2000036a 	.word	0x2000036a
 8002c68:	08009500 	.word	0x08009500
 8002c6c:	0800952c 	.word	0x0800952c

08002c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b09e      	sub	sp, #120	; 0x78
 8002c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c7a:	2228      	movs	r2, #40	; 0x28
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f006 f931 	bl	8008ee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c94:	463b      	mov	r3, r7
 8002c96:	223c      	movs	r2, #60	; 0x3c
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f006 f923 	bl	8008ee6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002caa:	2300      	movs	r3, #0
 8002cac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cbe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002cc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cc4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fc3e 	bl	800554c <HAL_RCC_OscConfig>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002cd6:	f000 fa1b 	bl	8003110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cda:	230f      	movs	r3, #15
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fb30 	bl	800635c <HAL_RCC_ClockConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d02:	f000 fa05 	bl	8003110 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d06:	2321      	movs	r3, #33	; 0x21
 8002d08:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 fd57 	bl	80067c8 <HAL_RCCEx_PeriphCLKConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002d20:	f000 f9f6 	bl	8003110 <Error_Handler>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3778      	adds	r7, #120	; 0x78
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <MX_I2C1_Init+0x78>)
 8002d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <MX_I2C1_Init+0x7c>)
 8002d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d66:	480e      	ldr	r0, [pc, #56]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d68:	f001 f8ea 	bl	8003f40 <HAL_I2C_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d72:	f000 f9cd 	bl	8003110 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d76:	2100      	movs	r1, #0
 8002d78:	4809      	ldr	r0, [pc, #36]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d7a:	f002 fb2f 	bl	80053dc <HAL_I2CEx_ConfigAnalogFilter>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d84:	f000 f9c4 	bl	8003110 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_I2C1_Init+0x74>)
 8002d8c:	f002 fb71 	bl	8005472 <HAL_I2CEx_ConfigDigitalFilter>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d96:	f000 f9bb 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000150 	.word	0x20000150
 8002da4:	40005400 	.word	0x40005400
 8002da8:	0010020a 	.word	0x0010020a

08002dac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dca:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002dd4:	2247      	movs	r2, #71	; 0x47
 8002dd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002de0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002de4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002df2:	4827      	ldr	r0, [pc, #156]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002df4:	f003 ff50 	bl	8006c98 <HAL_TIM_IC_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002dfe:	f000 f987 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	481f      	ldr	r0, [pc, #124]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002e12:	f005 f989 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002e1c:	f000 f978 	bl	8003110 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e24:	2301      	movs	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	2200      	movs	r2, #0
 8002e34:	4619      	mov	r1, r3
 8002e36:	4816      	ldr	r0, [pc, #88]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002e38:	f004 f957 	bl	80070ea <HAL_TIM_IC_ConfigChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002e42:	f000 f965 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4810      	ldr	r0, [pc, #64]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002e4e:	f004 f94c 	bl	80070ea <HAL_TIM_IC_ConfigChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002e58:	f000 f95a 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	2208      	movs	r2, #8
 8002e60:	4619      	mov	r1, r3
 8002e62:	480b      	ldr	r0, [pc, #44]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002e64:	f004 f941 	bl	80070ea <HAL_TIM_IC_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002e6e:	f000 f94f 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	220c      	movs	r2, #12
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_TIM2_Init+0xe4>)
 8002e7a:	f004 f936 	bl	80070ea <HAL_TIM_IC_ConfigChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002e84:	f000 f944 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000100 	.word	0x20000100

08002e94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	; 0x38
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002ec8:	4a3e      	ldr	r2, [pc, #248]	; (8002fc4 <MX_TIM3_Init+0x130>)
 8002eca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002ecc:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002ece:	2248      	movs	r2, #72	; 0x48
 8002ed0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002eda:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002ede:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee0:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eec:	4834      	ldr	r0, [pc, #208]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002eee:	f003 fe1b 	bl	8006b28 <HAL_TIM_Base_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ef8:	f000 f90a 	bl	8003110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f06:	4619      	mov	r1, r3
 8002f08:	482d      	ldr	r0, [pc, #180]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002f0a:	f004 faa3 	bl	8007454 <HAL_TIM_ConfigClockSource>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f14:	f000 f8fc 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f18:	4829      	ldr	r0, [pc, #164]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002f1a:	f003 fe30 	bl	8006b7e <HAL_TIM_PWM_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f24:	f000 f8f4 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	4822      	ldr	r0, [pc, #136]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002f38:	f005 f8f6 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f42:	f000 f8e5 	bl	8003110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f46:	2360      	movs	r3, #96	; 0x60
 8002f48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002f54:	2304      	movs	r3, #4
 8002f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f58:	463b      	mov	r3, r7
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4818      	ldr	r0, [pc, #96]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002f60:	f004 f960 	bl	8007224 <HAL_TIM_PWM_ConfigChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002f6a:	f000 f8d1 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2204      	movs	r2, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4812      	ldr	r0, [pc, #72]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002f76:	f004 f955 	bl	8007224 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002f80:	f000 f8c6 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f84:	463b      	mov	r3, r7
 8002f86:	2208      	movs	r2, #8
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002f8c:	f004 f94a 	bl	8007224 <HAL_TIM_PWM_ConfigChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8002f96:	f000 f8bb 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	220c      	movs	r2, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4807      	ldr	r0, [pc, #28]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002fa2:	f004 f93f 	bl	8007224 <HAL_TIM_PWM_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8002fac:	f000 f8b0 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <MX_TIM3_Init+0x12c>)
 8002fb2:	f000 f9a3 	bl	80032fc <HAL_TIM_MspPostInit>

}
 8002fb6:	bf00      	nop
 8002fb8:	3738      	adds	r7, #56	; 0x38
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200000b8 	.word	0x200000b8
 8002fc4:	40000400 	.word	0x40000400

08002fc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002fce:	4a15      	ldr	r2, [pc, #84]	; (8003024 <MX_USART1_UART_Init+0x5c>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002fd4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <MX_USART1_UART_Init+0x58>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_USART1_UART_Init+0x58>)
 800300c:	f005 f92a 	bl	8008264 <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003016:	f000 f87b 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200001f8 	.word	0x200001f8
 8003024:	40013800 	.word	0x40013800

08003028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4a30      	ldr	r2, [pc, #192]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003048:	6153      	str	r3, [r2, #20]
 800304a:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <MX_GPIO_Init+0xdc>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <MX_GPIO_Init+0xdc>)
 800305c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003060:	6153      	str	r3, [r2, #20]
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	6153      	str	r3, [r2, #20]
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <MX_GPIO_Init+0xdc>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <MX_GPIO_Init+0xdc>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6153      	str	r3, [r2, #20]
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <MX_GPIO_Init+0xdc>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a4:	4818      	ldr	r0, [pc, #96]	; (8003108 <MX_GPIO_Init+0xe0>)
 80030a6:	f000 ff33 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80030aa:	2301      	movs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <MX_GPIO_Init+0xe4>)
 80030b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c0:	f000 fd94 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80030c4:	2304      	movs	r3, #4
 80030c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	480c      	ldr	r0, [pc, #48]	; (8003108 <MX_GPIO_Init+0xe0>)
 80030d8:	f000 fd88 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4804      	ldr	r0, [pc, #16]	; (8003108 <MX_GPIO_Init+0xe0>)
 80030f6:	f000 fd79 	bl	8003bec <HAL_GPIO_Init>

}
 80030fa:	bf00      	nop
 80030fc:	3728      	adds	r7, #40	; 0x28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	48000400 	.word	0x48000400
 800310c:	10120000 	.word	0x10120000

08003110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_MspInit+0x44>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <HAL_MspInit+0x44>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6193      	str	r3, [r2, #24]
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_MspInit+0x44>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_MspInit+0x44>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_MspInit+0x44>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_MspInit+0x44>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000

08003168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <HAL_I2C_MspInit+0xac>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d13f      	bne.n	800320a <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_I2C_MspInit+0xb0>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <HAL_I2C_MspInit+0xb0>)
 8003190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003194:	6153      	str	r3, [r2, #20]
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_I2C_MspInit+0xb0>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031a2:	23c0      	movs	r3, #192	; 0xc0
 80031a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a6:	2312      	movs	r3, #18
 80031a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b2:	2304      	movs	r3, #4
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	4817      	ldr	r0, [pc, #92]	; (800321c <HAL_I2C_MspInit+0xb4>)
 80031be:	f000 fd15 	bl	8003bec <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80031c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031c6:	f002 f9a1 	bl	800550c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80031ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031ce:	f002 f99d 	bl	800550c <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_I2C_MspInit+0xb0>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a10      	ldr	r2, [pc, #64]	; (8003218 <HAL_I2C_MspInit+0xb0>)
 80031d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031dc:	61d3      	str	r3, [r2, #28]
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_I2C_MspInit+0xb0>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	201f      	movs	r0, #31
 80031f0:	f000 fb27 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031f4:	201f      	movs	r0, #31
 80031f6:	f000 fb40 	bl	800387a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2020      	movs	r0, #32
 8003200:	f000 fb1f 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003204:	2020      	movs	r0, #32
 8003206:	f000 fb38 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40005400 	.word	0x40005400
 8003218:	40021000 	.word	0x40021000
 800321c:	48000400 	.word	0x48000400

08003220 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d130      	bne.n	80032a4 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_TIM_IC_MspInit+0x8c>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_TIM_IC_MspInit+0x8c>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_TIM_IC_MspInit+0x8c>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_TIM_IC_MspInit+0x8c>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_TIM_IC_MspInit+0x8c>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	6153      	str	r3, [r2, #20]
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_TIM_IC_MspInit+0x8c>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003272:	232e      	movs	r3, #46	; 0x2e
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003282:	2301      	movs	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003290:	f000 fcac 	bl	8003bec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	2100      	movs	r1, #0
 8003298:	201c      	movs	r0, #28
 800329a:	f000 fad2 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800329e:	201c      	movs	r0, #28
 80032a0:	f000 faeb 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032a4:	bf00      	nop
 80032a6:	3728      	adds	r7, #40	; 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <HAL_TIM_Base_MspInit+0x44>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d113      	bne.n	80032ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_TIM_Base_MspInit+0x48>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <HAL_TIM_Base_MspInit+0x48>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	61d3      	str	r3, [r2, #28]
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_TIM_Base_MspInit+0x48>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	201d      	movs	r0, #29
 80032e0:	f000 faaf 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032e4:	201d      	movs	r0, #29
 80032e6:	f000 fac8 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40021000 	.word	0x40021000

080032fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_TIM_MspPostInit+0x9c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d138      	bne.n	8003390 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b1f      	ldr	r3, [pc, #124]	; (800339c <HAL_TIM_MspPostInit+0xa0>)
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_TIM_MspPostInit+0xa0>)
 8003324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003328:	6153      	str	r3, [r2, #20]
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_TIM_MspPostInit+0xa0>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_TIM_MspPostInit+0xa0>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_TIM_MspPostInit+0xa0>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003340:	6153      	str	r3, [r2, #20]
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_TIM_MspPostInit+0xa0>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800335e:	2302      	movs	r3, #2
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800336c:	f000 fc3e 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003370:	2303      	movs	r3, #3
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003380:	2302      	movs	r3, #2
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	4619      	mov	r1, r3
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <HAL_TIM_MspPostInit+0xa4>)
 800338c:	f000 fc2e 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40000400 	.word	0x40000400
 800339c:	40021000 	.word	0x40021000
 80033a0:	48000400 	.word	0x48000400

080033a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_UART_MspInit+0x90>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d131      	bne.n	800342a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_UART_MspInit+0x94>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_UART_MspInit+0x94>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d0:	6193      	str	r3, [r2, #24]
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_UART_MspInit+0x94>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_UART_MspInit+0x94>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_UART_MspInit+0x94>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e8:	6153      	str	r3, [r2, #20]
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_UART_MspInit+0x94>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003408:	2307      	movs	r3, #7
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003416:	f000 fbe9 	bl	8003bec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	2025      	movs	r0, #37	; 0x25
 8003420:	f000 fa0f 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003424:	2025      	movs	r0, #37	; 0x25
 8003426:	f000 fa28 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800342a:	bf00      	nop
 800342c:	3728      	adds	r7, #40	; 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40013800 	.word	0x40013800
 8003438:	40021000 	.word	0x40021000

0800343c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344e:	e7fe      	b.n	800344e <HardFault_Handler+0x4>

08003450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003454:	e7fe      	b.n	8003454 <MemManage_Handler+0x4>

08003456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800345a:	e7fe      	b.n	800345a <BusFault_Handler+0x4>

0800345c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003460:	e7fe      	b.n	8003460 <UsageFault_Handler+0x4>

08003462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003490:	f000 f8ba 	bl	8003608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <TIM2_IRQHandler+0x10>)
 800349e:	f003 fd05 	bl	8006eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000100 	.word	0x20000100

080034ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM3_IRQHandler+0x10>)
 80034b2:	f003 fcfb 	bl	8006eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200000b8 	.word	0x200000b8

080034c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <I2C1_EV_IRQHandler+0x10>)
 80034c6:	f000 fff9 	bl	80044bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000150 	.word	0x20000150

080034d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <I2C1_ER_IRQHandler+0x10>)
 80034da:	f001 f809 	bl	80044f0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000150 	.word	0x20000150

080034e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <USART1_IRQHandler+0x10>)
 80034ee:	f004 ff9b 	bl	8008428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001f8 	.word	0x200001f8

080034fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <SystemInit+0x28>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <SystemInit+0x28>)
 8003508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800350c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SystemInit+0x28>)
 8003512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003516:	609a      	str	r2, [r3, #8]
#endif
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003560 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800352c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800352e:	e003      	b.n	8003538 <LoopCopyDataInit>

08003530 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003532:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003534:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003536:	3104      	adds	r1, #4

08003538 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <LoopForever+0xa>)
	ldr	r3, =_edata
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <LoopForever+0xe>)
	adds	r2, r0, r1
 800353c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800353e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003540:	d3f6      	bcc.n	8003530 <CopyDataInit>
	ldr	r2, =_sbss
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003544:	e002      	b.n	800354c <LoopFillZerobss>

08003546 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003546:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003548:	f842 3b04 	str.w	r3, [r2], #4

0800354c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <LoopForever+0x16>)
	cmp	r2, r3
 800354e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003550:	d3f9      	bcc.n	8003546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003552:	f7ff ffd3 	bl	80034fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003556:	f005 fc97 	bl	8008e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800355a:	f7ff f8e7 	bl	800272c <main>

0800355e <LoopForever>:

LoopForever:
    b LoopForever
 800355e:	e7fe      	b.n	800355e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003560:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003564:	08009584 	.word	0x08009584
	ldr	r0, =_sdata
 8003568:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800356c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8003570:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003574:	200003c0 	.word	0x200003c0

08003578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003578:	e7fe      	b.n	8003578 <ADC1_2_IRQHandler>
	...

0800357c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_Init+0x28>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_Init+0x28>)
 8003586:	f043 0310 	orr.w	r3, r3, #16
 800358a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800358c:	2003      	movs	r0, #3
 800358e:	f000 f94d 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003592:	2000      	movs	r0, #0
 8003594:	f000 f808 	bl	80035a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003598:	f7ff fdc2 	bl	8003120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000

080035a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_InitTick+0x54>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_InitTick+0x58>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4619      	mov	r1, r3
 80035ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035be:	fbb3 f3f1 	udiv	r3, r3, r1
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f965 	bl	8003896 <HAL_SYSTICK_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00e      	b.n	80035f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b0f      	cmp	r3, #15
 80035da:	d80a      	bhi.n	80035f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035dc:	2200      	movs	r2, #0
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	f000 f92d 	bl	8003842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e8:	4a06      	ldr	r2, [pc, #24]	; (8003604 <HAL_InitTick+0x5c>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e000      	b.n	80035f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000004 	.word	0x20000004
 8003600:	2000000c 	.word	0x2000000c
 8003604:	20000008 	.word	0x20000008

08003608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_IncTick+0x20>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_IncTick+0x24>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4413      	add	r3, r2
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <HAL_IncTick+0x24>)
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	2000000c 	.word	0x2000000c
 800362c:	20000398 	.word	0x20000398

08003630 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return uwTick;  
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_GetTick+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000398 	.word	0x20000398

08003648 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff ffee 	bl	8003630 <HAL_GetTick>
 8003654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d005      	beq.n	800366e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_Delay+0x40>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800366e:	bf00      	nop
 8003670:	f7ff ffde 	bl	8003630 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	429a      	cmp	r2, r3
 800367e:	d8f7      	bhi.n	8003670 <HAL_Delay+0x28>
  {
  }
}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	2000000c 	.word	0x2000000c

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	60d3      	str	r3, [r2, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f7ff ff8e 	bl	800372c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff29 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff3e 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff8e 	bl	8003780 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff5d 	bl	800372c <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff31 	bl	80036f0 <__NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ffa2 	bl	80037e8 <SysTick_Config>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d005      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e027      	b.n	8003920 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 020e 	bic.w	r2, r2, #14
 80038de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
    } 
  }
  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800395e:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <HAL_FLASH_Program+0xd8>)
 8003960:	7e1b      	ldrb	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_FLASH_Program+0x26>
 8003966:	2302      	movs	r3, #2
 8003968:	e054      	b.n	8003a14 <HAL_FLASH_Program+0xd0>
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_FLASH_Program+0xd8>)
 800396c:	2201      	movs	r2, #1
 800396e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003970:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003974:	f000 f8a8 	bl	8003ac8 <FLASH_WaitForLastOperation>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d144      	bne.n	8003a0c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d102      	bne.n	800398e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003988:	2301      	movs	r3, #1
 800398a:	757b      	strb	r3, [r7, #21]
 800398c:	e007      	b.n	800399e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d102      	bne.n	800399a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003994:	2302      	movs	r3, #2
 8003996:	757b      	strb	r3, [r7, #21]
 8003998:	e001      	b.n	800399e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800399a:	2304      	movs	r3, #4
 800399c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800399e:	2300      	movs	r3, #0
 80039a0:	75bb      	strb	r3, [r7, #22]
 80039a2:	e02d      	b.n	8003a00 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80039a4:	7dbb      	ldrb	r3, [r7, #22]
 80039a6:	005a      	lsls	r2, r3, #1
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	eb02 0c03 	add.w	ip, r2, r3
 80039ae:	7dbb      	ldrb	r3, [r7, #22]
 80039b0:	0119      	lsls	r1, r3, #4
 80039b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b6:	f1c1 0620 	rsb	r6, r1, #32
 80039ba:	f1a1 0020 	sub.w	r0, r1, #32
 80039be:	fa22 f401 	lsr.w	r4, r2, r1
 80039c2:	fa03 f606 	lsl.w	r6, r3, r6
 80039c6:	4334      	orrs	r4, r6
 80039c8:	fa23 f000 	lsr.w	r0, r3, r0
 80039cc:	4304      	orrs	r4, r0
 80039ce:	fa23 f501 	lsr.w	r5, r3, r1
 80039d2:	b2a3      	uxth	r3, r4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4660      	mov	r0, ip
 80039d8:	f000 f85a 	bl	8003a90 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039e0:	f000 f872 	bl	8003ac8 <FLASH_WaitForLastOperation>
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_FLASH_Program+0xdc>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <HAL_FLASH_Program+0xdc>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80039fa:	7dbb      	ldrb	r3, [r7, #22]
 80039fc:	3301      	adds	r3, #1
 80039fe:	75bb      	strb	r3, [r7, #22]
 8003a00:	7dba      	ldrb	r2, [r7, #22]
 8003a02:	7d7b      	ldrb	r3, [r7, #21]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3cd      	bcc.n	80039a4 <HAL_FLASH_Program+0x60>
 8003a08:	e000      	b.n	8003a0c <HAL_FLASH_Program+0xc8>
      {
        break;
 8003a0a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_FLASH_Program+0xd8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	761a      	strb	r2, [r3, #24]

  return status;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	200003a0 	.word	0x200003a0
 8003a20:	40022000 	.word	0x40022000

08003a24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_FLASH_Unlock+0x40>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_FLASH_Unlock+0x40>)
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_FLASH_Unlock+0x44>)
 8003a3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_FLASH_Unlock+0x40>)
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_FLASH_Unlock+0x48>)
 8003a44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_FLASH_Unlock+0x40>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003a56:	79fb      	ldrb	r3, [r7, #7]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40022000 	.word	0x40022000
 8003a68:	45670123 	.word	0x45670123
 8003a6c:	cdef89ab 	.word	0xcdef89ab

08003a70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_FLASH_Lock+0x1c>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_FLASH_Lock+0x1c>)
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40022000 	.word	0x40022000

08003a90 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <FLASH_Program_HalfWord+0x30>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <FLASH_Program_HalfWord+0x34>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <FLASH_Program_HalfWord+0x34>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	801a      	strh	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	200003a0 	.word	0x200003a0
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003ad0:	f7ff fdae 	bl	8003630 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ad6:	e010      	b.n	8003afa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d00c      	beq.n	8003afa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <FLASH_WaitForLastOperation+0x2e>
 8003ae6:	f7ff fda3 	bl	8003630 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d201      	bcs.n	8003afa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e01f      	b.n	8003b3a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d0e8      	beq.n	8003ad8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d102      	bne.n	8003b18 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b14:	2220      	movs	r2, #32
 8003b16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d005      	beq.n	8003b30 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <FLASH_WaitForLastOperation+0x7c>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d103      	bne.n	8003b38 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b30:	f000 f80a 	bl	8003b48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40022000 	.word	0x40022000

08003b48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <FLASH_SetErrorCode+0x5c>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d109      	bne.n	8003b72 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <FLASH_SetErrorCode+0x60>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f043 0302 	orr.w	r3, r3, #2
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <FLASH_SetErrorCode+0x60>)
 8003b68:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f043 0310 	orr.w	r3, r3, #16
 8003b70:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <FLASH_SetErrorCode+0x5c>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d109      	bne.n	8003b92 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <FLASH_SetErrorCode+0x60>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <FLASH_SetErrorCode+0x60>)
 8003b88:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b92:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <FLASH_SetErrorCode+0x5c>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60d3      	str	r3, [r2, #12]
}  
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	200003a0 	.word	0x200003a0

08003bac <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <FLASH_PageErase+0x38>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <FLASH_PageErase+0x3c>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <FLASH_PageErase+0x3c>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <FLASH_PageErase+0x3c>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <FLASH_PageErase+0x3c>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <FLASH_PageErase+0x3c>)
 8003bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd6:	6113      	str	r3, [r2, #16]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	200003a0 	.word	0x200003a0
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfa:	e154      	b.n	8003ea6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8146 	beq.w	8003ea0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d00b      	beq.n	8003c34 <HAL_GPIO_Init+0x48>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d007      	beq.n	8003c34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c28:	2b11      	cmp	r3, #17
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b12      	cmp	r3, #18
 8003c32:	d130      	bne.n	8003c96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0201 	and.w	r2, r3, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0xea>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b12      	cmp	r3, #18
 8003cd4:	d123      	bne.n	8003d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	08da      	lsrs	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3208      	adds	r2, #8
 8003cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	6939      	ldr	r1, [r7, #16]
 8003d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a0 	beq.w	8003ea0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d60:	4b58      	ldr	r3, [pc, #352]	; (8003ec4 <HAL_GPIO_Init+0x2d8>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4a57      	ldr	r2, [pc, #348]	; (8003ec4 <HAL_GPIO_Init+0x2d8>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6193      	str	r3, [r2, #24]
 8003d6c:	4b55      	ldr	r3, [pc, #340]	; (8003ec4 <HAL_GPIO_Init+0x2d8>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d78:	4a53      	ldr	r2, [pc, #332]	; (8003ec8 <HAL_GPIO_Init+0x2dc>)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	220f      	movs	r2, #15
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003da2:	d019      	beq.n	8003dd8 <HAL_GPIO_Init+0x1ec>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a49      	ldr	r2, [pc, #292]	; (8003ecc <HAL_GPIO_Init+0x2e0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_GPIO_Init+0x1e8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a48      	ldr	r2, [pc, #288]	; (8003ed0 <HAL_GPIO_Init+0x2e4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00d      	beq.n	8003dd0 <HAL_GPIO_Init+0x1e4>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a47      	ldr	r2, [pc, #284]	; (8003ed4 <HAL_GPIO_Init+0x2e8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <HAL_GPIO_Init+0x1e0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a46      	ldr	r2, [pc, #280]	; (8003ed8 <HAL_GPIO_Init+0x2ec>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_GPIO_Init+0x1dc>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	e008      	b.n	8003dda <HAL_GPIO_Init+0x1ee>
 8003dc8:	2305      	movs	r3, #5
 8003dca:	e006      	b.n	8003dda <HAL_GPIO_Init+0x1ee>
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e004      	b.n	8003dda <HAL_GPIO_Init+0x1ee>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e002      	b.n	8003dda <HAL_GPIO_Init+0x1ee>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_GPIO_Init+0x1ee>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	f002 0203 	and.w	r2, r2, #3
 8003de0:	0092      	lsls	r2, r2, #2
 8003de2:	4093      	lsls	r3, r2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dea:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_GPIO_Init+0x2dc>)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df8:	4b38      	ldr	r3, [pc, #224]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e46:	4a25      	ldr	r2, [pc, #148]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e70:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f aea3 	bne.w	8003bfc <HAL_GPIO_Init+0x10>
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	48000400 	.word	0x48000400
 8003ed0:	48000800 	.word	0x48000800
 8003ed4:	48000c00 	.word	0x48000c00
 8003ed8:	48001000 	.word	0x48001000
 8003edc:	40010400 	.word	0x40010400

08003ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e001      	b.n	8003f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f2c:	e002      	b.n	8003f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e081      	b.n	8004056 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff f8fe 	bl	8003168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	e006      	b.n	8003fc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d104      	bne.n	8003fda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	ea42 0103 	orr.w	r1, r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	f040 80f9 	bne.w	800427a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_I2C_Mem_Write+0x34>
 800408e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0ed      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Mem_Write+0x4e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0e6      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040b6:	f7ff fabb 	bl	8003630 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2319      	movs	r3, #25
 80040c2:	2201      	movs	r2, #1
 80040c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 ffd8 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0d1      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2221      	movs	r2, #33	; 0x21
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004100:	88f8      	ldrh	r0, [r7, #6]
 8004102:	893a      	ldrh	r2, [r7, #8]
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4603      	mov	r3, r0
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb91 	bl	8004838 <I2C_RequestMemoryWrite>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0a9      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2bff      	cmp	r3, #255	; 0xff
 8004130:	d90e      	bls.n	8004150 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	b2da      	uxtb	r2, r3
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f001 f8bb 	bl	80052c4 <I2C_TransferConfig>
 800414e:	e00f      	b.n	8004170 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	b2da      	uxtb	r2, r3
 8004160:	8979      	ldrh	r1, [r7, #10]
 8004162:	2300      	movs	r3, #0
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f001 f8aa 	bl	80052c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 ffc2 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e07b      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d034      	beq.n	8004228 <HAL_I2C_Mem_Write+0x1c8>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d130      	bne.n	8004228 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	2200      	movs	r2, #0
 80041ce:	2180      	movs	r1, #128	; 0x80
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 ff54 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e04d      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2bff      	cmp	r3, #255	; 0xff
 80041e8:	d90e      	bls.n	8004208 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	22ff      	movs	r2, #255	; 0xff
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	8979      	ldrh	r1, [r7, #10]
 80041f8:	2300      	movs	r3, #0
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f001 f85f 	bl	80052c4 <I2C_TransferConfig>
 8004206:	e00f      	b.n	8004228 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	b2da      	uxtb	r2, r3
 8004218:	8979      	ldrh	r1, [r7, #10]
 800421a:	2300      	movs	r3, #0
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f001 f84e 	bl	80052c4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d19e      	bne.n	8004170 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 ffa1 	bl	800517e <I2C_WaitOnSTOPFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e01a      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2220      	movs	r2, #32
 800424c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_I2C_Mem_Write+0x224>)
 800425a:	400b      	ands	r3, r1
 800425c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800427a:	2302      	movs	r3, #2
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	fe00e800 	.word	0xfe00e800

08004288 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4603      	mov	r3, r0
 8004298:	817b      	strh	r3, [r7, #10]
 800429a:	460b      	mov	r3, r1
 800429c:	813b      	strh	r3, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 80fd 	bne.w	80044aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_I2C_Mem_Read+0x34>
 80042b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0f1      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x4e>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e0ea      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042de:	f7ff f9a7 	bl	8003630 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2319      	movs	r3, #25
 80042ea:	2201      	movs	r2, #1
 80042ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fec4 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0d5      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2222      	movs	r2, #34	; 0x22
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004328:	88f8      	ldrh	r0, [r7, #6]
 800432a:	893a      	ldrh	r2, [r7, #8]
 800432c:	8979      	ldrh	r1, [r7, #10]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4603      	mov	r3, r0
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fad1 	bl	80048e0 <I2C_RequestMemoryRead>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0ad      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2bff      	cmp	r3, #255	; 0xff
 8004358:	d90e      	bls.n	8004378 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	b2da      	uxtb	r2, r3
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	4b52      	ldr	r3, [pc, #328]	; (80044b4 <HAL_I2C_Mem_Read+0x22c>)
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 ffa7 	bl	80052c4 <I2C_TransferConfig>
 8004376:	e00f      	b.n	8004398 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	b2da      	uxtb	r2, r3
 8004388:	8979      	ldrh	r1, [r7, #10]
 800438a:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_I2C_Mem_Read+0x22c>)
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 ff96 	bl	80052c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2200      	movs	r2, #0
 80043a0:	2104      	movs	r1, #4
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fe6b 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07c      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d034      	beq.n	8004458 <HAL_I2C_Mem_Read+0x1d0>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d130      	bne.n	8004458 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	2200      	movs	r2, #0
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fe3c 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e04d      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2bff      	cmp	r3, #255	; 0xff
 8004418:	d90e      	bls.n	8004438 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	b2da      	uxtb	r2, r3
 8004426:	8979      	ldrh	r1, [r7, #10]
 8004428:	2300      	movs	r3, #0
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 ff47 	bl	80052c4 <I2C_TransferConfig>
 8004436:	e00f      	b.n	8004458 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	b2da      	uxtb	r2, r3
 8004448:	8979      	ldrh	r1, [r7, #10]
 800444a:	2300      	movs	r3, #0
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 ff36 	bl	80052c4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d19a      	bne.n	8004398 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fe89 	bl	800517e <I2C_WaitOnSTOPFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e01a      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2220      	movs	r2, #32
 800447c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_I2C_Mem_Read+0x230>)
 800448a:	400b      	ands	r3, r1
 800448c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	80002400 	.word	0x80002400
 80044b8:	fe00e800 	.word	0xfe00e800

080044bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
  }
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <HAL_I2C_ER_IRQHandler+0x46>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004534:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	0a9b      	lsrs	r3, r3, #10
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_I2C_ER_IRQHandler+0x74>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	09db      	lsrs	r3, r3, #7
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f043 0208 	orr.w	r2, r3, #8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004562:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	0a5b      	lsrs	r3, r3, #9
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_I2C_ER_IRQHandler+0xa2>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	09db      	lsrs	r3, r3, #7
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f043 0202 	orr.w	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004590:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 030b 	and.w	r3, r3, #11
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fc31 	bl	8004e0c <I2C_ITError>
  }
}
 80045aa:	bf00      	nop
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
 80045e6:	4613      	mov	r3, r2
 80045e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <I2C_Slave_ISR_IT+0x24>
 8004652:	2302      	movs	r3, #2
 8004654:	e0ec      	b.n	8004830 <I2C_Slave_ISR_IT+0x1fe>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <I2C_Slave_ISR_IT+0x4c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fa67 	bl	8004b4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04d      	beq.n	8004726 <I2C_Slave_ISR_IT+0xf4>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d047      	beq.n	8004726 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d128      	bne.n	80046f2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b28      	cmp	r3, #40	; 0x28
 80046aa:	d108      	bne.n	80046be <I2C_Slave_ISR_IT+0x8c>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046b2:	d104      	bne.n	80046be <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046b4:	6939      	ldr	r1, [r7, #16]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fb52 	bl	8004d60 <I2C_ITListenCplt>
 80046bc:	e032      	b.n	8004724 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b29      	cmp	r3, #41	; 0x29
 80046c8:	d10e      	bne.n	80046e8 <I2C_Slave_ISR_IT+0xb6>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d0:	d00a      	beq.n	80046e8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2210      	movs	r2, #16
 80046d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fc8d 	bl	8004ffa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f9d5 	bl	8004a90 <I2C_ITSlaveSeqCplt>
 80046e6:	e01d      	b.n	8004724 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2210      	movs	r2, #16
 80046ee:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80046f0:	e096      	b.n	8004820 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2210      	movs	r2, #16
 80046f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f043 0204 	orr.w	r2, r3, #4
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <I2C_Slave_ISR_IT+0xe4>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004712:	f040 8085 	bne.w	8004820 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	4619      	mov	r1, r3
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fb75 	bl	8004e0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004722:	e07d      	b.n	8004820 <I2C_Slave_ISR_IT+0x1ee>
 8004724:	e07c      	b.n	8004820 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d030      	beq.n	8004794 <I2C_Slave_ISR_IT+0x162>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d02a      	beq.n	8004794 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d018      	beq.n	800477a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d14f      	bne.n	8004824 <I2C_Slave_ISR_IT+0x1f2>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800478a:	d04b      	beq.n	8004824 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f97f 	bl	8004a90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004792:	e047      	b.n	8004824 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	08db      	lsrs	r3, r3, #3
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047ac:	6939      	ldr	r1, [r7, #16]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f8ea 	bl	8004988 <I2C_ITAddrCplt>
 80047b4:	e037      	b.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d031      	beq.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02b      	beq.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d018      	beq.n	800480a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
 8004808:	e00d      	b.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004810:	d002      	beq.n	8004818 <I2C_Slave_ISR_IT+0x1e6>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f939 	bl	8004a90 <I2C_ITSlaveSeqCplt>
 800481e:	e002      	b.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004824:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	817b      	strh	r3, [r7, #10]
 800484a:	460b      	mov	r3, r1
 800484c:	813b      	strh	r3, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <I2C_RequestMemoryWrite+0xa4>)
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fd2f 	bl	80052c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fc47 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e02c      	b.n	80048d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004880:	893b      	ldrh	r3, [r7, #8]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	629a      	str	r2, [r3, #40]	; 0x28
 800488a:	e015      	b.n	80048b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	b29b      	uxth	r3, r3
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fc2d 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e012      	b.n	80048d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ae:	893b      	ldrh	r3, [r7, #8]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2200      	movs	r2, #0
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fbdb 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	80002000 	.word	0x80002000

080048e0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	8979      	ldrh	r1, [r7, #10]
 8004900:	4b20      	ldr	r3, [pc, #128]	; (8004984 <I2C_RequestMemoryRead+0xa4>)
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fcdc 	bl	80052c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	69b9      	ldr	r1, [r7, #24]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fbf4 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e02c      	b.n	800497a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004926:	893b      	ldrh	r3, [r7, #8]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
 8004930:	e015      	b.n	800495e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004932:	893b      	ldrh	r3, [r7, #8]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	b29b      	uxth	r3, r3
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fbda 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e012      	b.n	800497a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004954:	893b      	ldrh	r3, [r7, #8]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2200      	movs	r2, #0
 8004966:	2140      	movs	r1, #64	; 0x40
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fb88 	bl	800507e <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	80002000 	.word	0x80002000

08004988 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800499e:	2b28      	cmp	r3, #40	; 0x28
 80049a0:	d16a      	bne.n	8004a78 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d138      	bne.n	8004a58 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80049e6:	897b      	ldrh	r3, [r7, #10]
 80049e8:	09db      	lsrs	r3, r3, #7
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	89bb      	ldrh	r3, [r7, #12]
 80049ee:	4053      	eors	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f003 0306 	and.w	r3, r3, #6
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11c      	bne.n	8004a34 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d13b      	bne.n	8004a88 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a26:	89ba      	ldrh	r2, [r7, #12]
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fdd4 	bl	80045da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a32:	e029      	b.n	8004a88 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004a34:	893b      	ldrh	r3, [r7, #8]
 8004a36:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fc6f 	bl	8005320 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a4a:	89ba      	ldrh	r2, [r7, #12]
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fdc2 	bl	80045da <HAL_I2C_AddrCallback>
}
 8004a56:	e017      	b.n	8004a88 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fc5f 	bl	8005320 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a6a:	89ba      	ldrh	r2, [r7, #12]
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fdb2 	bl	80045da <HAL_I2C_AddrCallback>
}
 8004a76:	e007      	b.n	8004a88 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	0b9b      	lsrs	r3, r3, #14
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e00d      	b.n	8004ae2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0bdb      	lsrs	r3, r3, #15
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b29      	cmp	r3, #41	; 0x29
 8004aec:	d112      	bne.n	8004b14 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2228      	movs	r2, #40	; 0x28
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2221      	movs	r2, #33	; 0x21
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004afc:	2101      	movs	r1, #1
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fc0e 	bl	8005320 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fd50 	bl	80045b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b12:	e017      	b.n	8004b44 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1e:	d111      	bne.n	8004b44 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2228      	movs	r2, #40	; 0x28
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2222      	movs	r2, #34	; 0x22
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b2e:	2102      	movs	r1, #2
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fbf5 	bl	8005320 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fd41 	bl	80045c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b21      	cmp	r3, #33	; 0x21
 8004b76:	d002      	beq.n	8004b7e <I2C_ITSlaveCplt+0x32>
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b29      	cmp	r3, #41	; 0x29
 8004b7c:	d108      	bne.n	8004b90 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b7e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fbcc 	bl	8005320 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2221      	movs	r2, #33	; 0x21
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b8e:	e00d      	b.n	8004bac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b22      	cmp	r3, #34	; 0x22
 8004b94:	d002      	beq.n	8004b9c <I2C_ITSlaveCplt+0x50>
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9a:	d107      	bne.n	8004bac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b9c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fbbd 	bl	8005320 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2222      	movs	r2, #34	; 0x22
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b64      	ldr	r3, [pc, #400]	; (8004d58 <I2C_ITSlaveCplt+0x20c>)
 8004bc8:	400b      	ands	r3, r1
 8004bca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fa14 	bl	8004ffa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	0b9b      	lsrs	r3, r3, #14
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c04:	e018      	b.n	8004c38 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	0bdb      	lsrs	r3, r3, #15
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d012      	beq.n	8004c38 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0304 	bic.w	r3, r3, #4
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	f043 0204 	orr.w	r2, r3, #4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d010      	beq.n	8004cd4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8a7 	bl	8004e0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b28      	cmp	r3, #40	; 0x28
 8004cc8:	d141      	bne.n	8004d4e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f847 	bl	8004d60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cd2:	e03c      	b.n	8004d4e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cdc:	d014      	beq.n	8004d08 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fed6 	bl	8004a90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <I2C_ITSlaveCplt+0x210>)
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fc78 	bl	80045f6 <HAL_I2C_ListenCpltCallback>
}
 8004d06:	e022      	b.n	8004d4e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b22      	cmp	r3, #34	; 0x22
 8004d12:	d10e      	bne.n	8004d32 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fc4b 	bl	80045c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d30:	e00d      	b.n	8004d4e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fc32 	bl	80045b2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	fe00e800 	.word	0xfe00e800
 8004d5c:	ffff0000 	.word	0xffff0000

08004d60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <I2C_ITListenCplt+0xa8>)
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d022      	beq.n	8004dde <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	f043 0204 	orr.w	r2, r3, #4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dde:	f248 0103 	movw	r1, #32771	; 0x8003
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa9c 	bl	8005320 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2210      	movs	r2, #16
 8004dee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fbfc 	bl	80045f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a5d      	ldr	r2, [pc, #372]	; (8004fa0 <I2C_ITError+0x194>)
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b28      	cmp	r3, #40	; 0x28
 8004e42:	d005      	beq.n	8004e50 <I2C_ITError+0x44>
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b29      	cmp	r3, #41	; 0x29
 8004e48:	d002      	beq.n	8004e50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4e:	d10b      	bne.n	8004e68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e50:	2103      	movs	r1, #3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa64 	bl	8005320 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2228      	movs	r2, #40	; 0x28
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a50      	ldr	r2, [pc, #320]	; (8004fa4 <I2C_ITError+0x198>)
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34
 8004e66:	e011      	b.n	8004e8c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e68:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa57 	bl	8005320 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b60      	cmp	r3, #96	; 0x60
 8004e7c:	d003      	beq.n	8004e86 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d039      	beq.n	8004f0e <I2C_ITError+0x102>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b11      	cmp	r3, #17
 8004e9e:	d002      	beq.n	8004ea6 <I2C_ITError+0x9a>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b21      	cmp	r3, #33	; 0x21
 8004ea4:	d133      	bne.n	8004f0e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb4:	d107      	bne.n	8004ec6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ec4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fd2d 	bl	800392a <HAL_DMA_GetState>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d017      	beq.n	8004f06 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	4a33      	ldr	r2, [pc, #204]	; (8004fa8 <I2C_ITError+0x19c>)
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fcdf 	bl	80038ae <HAL_DMA_Abort_IT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04d      	beq.n	8004f92 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f04:	e045      	b.n	8004f92 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f850 	bl	8004fac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f0c:	e041      	b.n	8004f92 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d039      	beq.n	8004f8a <I2C_ITError+0x17e>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b12      	cmp	r3, #18
 8004f1a:	d002      	beq.n	8004f22 <I2C_ITError+0x116>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b22      	cmp	r3, #34	; 0x22
 8004f20:	d133      	bne.n	8004f8a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	d107      	bne.n	8004f42 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fcef 	bl	800392a <HAL_DMA_GetState>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d017      	beq.n	8004f82 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <I2C_ITError+0x19c>)
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fca1 	bl	80038ae <HAL_DMA_Abort_IT>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f80:	e009      	b.n	8004f96 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f812 	bl	8004fac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f88:	e005      	b.n	8004f96 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f80e 	bl	8004fac <I2C_TreatErrorCallback>
  }
}
 8004f90:	e002      	b.n	8004f98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f96:	bf00      	nop
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	ffff0000 	.word	0xffff0000
 8004fa4:	08004633 	.word	0x08004633
 8004fa8:	08005043 	.word	0x08005043

08004fac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b60      	cmp	r3, #96	; 0x60
 8004fbe:	d10e      	bne.n	8004fde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fb21 	bl	800461e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fdc:	e009      	b.n	8004ff2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fb0c 	bl	800460a <HAL_I2C_ErrorCallback>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d103      	bne.n	8005018 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d007      	beq.n	8005036 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	619a      	str	r2, [r3, #24]
  }
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	2200      	movs	r2, #0
 800505e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	2200      	movs	r2, #0
 800506e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f7ff ff9b 	bl	8004fac <I2C_TreatErrorCallback>
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800508e:	e022      	b.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d01e      	beq.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fe faca 	bl	8003630 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <I2C_WaitOnFlagUntilTimeout+0x30>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d113      	bne.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e00f      	b.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d0cd      	beq.n	8005090 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800510a:	e02c      	b.n	8005166 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f871 	bl	80051f8 <I2C_IsAcknowledgeFailed>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e02a      	b.n	8005176 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d01e      	beq.n	8005166 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005128:	f7fe fa82 	bl	8003630 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d113      	bne.n	8005166 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e007      	b.n	8005176 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d1cb      	bne.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800518a:	e028      	b.n	80051de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f831 	bl	80051f8 <I2C_IsAcknowledgeFailed>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e026      	b.n	80051ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a0:	f7fe fa46 	bl	8003630 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d113      	bne.n	80051de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e007      	b.n	80051ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d1cf      	bne.n	800518c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b10      	cmp	r3, #16
 8005210:	d151      	bne.n	80052b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005212:	e022      	b.n	800525a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d01e      	beq.n	800525a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521c:	f7fe fa08 	bl	8003630 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d302      	bcc.n	8005232 <I2C_IsAcknowledgeFailed+0x3a>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d113      	bne.n	800525a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f043 0220 	orr.w	r2, r3, #32
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02e      	b.n	80052b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b20      	cmp	r3, #32
 8005266:	d1d5      	bne.n	8005214 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2210      	movs	r2, #16
 800526e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2220      	movs	r2, #32
 8005276:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff febe 	bl	8004ffa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800528a:	400b      	ands	r3, r1
 800528c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f043 0204 	orr.w	r2, r3, #4
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	fe00e800 	.word	0xfe00e800

080052c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	4613      	mov	r3, r2
 80052d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	0d5b      	lsrs	r3, r3, #21
 80052e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <I2C_TransferConfig+0x58>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	43db      	mvns	r3, r3
 80052ea:	ea02 0103 	and.w	r1, r2, r3
 80052ee:	897b      	ldrh	r3, [r7, #10]
 80052f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052f4:	7a7b      	ldrb	r3, [r7, #9]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	431a      	orrs	r2, r3
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	03ff63ff 	.word	0x03ff63ff

08005320 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00f      	beq.n	800535a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005340:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800534e:	2b28      	cmp	r3, #40	; 0x28
 8005350:	d003      	beq.n	800535a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005358:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800535a:	887b      	ldrh	r3, [r7, #2]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00f      	beq.n	8005384 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800536a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005378:	2b28      	cmp	r3, #40	; 0x28
 800537a:	d003      	beq.n	8005384 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005382:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005384:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da03      	bge.n	8005394 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005392:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	2b10      	cmp	r3, #16
 8005398:	d103      	bne.n	80053a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80053a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053a2:	887b      	ldrh	r3, [r7, #2]
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d103      	bne.n	80053b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f043 0320 	orr.w	r3, r3, #32
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053b0:	887b      	ldrh	r3, [r7, #2]
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d103      	bne.n	80053be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	43da      	mvns	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	400a      	ands	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d138      	bne.n	8005464 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e032      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	; 0x24
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800542e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b20      	cmp	r3, #32
 8005486:	d139      	bne.n	80054fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005492:	2302      	movs	r3, #2
 8005494:	e033      	b.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2224      	movs	r2, #36	; 0x24
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6193      	str	r3, [r2, #24]
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4905      	ldr	r1, [pc, #20]	; (8005548 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40021000 	.word	0x40021000
 8005548:	40010000 	.word	0x40010000

0800554c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005552:	af00      	add	r7, sp, #0
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f000 bef4 	b.w	800634e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 816a 	beq.w	800584a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005576:	4bb3      	ldr	r3, [pc, #716]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b04      	cmp	r3, #4
 8005580:	d00c      	beq.n	800559c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005582:	4bb0      	ldr	r3, [pc, #704]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b08      	cmp	r3, #8
 800558c:	d159      	bne.n	8005642 <HAL_RCC_OscConfig+0xf6>
 800558e:	4bad      	ldr	r3, [pc, #692]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559a:	d152      	bne.n	8005642 <HAL_RCC_OscConfig+0xf6>
 800559c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	fab3 f383 	clz	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d102      	bne.n	80055ce <HAL_RCC_OscConfig+0x82>
 80055c8:	4b9e      	ldr	r3, [pc, #632]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	e015      	b.n	80055fa <HAL_RCC_OscConfig+0xae>
 80055ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80055e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80055ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80055ee:	fa93 f3a3 	rbit	r3, r3
 80055f2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80055f6:	4b93      	ldr	r3, [pc, #588]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005602:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005606:	fa92 f2a2 	rbit	r2, r2
 800560a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800560e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005612:	fab2 f282 	clz	r2, r2
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	f042 0220 	orr.w	r2, r2, #32
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	f002 021f 	and.w	r2, r2, #31
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 810c 	beq.w	8005848 <HAL_RCC_OscConfig+0x2fc>
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f040 8106 	bne.w	8005848 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f000 be86 	b.w	800634e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564c:	d106      	bne.n	800565c <HAL_RCC_OscConfig+0x110>
 800564e:	4b7d      	ldr	r3, [pc, #500]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a7c      	ldr	r2, [pc, #496]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e030      	b.n	80056be <HAL_RCC_OscConfig+0x172>
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0x134>
 8005666:	4b77      	ldr	r3, [pc, #476]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a76      	ldr	r2, [pc, #472]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 800566c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	4b74      	ldr	r3, [pc, #464]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a73      	ldr	r2, [pc, #460]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e01e      	b.n	80056be <HAL_RCC_OscConfig+0x172>
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800568a:	d10c      	bne.n	80056a6 <HAL_RCC_OscConfig+0x15a>
 800568c:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6c      	ldr	r2, [pc, #432]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a69      	ldr	r2, [pc, #420]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 800569e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e00b      	b.n	80056be <HAL_RCC_OscConfig+0x172>
 80056a6:	4b67      	ldr	r3, [pc, #412]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a66      	ldr	r2, [pc, #408]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80056ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	4b64      	ldr	r3, [pc, #400]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a63      	ldr	r2, [pc, #396]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80056b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056bc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056be:	4b61      	ldr	r3, [pc, #388]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	f023 020f 	bic.w	r2, r3, #15
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	495d      	ldr	r1, [pc, #372]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d2:	1d3b      	adds	r3, r7, #4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d059      	beq.n	8005790 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056dc:	f7fd ffa8 	bl	8003630 <HAL_GetTick>
 80056e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e6:	f7fd ffa3 	bl	8003630 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d902      	bls.n	80056fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	f000 be29 	b.w	800634e <HAL_RCC_OscConfig+0xe02>
 80056fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005700:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005710:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	b2db      	uxtb	r3, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d102      	bne.n	800572e <HAL_RCC_OscConfig+0x1e2>
 8005728:	4b46      	ldr	r3, [pc, #280]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	e015      	b.n	800575a <HAL_RCC_OscConfig+0x20e>
 800572e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005732:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800573a:	fa93 f3a3 	rbit	r3, r3
 800573e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005746:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800574a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005756:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800575e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005762:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005766:	fa92 f2a2 	rbit	r2, r2
 800576a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800576e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005772:	fab2 f282 	clz	r2, r2
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	f042 0220 	orr.w	r2, r2, #32
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	f002 021f 	and.w	r2, r2, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f202 	lsl.w	r2, r1, r2
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ab      	beq.n	80056e6 <HAL_RCC_OscConfig+0x19a>
 800578e:	e05c      	b.n	800584a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fd ff4e 	bl	8003630 <HAL_GetTick>
 8005794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005798:	e00a      	b.n	80057b0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800579a:	f7fd ff49 	bl	8003630 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d902      	bls.n	80057b0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	f000 bdcf 	b.w	800634e <HAL_RCC_OscConfig+0xe02>
 80057b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80057c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c8:	fab3 f383 	clz	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d102      	bne.n	80057e2 <HAL_RCC_OscConfig+0x296>
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	e015      	b.n	800580e <HAL_RCC_OscConfig+0x2c2>
 80057e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80057ee:	fa93 f3a3 	rbit	r3, r3
 80057f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80057f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80057fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <HAL_RCC_OscConfig+0x2f8>)
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005812:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005816:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800581a:	fa92 f2a2 	rbit	r2, r2
 800581e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005822:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005826:	fab2 f282 	clz	r2, r2
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	f042 0220 	orr.w	r2, r2, #32
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	f002 021f 	and.w	r2, r2, #31
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f202 	lsl.w	r2, r1, r2
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ab      	bne.n	800579a <HAL_RCC_OscConfig+0x24e>
 8005842:	e002      	b.n	800584a <HAL_RCC_OscConfig+0x2fe>
 8005844:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 816f 	beq.w	8005b38 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800585a:	4bd0      	ldr	r3, [pc, #832]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005866:	4bcd      	ldr	r3, [pc, #820]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b08      	cmp	r3, #8
 8005870:	d16c      	bne.n	800594c <HAL_RCC_OscConfig+0x400>
 8005872:	4bca      	ldr	r3, [pc, #808]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d166      	bne.n	800594c <HAL_RCC_OscConfig+0x400>
 800587e:	2302      	movs	r3, #2
 8005880:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005888:	fa93 f3a3 	rbit	r3, r3
 800588c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005890:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005894:	fab3 f383 	clz	r3, r3
 8005898:	b2db      	uxtb	r3, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d102      	bne.n	80058ae <HAL_RCC_OscConfig+0x362>
 80058a8:	4bbc      	ldr	r3, [pc, #752]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	e013      	b.n	80058d6 <HAL_RCC_OscConfig+0x38a>
 80058ae:	2302      	movs	r3, #2
 80058b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80058b8:	fa93 f3a3 	rbit	r3, r3
 80058bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80058c0:	2302      	movs	r3, #2
 80058c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80058c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058ca:	fa93 f3a3 	rbit	r3, r3
 80058ce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80058d2:	4bb2      	ldr	r3, [pc, #712]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2202      	movs	r2, #2
 80058d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80058dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80058e0:	fa92 f2a2 	rbit	r2, r2
 80058e4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80058e8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80058ec:	fab2 f282 	clz	r2, r2
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	f042 0220 	orr.w	r2, r2, #32
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	f002 021f 	and.w	r2, r2, #31
 80058fc:	2101      	movs	r1, #1
 80058fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_RCC_OscConfig+0x3cc>
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d002      	beq.n	8005918 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f000 bd1b 	b.w	800634e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005918:	4ba0      	ldr	r3, [pc, #640]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005920:	1d3b      	adds	r3, r7, #4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	21f8      	movs	r1, #248	; 0xf8
 8005928:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005930:	fa91 f1a1 	rbit	r1, r1
 8005934:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005938:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800593c:	fab1 f181 	clz	r1, r1
 8005940:	b2c9      	uxtb	r1, r1
 8005942:	408b      	lsls	r3, r1
 8005944:	4995      	ldr	r1, [pc, #596]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	e0f5      	b.n	8005b38 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800594c:	1d3b      	adds	r3, r7, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8085 	beq.w	8005a62 <HAL_RCC_OscConfig+0x516>
 8005958:	2301      	movs	r3, #1
 800595a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800596a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	461a      	mov	r2, r3
 8005980:	2301      	movs	r3, #1
 8005982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fd fe54 	bl	8003630 <HAL_GetTick>
 8005988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598c:	e00a      	b.n	80059a4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598e:	f7fd fe4f 	bl	8003630 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d902      	bls.n	80059a4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	f000 bcd5 	b.w	800634e <HAL_RCC_OscConfig+0xe02>
 80059a4:	2302      	movs	r3, #2
 80059a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80059b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d102      	bne.n	80059d4 <HAL_RCC_OscConfig+0x488>
 80059ce:	4b73      	ldr	r3, [pc, #460]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	e013      	b.n	80059fc <HAL_RCC_OscConfig+0x4b0>
 80059d4:	2302      	movs	r3, #2
 80059d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80059e6:	2302      	movs	r3, #2
 80059e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80059ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80059f0:	fa93 f3a3 	rbit	r3, r3
 80059f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80059f8:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2202      	movs	r2, #2
 80059fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005a02:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a06:	fa92 f2a2 	rbit	r2, r2
 8005a0a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005a0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005a12:	fab2 f282 	clz	r2, r2
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	f042 0220 	orr.w	r2, r2, #32
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	f002 021f 	and.w	r2, r2, #31
 8005a22:	2101      	movs	r1, #1
 8005a24:	fa01 f202 	lsl.w	r2, r1, r2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0af      	beq.n	800598e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2e:	4b5b      	ldr	r3, [pc, #364]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	21f8      	movs	r1, #248	; 0xf8
 8005a3e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a42:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a46:	fa91 f1a1 	rbit	r1, r1
 8005a4a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005a4e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005a52:	fab1 f181 	clz	r1, r1
 8005a56:	b2c9      	uxtb	r1, r1
 8005a58:	408b      	lsls	r3, r1
 8005a5a:	4950      	ldr	r1, [pc, #320]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	e06a      	b.n	8005b38 <HAL_RCC_OscConfig+0x5ec>
 8005a62:	2301      	movs	r3, #1
 8005a64:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a6c:	fa93 f3a3 	rbit	r3, r3
 8005a70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a78:	fab3 f383 	clz	r3, r3
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fdcf 	bl	8003630 <HAL_GetTick>
 8005a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a98:	f7fd fdca 	bl	8003630 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d902      	bls.n	8005aae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	f000 bc50 	b.w	800634e <HAL_RCC_OscConfig+0xe02>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ab8:	fa93 f3a3 	rbit	r3, r3
 8005abc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac4:	fab3 f383 	clz	r3, r3
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d102      	bne.n	8005ade <HAL_RCC_OscConfig+0x592>
 8005ad8:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	e013      	b.n	8005b06 <HAL_RCC_OscConfig+0x5ba>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ae8:	fa93 f3a3 	rbit	r3, r3
 8005aec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005af0:	2302      	movs	r3, #2
 8005af2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005af6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005afa:	fa93 f3a3 	rbit	r3, r3
 8005afe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <HAL_RCC_OscConfig+0x650>)
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	2202      	movs	r2, #2
 8005b08:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005b0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b10:	fa92 f2a2 	rbit	r2, r2
 8005b14:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005b18:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005b1c:	fab2 f282 	clz	r2, r2
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	f042 0220 	orr.w	r2, r2, #32
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	f002 021f 	and.w	r2, r2, #31
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1af      	bne.n	8005a98 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80da 	beq.w	8005cfc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d069      	beq.n	8005c26 <HAL_RCC_OscConfig+0x6da>
 8005b52:	2301      	movs	r3, #1
 8005b54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b5c:	fa93 f3a3 	rbit	r3, r3
 8005b60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b68:	fab3 f383 	clz	r3, r3
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_OscConfig+0x654>)
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	461a      	mov	r2, r3
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7c:	f7fd fd58 	bl	8003630 <HAL_GetTick>
 8005b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b84:	e00e      	b.n	8005ba4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b86:	f7fd fd53 	bl	8003630 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d906      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e3d9      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	10908120 	.word	0x10908120
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bae:	fa93 f3a3 	rbit	r3, r3
 8005bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bb6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005bba:	2202      	movs	r2, #2
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	fa93 f2a3 	rbit	r2, r3
 8005bc8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	fa93 f2a3 	rbit	r2, r3
 8005be0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005be4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be6:	4ba5      	ldr	r3, [pc, #660]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005bee:	2102      	movs	r1, #2
 8005bf0:	6019      	str	r1, [r3, #0]
 8005bf2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	fa93 f1a3 	rbit	r1, r3
 8005bfc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c00:	6019      	str	r1, [r3, #0]
  return result;
 8005c02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	fab3 f383 	clz	r3, r3
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0b0      	beq.n	8005b86 <HAL_RCC_OscConfig+0x63a>
 8005c24:	e06a      	b.n	8005cfc <HAL_RCC_OscConfig+0x7b0>
 8005c26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	fa93 f2a3 	rbit	r2, r3
 8005c38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005c3c:	601a      	str	r2, [r3, #0]
  return result;
 8005c3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005c42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c44:	fab3 f383 	clz	r3, r3
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4b8c      	ldr	r3, [pc, #560]	; (8005e80 <HAL_RCC_OscConfig+0x934>)
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	461a      	mov	r2, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c58:	f7fd fcea 	bl	8003630 <HAL_GetTick>
 8005c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c60:	e009      	b.n	8005c76 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c62:	f7fd fce5 	bl	8003630 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e36b      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 8005c76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	fa93 f2a3 	rbit	r2, r3
 8005c88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005c92:	2202      	movs	r2, #2
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	fa93 f2a3 	rbit	r2, r3
 8005ca0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005caa:	2202      	movs	r2, #2
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	fa93 f2a3 	rbit	r2, r3
 8005cb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005cbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cbe:	4b6f      	ldr	r3, [pc, #444]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cc2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	6019      	str	r1, [r3, #0]
 8005cca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	fa93 f1a3 	rbit	r1, r3
 8005cd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005cd8:	6019      	str	r1, [r3, #0]
  return result;
 8005cda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	fab3 f383 	clz	r3, r3
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1b2      	bne.n	8005c62 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8158 	beq.w	8005fbc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d12:	4b5a      	ldr	r3, [pc, #360]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d112      	bne.n	8005d44 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	4b57      	ldr	r3, [pc, #348]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	4a56      	ldr	r2, [pc, #344]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d28:	61d3      	str	r3, [r2, #28]
 8005d2a:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	4b4f      	ldr	r3, [pc, #316]	; (8005e84 <HAL_RCC_OscConfig+0x938>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11a      	bne.n	8005d86 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d50:	4b4c      	ldr	r3, [pc, #304]	; (8005e84 <HAL_RCC_OscConfig+0x938>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4b      	ldr	r2, [pc, #300]	; (8005e84 <HAL_RCC_OscConfig+0x938>)
 8005d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d5c:	f7fd fc68 	bl	8003630 <HAL_GetTick>
 8005d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d64:	e009      	b.n	8005d7a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d66:	f7fd fc63 	bl	8003630 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	; 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e2e9      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d7a:	4b42      	ldr	r3, [pc, #264]	; (8005e84 <HAL_RCC_OscConfig+0x938>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0ef      	beq.n	8005d66 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCC_OscConfig+0x852>
 8005d90:	4b3a      	ldr	r3, [pc, #232]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	4a39      	ldr	r2, [pc, #228]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6213      	str	r3, [r2, #32]
 8005d9c:	e02f      	b.n	8005dfe <HAL_RCC_OscConfig+0x8b2>
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10c      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x876>
 8005da8:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	4a33      	ldr	r2, [pc, #204]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	6213      	str	r3, [r2, #32]
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dba:	f023 0304 	bic.w	r3, r3, #4
 8005dbe:	6213      	str	r3, [r2, #32]
 8005dc0:	e01d      	b.n	8005dfe <HAL_RCC_OscConfig+0x8b2>
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d10c      	bne.n	8005de6 <HAL_RCC_OscConfig+0x89a>
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6213      	str	r3, [r2, #32]
 8005dd8:	4b28      	ldr	r3, [pc, #160]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	6213      	str	r3, [r2, #32]
 8005de4:	e00b      	b.n	8005dfe <HAL_RCC_OscConfig+0x8b2>
 8005de6:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6213      	str	r3, [r2, #32]
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d06b      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e08:	f7fd fc12 	bl	8003630 <HAL_GetTick>
 8005e0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e10:	e00b      	b.n	8005e2a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fd fc0d 	bl	8003630 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e291      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 8005e2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005e2e:	2202      	movs	r2, #2
 8005e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	fa93 f2a3 	rbit	r2, r3
 8005e3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005e46:	2202      	movs	r2, #2
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	fa93 f2a3 	rbit	r2, r3
 8005e54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e58:	601a      	str	r2, [r3, #0]
  return result;
 8005e5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e60:	fab3 f383 	clz	r3, r3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d109      	bne.n	8005e88 <HAL_RCC_OscConfig+0x93c>
 8005e74:	4b01      	ldr	r3, [pc, #4]	; (8005e7c <HAL_RCC_OscConfig+0x930>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	e014      	b.n	8005ea4 <HAL_RCC_OscConfig+0x958>
 8005e7a:	bf00      	nop
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	10908120 	.word	0x10908120
 8005e84:	40007000 	.word	0x40007000
 8005e88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	fa93 f2a3 	rbit	r2, r3
 8005e9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	4bbb      	ldr	r3, [pc, #748]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	6011      	str	r1, [r2, #0]
 8005eac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	fa92 f1a2 	rbit	r1, r2
 8005eb6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005eba:	6011      	str	r1, [r2, #0]
  return result;
 8005ebc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	fab2 f282 	clz	r2, r2
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	f002 021f 	and.w	r2, r2, #31
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d099      	beq.n	8005e12 <HAL_RCC_OscConfig+0x8c6>
 8005ede:	e063      	b.n	8005fa8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee0:	f7fd fba6 	bl	8003630 <HAL_GetTick>
 8005ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee8:	e00b      	b.n	8005f02 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eea:	f7fd fba1 	bl	8003630 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e225      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 8005f02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f06:	2202      	movs	r2, #2
 8005f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	fa93 f2a3 	rbit	r2, r3
 8005f14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f1e:	2202      	movs	r2, #2
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	fa93 f2a3 	rbit	r2, r3
 8005f2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005f30:	601a      	str	r2, [r3, #0]
  return result;
 8005f32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005f36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f38:	fab3 f383 	clz	r3, r3
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f043 0302 	orr.w	r3, r3, #2
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCC_OscConfig+0xa06>
 8005f4c:	4b90      	ldr	r3, [pc, #576]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	e00d      	b.n	8005f6e <HAL_RCC_OscConfig+0xa22>
 8005f52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f56:	2202      	movs	r2, #2
 8005f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	fa93 f2a3 	rbit	r2, r3
 8005f64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	4b89      	ldr	r3, [pc, #548]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f72:	2102      	movs	r1, #2
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	fa92 f1a2 	rbit	r1, r2
 8005f80:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005f84:	6011      	str	r1, [r2, #0]
  return result;
 8005f86:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	fab2 f282 	clz	r2, r2
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	f002 021f 	and.w	r2, r2, #31
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1a0      	bne.n	8005eea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fa8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb0:	4b77      	ldr	r3, [pc, #476]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4a76      	ldr	r2, [pc, #472]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 8005fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 81c2 	beq.w	800634c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fc8:	4b71      	ldr	r3, [pc, #452]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 030c 	and.w	r3, r3, #12
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	f000 819c 	beq.w	800630e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	f040 8114 	bne.w	800620a <HAL_RCC_OscConfig+0xcbe>
 8005fe2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fe6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	fa93 f2a3 	rbit	r2, r3
 8005ff6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ffa:	601a      	str	r2, [r3, #0]
  return result;
 8005ffc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006000:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006002:	fab3 f383 	clz	r3, r3
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800600c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006018:	f7fd fb0a 	bl	8003630 <HAL_GetTick>
 800601c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006020:	e009      	b.n	8006036 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006022:	f7fd fb05 	bl	8003630 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e18b      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 8006036:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800603a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	fa93 f2a3 	rbit	r2, r3
 800604a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800604e:	601a      	str	r2, [r3, #0]
  return result;
 8006050:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006054:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006056:	fab3 f383 	clz	r3, r3
 800605a:	b2db      	uxtb	r3, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d102      	bne.n	8006070 <HAL_RCC_OscConfig+0xb24>
 800606a:	4b49      	ldr	r3, [pc, #292]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	e01b      	b.n	80060a8 <HAL_RCC_OscConfig+0xb5c>
 8006070:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	fa93 f2a3 	rbit	r2, r3
 8006084:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800608e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	fa93 f2a3 	rbit	r2, r3
 800609e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	fa92 f1a2 	rbit	r1, r2
 80060bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80060c0:	6011      	str	r1, [r2, #0]
  return result;
 80060c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	fab2 f282 	clz	r2, r2
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	f042 0220 	orr.w	r2, r2, #32
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	f002 021f 	and.w	r2, r2, #31
 80060d8:	2101      	movs	r1, #1
 80060da:	fa01 f202 	lsl.w	r2, r1, r2
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d19e      	bne.n	8006022 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060e4:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	430b      	orrs	r3, r1
 80060fa:	4925      	ldr	r1, [pc, #148]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	604b      	str	r3, [r1, #4]
 8006100:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	fa93 f2a3 	rbit	r2, r3
 8006114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006118:	601a      	str	r2, [r3, #0]
  return result;
 800611a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800611e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006120:	fab3 f383 	clz	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800612a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	461a      	mov	r2, r3
 8006132:	2301      	movs	r3, #1
 8006134:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006136:	f7fd fa7b 	bl	8003630 <HAL_GetTick>
 800613a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800613e:	e009      	b.n	8006154 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006140:	f7fd fa76 	bl	8003630 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e0fc      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 8006154:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800615c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	fa93 f2a3 	rbit	r2, r3
 8006168:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800616c:	601a      	str	r2, [r3, #0]
  return result;
 800616e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006172:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	b2db      	uxtb	r3, r3
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <HAL_RCC_OscConfig+0xc48>
 8006188:	4b01      	ldr	r3, [pc, #4]	; (8006190 <HAL_RCC_OscConfig+0xc44>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	e01e      	b.n	80061cc <HAL_RCC_OscConfig+0xc80>
 800618e:	bf00      	nop
 8006190:	40021000 	.word	0x40021000
 8006194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800619c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fa93 f2a3 	rbit	r2, r3
 80061a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	fa93 f2a3 	rbit	r2, r3
 80061c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	4b63      	ldr	r3, [pc, #396]	; (8006358 <HAL_RCC_OscConfig+0xe0c>)
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80061d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	fa92 f1a2 	rbit	r1, r2
 80061e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80061e4:	6011      	str	r1, [r2, #0]
  return result;
 80061e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	fab2 f282 	clz	r2, r2
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	f042 0220 	orr.w	r2, r2, #32
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	f002 021f 	and.w	r2, r2, #31
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d09b      	beq.n	8006140 <HAL_RCC_OscConfig+0xbf4>
 8006208:	e0a0      	b.n	800634c <HAL_RCC_OscConfig+0xe00>
 800620a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800620e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	fa93 f2a3 	rbit	r2, r3
 800621e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006222:	601a      	str	r2, [r3, #0]
  return result;
 8006224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006228:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	fab3 f383 	clz	r3, r3
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006240:	f7fd f9f6 	bl	8003630 <HAL_GetTick>
 8006244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006248:	e009      	b.n	800625e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624a:	f7fd f9f1 	bl	8003630 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e077      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
 800625e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	fa93 f2a3 	rbit	r2, r3
 8006272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006276:	601a      	str	r2, [r3, #0]
  return result;
 8006278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800627c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	d102      	bne.n	8006298 <HAL_RCC_OscConfig+0xd4c>
 8006292:	4b31      	ldr	r3, [pc, #196]	; (8006358 <HAL_RCC_OscConfig+0xe0c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	e01b      	b.n	80062d0 <HAL_RCC_OscConfig+0xd84>
 8006298:	f107 0320 	add.w	r3, r7, #32
 800629c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a2:	f107 0320 	add.w	r3, r7, #32
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	fa93 f2a3 	rbit	r2, r3
 80062ac:	f107 031c 	add.w	r3, r7, #28
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f107 0318 	add.w	r3, r7, #24
 80062b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	f107 0318 	add.w	r3, r7, #24
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	fa93 f2a3 	rbit	r2, r3
 80062c6:	f107 0314 	add.w	r3, r7, #20
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <HAL_RCC_OscConfig+0xe0c>)
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f107 0210 	add.w	r2, r7, #16
 80062d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80062d8:	6011      	str	r1, [r2, #0]
 80062da:	f107 0210 	add.w	r2, r7, #16
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	fa92 f1a2 	rbit	r1, r2
 80062e4:	f107 020c 	add.w	r2, r7, #12
 80062e8:	6011      	str	r1, [r2, #0]
  return result;
 80062ea:	f107 020c 	add.w	r2, r7, #12
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	fab2 f282 	clz	r2, r2
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	f042 0220 	orr.w	r2, r2, #32
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	f002 021f 	and.w	r2, r2, #31
 8006300:	2101      	movs	r1, #1
 8006302:	fa01 f202 	lsl.w	r2, r1, r2
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d19e      	bne.n	800624a <HAL_RCC_OscConfig+0xcfe>
 800630c:	e01e      	b.n	800634c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e018      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800631c:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <HAL_RCC_OscConfig+0xe0c>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006324:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	429a      	cmp	r2, r3
 8006334:	d108      	bne.n	8006348 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006336:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800633a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006344:	429a      	cmp	r2, r3
 8006346:	d001      	beq.n	800634c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000

0800635c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b09e      	sub	sp, #120	; 0x78
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e162      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006374:	4b90      	ldr	r3, [pc, #576]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d910      	bls.n	80063a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b8d      	ldr	r3, [pc, #564]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 0207 	bic.w	r2, r3, #7
 800638a:	498b      	ldr	r1, [pc, #556]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b89      	ldr	r3, [pc, #548]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e14a      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b0:	4b82      	ldr	r3, [pc, #520]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	497f      	ldr	r1, [pc, #508]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80dc 	beq.w	8006588 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d13c      	bne.n	8006452 <HAL_RCC_ClockConfig+0xf6>
 80063d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e0:	fa93 f3a3 	rbit	r3, r3
 80063e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e8:	fab3 f383 	clz	r3, r3
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d102      	bne.n	8006402 <HAL_RCC_ClockConfig+0xa6>
 80063fc:	4b6f      	ldr	r3, [pc, #444]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	e00f      	b.n	8006422 <HAL_RCC_ClockConfig+0xc6>
 8006402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006406:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	667b      	str	r3, [r7, #100]	; 0x64
 8006410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006414:	663b      	str	r3, [r7, #96]	; 0x60
 8006416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006418:	fa93 f3a3 	rbit	r3, r3
 800641c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800641e:	4b67      	ldr	r3, [pc, #412]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006426:	65ba      	str	r2, [r7, #88]	; 0x58
 8006428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800642a:	fa92 f2a2 	rbit	r2, r2
 800642e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006432:	fab2 f282 	clz	r2, r2
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	f042 0220 	orr.w	r2, r2, #32
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	f002 021f 	and.w	r2, r2, #31
 8006442:	2101      	movs	r1, #1
 8006444:	fa01 f202 	lsl.w	r2, r1, r2
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d17b      	bne.n	8006546 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e0f3      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d13c      	bne.n	80064d4 <HAL_RCC_ClockConfig+0x178>
 800645a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800645e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006462:	fa93 f3a3 	rbit	r3, r3
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646a:	fab3 f383 	clz	r3, r3
 800646e:	b2db      	uxtb	r3, r3
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	d102      	bne.n	8006484 <HAL_RCC_ClockConfig+0x128>
 800647e:	4b4f      	ldr	r3, [pc, #316]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	e00f      	b.n	80064a4 <HAL_RCC_ClockConfig+0x148>
 8006484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006488:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800648c:	fa93 f3a3 	rbit	r3, r3
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
 8006498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649a:	fa93 f3a3 	rbit	r3, r3
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a0:	4b46      	ldr	r3, [pc, #280]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80064aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ac:	fa92 f2a2 	rbit	r2, r2
 80064b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b4:	fab2 f282 	clz	r2, r2
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	f042 0220 	orr.w	r2, r2, #32
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	f002 021f 	and.w	r2, r2, #31
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f202 	lsl.w	r2, r1, r2
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d13a      	bne.n	8006546 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0b2      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
 80064d4:	2302      	movs	r3, #2
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	fa93 f3a3 	rbit	r3, r3
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e2:	fab3 f383 	clz	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d102      	bne.n	80064fc <HAL_RCC_ClockConfig+0x1a0>
 80064f6:	4b31      	ldr	r3, [pc, #196]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	e00d      	b.n	8006518 <HAL_RCC_ClockConfig+0x1bc>
 80064fc:	2302      	movs	r3, #2
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	fa93 f3a3 	rbit	r3, r3
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	2302      	movs	r3, #2
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	fa93 f3a3 	rbit	r3, r3
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	4b29      	ldr	r3, [pc, #164]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2202      	movs	r2, #2
 800651a:	61ba      	str	r2, [r7, #24]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	fa92 f2a2 	rbit	r2, r2
 8006522:	617a      	str	r2, [r7, #20]
  return result;
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	fab2 f282 	clz	r2, r2
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	f042 0220 	orr.w	r2, r2, #32
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	f002 021f 	and.w	r2, r2, #31
 8006536:	2101      	movs	r1, #1
 8006538:	fa01 f202 	lsl.w	r2, r1, r2
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e079      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f023 0203 	bic.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	491a      	ldr	r1, [pc, #104]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 8006554:	4313      	orrs	r3, r2
 8006556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006558:	f7fd f86a 	bl	8003630 <HAL_GetTick>
 800655c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fd f866 	bl	8003630 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e061      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 020c 	and.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	429a      	cmp	r2, r3
 8006586:	d1eb      	bne.n	8006560 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d214      	bcs.n	80065c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 0207 	bic.w	r2, r3, #7
 800659e:	4906      	ldr	r1, [pc, #24]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e040      	b.n	800663a <HAL_RCC_ClockConfig+0x2de>
 80065b8:	40022000 	.word	0x40022000
 80065bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <HAL_RCC_ClockConfig+0x2e8>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	491a      	ldr	r1, [pc, #104]	; (8006644 <HAL_RCC_ClockConfig+0x2e8>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ea:	4b16      	ldr	r3, [pc, #88]	; (8006644 <HAL_RCC_ClockConfig+0x2e8>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4912      	ldr	r1, [pc, #72]	; (8006644 <HAL_RCC_ClockConfig+0x2e8>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065fe:	f000 f829 	bl	8006654 <HAL_RCC_GetSysClockFreq>
 8006602:	4601      	mov	r1, r0
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <HAL_RCC_ClockConfig+0x2e8>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660c:	22f0      	movs	r2, #240	; 0xf0
 800660e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	fa92 f2a2 	rbit	r2, r2
 8006616:	60fa      	str	r2, [r7, #12]
  return result;
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	fab2 f282 	clz	r2, r2
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	40d3      	lsrs	r3, r2
 8006622:	4a09      	ldr	r2, [pc, #36]	; (8006648 <HAL_RCC_ClockConfig+0x2ec>)
 8006624:	5cd3      	ldrb	r3, [r2, r3]
 8006626:	fa21 f303 	lsr.w	r3, r1, r3
 800662a:	4a08      	ldr	r2, [pc, #32]	; (800664c <HAL_RCC_ClockConfig+0x2f0>)
 800662c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <HAL_RCC_ClockConfig+0x2f4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fc ffb8 	bl	80035a8 <HAL_InitTick>
  
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3778      	adds	r7, #120	; 0x78
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	08009544 	.word	0x08009544
 800664c:	20000004 	.word	0x20000004
 8006650:	20000008 	.word	0x20000008

08006654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006654:	b480      	push	{r7}
 8006656:	b08b      	sub	sp, #44	; 0x2c
 8006658:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800666e:	4b29      	ldr	r3, [pc, #164]	; (8006714 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	2b04      	cmp	r3, #4
 800667c:	d002      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0x30>
 800667e:	2b08      	cmp	r3, #8
 8006680:	d003      	beq.n	800668a <HAL_RCC_GetSysClockFreq+0x36>
 8006682:	e03c      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006684:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006686:	623b      	str	r3, [r7, #32]
      break;
 8006688:	e03c      	b.n	8006704 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006690:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006694:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	fa92 f2a2 	rbit	r2, r2
 800669c:	607a      	str	r2, [r7, #4]
  return result;
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	fab2 f282 	clz	r2, r2
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	40d3      	lsrs	r3, r2
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_RCC_GetSysClockFreq+0xc8>)
 80066aa:	5cd3      	ldrb	r3, [r2, r3]
 80066ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	220f      	movs	r2, #15
 80066b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	fa92 f2a2 	rbit	r2, r2
 80066c0:	60fa      	str	r2, [r7, #12]
  return result;
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	fab2 f282 	clz	r2, r2
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	40d3      	lsrs	r3, r2
 80066cc:	4a14      	ldr	r2, [pc, #80]	; (8006720 <HAL_RCC_GetSysClockFreq+0xcc>)
 80066ce:	5cd3      	ldrb	r3, [r2, r3]
 80066d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80066dc:	4a0e      	ldr	r2, [pc, #56]	; (8006718 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
 80066ec:	e004      	b.n	80066f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <HAL_RCC_GetSysClockFreq+0xd0>)
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	623b      	str	r3, [r7, #32]
      break;
 80066fc:	e002      	b.n	8006704 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006700:	623b      	str	r3, [r7, #32]
      break;
 8006702:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006704:	6a3b      	ldr	r3, [r7, #32]
}
 8006706:	4618      	mov	r0, r3
 8006708:	372c      	adds	r7, #44	; 0x2c
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	007a1200 	.word	0x007a1200
 800671c:	0800955c 	.word	0x0800955c
 8006720:	0800956c 	.word	0x0800956c
 8006724:	003d0900 	.word	0x003d0900

08006728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <HAL_RCC_GetHCLKFreq+0x14>)
 800672e:	681b      	ldr	r3, [r3, #0]
}
 8006730:	4618      	mov	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20000004 	.word	0x20000004

08006740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006746:	f7ff ffef 	bl	8006728 <HAL_RCC_GetHCLKFreq>
 800674a:	4601      	mov	r1, r0
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006754:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006758:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	fa92 f2a2 	rbit	r2, r2
 8006760:	603a      	str	r2, [r7, #0]
  return result;
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	fab2 f282 	clz	r2, r2
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	40d3      	lsrs	r3, r2
 800676c:	4a04      	ldr	r2, [pc, #16]	; (8006780 <HAL_RCC_GetPCLK1Freq+0x40>)
 800676e:	5cd3      	ldrb	r3, [r2, r3]
 8006770:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40021000 	.word	0x40021000
 8006780:	08009554 	.word	0x08009554

08006784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800678a:	f7ff ffcd 	bl	8006728 <HAL_RCC_GetHCLKFreq>
 800678e:	4601      	mov	r1, r0
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006798:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800679c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	fa92 f2a2 	rbit	r2, r2
 80067a4:	603a      	str	r2, [r7, #0]
  return result;
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	fab2 f282 	clz	r2, r2
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	40d3      	lsrs	r3, r2
 80067b0:	4a04      	ldr	r2, [pc, #16]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80067b2:	5cd3      	ldrb	r3, [r2, r3]
 80067b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40021000 	.word	0x40021000
 80067c4:	08009554 	.word	0x08009554

080067c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b092      	sub	sp, #72	; 0x48
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80d7 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80067e6:	2300      	movs	r3, #0
 80067e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ec:	4b4e      	ldr	r3, [pc, #312]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10e      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f8:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	4a4a      	ldr	r2, [pc, #296]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006802:	61d3      	str	r3, [r2, #28]
 8006804:	4b48      	ldr	r3, [pc, #288]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006816:	4b45      	ldr	r3, [pc, #276]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d118      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006822:	4b42      	ldr	r3, [pc, #264]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a41      	ldr	r2, [pc, #260]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800682e:	f7fc feff 	bl	8003630 <HAL_GetTick>
 8006832:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006834:	e008      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006836:	f7fc fefb 	bl	8003630 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b64      	cmp	r3, #100	; 0x64
 8006842:	d901      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e169      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006848:	4b38      	ldr	r3, [pc, #224]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006854:	4b34      	ldr	r3, [pc, #208]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8084 	beq.w	800696e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006870:	429a      	cmp	r2, r3
 8006872:	d07c      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006874:	4b2c      	ldr	r3, [pc, #176]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	fa93 f3a3 	rbit	r3, r3
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800688e:	fab3 f383 	clz	r3, r3
 8006892:	b2db      	uxtb	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	4b26      	ldr	r3, [pc, #152]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	461a      	mov	r2, r3
 800689e:	2301      	movs	r3, #1
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	fa93 f3a3 	rbit	r3, r3
 80068ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80068b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068b2:	fab3 f383 	clz	r3, r3
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	461a      	mov	r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068c6:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d6:	f7fc feab 	bl	8003630 <HAL_GetTick>
 80068da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068dc:	e00a      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068de:	f7fc fea7 	bl	8003630 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d901      	bls.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e113      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80068f4:	2302      	movs	r3, #2
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	fa93 f3a3 	rbit	r3, r3
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	2302      	movs	r3, #2
 8006902:	623b      	str	r3, [r7, #32]
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	fa93 f3a3 	rbit	r3, r3
 800690a:	61fb      	str	r3, [r7, #28]
  return result;
 800690c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690e:	fab3 f383 	clz	r3, r3
 8006912:	b2db      	uxtb	r3, r3
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d108      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006922:	4b01      	ldr	r3, [pc, #4]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	e00d      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006928:	40021000 	.word	0x40021000
 800692c:	40007000 	.word	0x40007000
 8006930:	10908100 	.word	0x10908100
 8006934:	2302      	movs	r3, #2
 8006936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	fa93 f3a3 	rbit	r3, r3
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	4b78      	ldr	r3, [pc, #480]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	2202      	movs	r2, #2
 8006946:	613a      	str	r2, [r7, #16]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	fa92 f2a2 	rbit	r2, r2
 800694e:	60fa      	str	r2, [r7, #12]
  return result;
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	fab2 f282 	clz	r2, r2
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	f002 021f 	and.w	r2, r2, #31
 8006962:	2101      	movs	r1, #1
 8006964:	fa01 f202 	lsl.w	r2, r1, r2
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0b7      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800696e:	4b6d      	ldr	r3, [pc, #436]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	496a      	ldr	r1, [pc, #424]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697c:	4313      	orrs	r3, r2
 800697e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006984:	2b01      	cmp	r3, #1
 8006986:	d105      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006988:	4b66      	ldr	r3, [pc, #408]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	4a65      	ldr	r2, [pc, #404]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006992:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069a0:	4b60      	ldr	r3, [pc, #384]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	f023 0203 	bic.w	r2, r3, #3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	495d      	ldr	r1, [pc, #372]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069be:	4b59      	ldr	r3, [pc, #356]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	4956      	ldr	r1, [pc, #344]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069dc:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	494e      	ldr	r1, [pc, #312]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069fa:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f023 0210 	bic.w	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4947      	ldr	r1, [pc, #284]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006a18:	4b42      	ldr	r3, [pc, #264]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	493f      	ldr	r1, [pc, #252]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d008      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a36:	4b3b      	ldr	r3, [pc, #236]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	f023 0220 	bic.w	r2, r3, #32
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4938      	ldr	r1, [pc, #224]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a54:	4b33      	ldr	r3, [pc, #204]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4930      	ldr	r1, [pc, #192]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a72:	4b2c      	ldr	r3, [pc, #176]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	4929      	ldr	r1, [pc, #164]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4921      	ldr	r1, [pc, #132]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006aae:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	491a      	ldr	r1, [pc, #104]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006acc:	4b15      	ldr	r3, [pc, #84]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	4912      	ldr	r1, [pc, #72]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006aea:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	490b      	ldr	r1, [pc, #44]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	4903      	ldr	r1, [pc, #12]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3748      	adds	r7, #72	; 0x48
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40021000 	.word	0x40021000

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e01d      	b.n	8006b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fc fbae 	bl	80032b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 fd9a 	bl	80076a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e01d      	b.n	8006bcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f815 	bl	8006bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f000 fd6f 	bl	80076a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 fa6e 	bl	80080dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <HAL_TIM_PWM_Start+0x98>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x4a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <HAL_TIM_PWM_Start+0x9c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00e      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x4a>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1b      	ldr	r2, [pc, #108]	; (8006c88 <HAL_TIM_PWM_Start+0xa0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d009      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x4a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <HAL_TIM_PWM_Start+0xa4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d004      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x4a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <HAL_TIM_PWM_Start+0xa8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_PWM_Start+0x4e>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_TIM_PWM_Start+0x50>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <HAL_TIM_PWM_Start+0xac>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d00b      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x8e>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d007      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40013400 	.word	0x40013400
 8006c88:	40014000 	.word	0x40014000
 8006c8c:	40014400 	.word	0x40014400
 8006c90:	40014800 	.word	0x40014800
 8006c94:	00010007 	.word	0x00010007

08006c98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e01d      	b.n	8006ce6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fc faae 	bl	8003220 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f000 fce2 	bl	80076a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b0c      	cmp	r3, #12
 8006cfe:	d841      	bhi.n	8006d84 <HAL_TIM_IC_Start_IT+0x94>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <HAL_TIM_IC_Start_IT+0x18>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d3d 	.word	0x08006d3d
 8006d0c:	08006d85 	.word	0x08006d85
 8006d10:	08006d85 	.word	0x08006d85
 8006d14:	08006d85 	.word	0x08006d85
 8006d18:	08006d4f 	.word	0x08006d4f
 8006d1c:	08006d85 	.word	0x08006d85
 8006d20:	08006d85 	.word	0x08006d85
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	08006d61 	.word	0x08006d61
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d73 	.word	0x08006d73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0202 	orr.w	r2, r2, #2
 8006d4a:	60da      	str	r2, [r3, #12]
      break;
 8006d4c:	e01b      	b.n	8006d86 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0204 	orr.w	r2, r2, #4
 8006d5c:	60da      	str	r2, [r3, #12]
      break;
 8006d5e:	e012      	b.n	8006d86 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0208 	orr.w	r2, r2, #8
 8006d6e:	60da      	str	r2, [r3, #12]
      break;
 8006d70:	e009      	b.n	8006d86 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0210 	orr.w	r2, r2, #16
 8006d80:	60da      	str	r2, [r3, #12]
      break;
 8006d82:	e000      	b.n	8006d86 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006d84:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 f9a4 	bl	80080dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_TIM_IC_Start_IT+0xd8>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d00b      	beq.n	8006dbe <HAL_TIM_IC_Start_IT+0xce>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d007      	beq.n	8006dbe <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	00010007 	.word	0x00010007

08006dcc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d841      	bhi.n	8006e60 <HAL_TIM_IC_Stop_IT+0x94>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <HAL_TIM_IC_Stop_IT+0x18>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006e19 	.word	0x08006e19
 8006de8:	08006e61 	.word	0x08006e61
 8006dec:	08006e61 	.word	0x08006e61
 8006df0:	08006e61 	.word	0x08006e61
 8006df4:	08006e2b 	.word	0x08006e2b
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006e61 	.word	0x08006e61
 8006e00:	08006e61 	.word	0x08006e61
 8006e04:	08006e3d 	.word	0x08006e3d
 8006e08:	08006e61 	.word	0x08006e61
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006e61 	.word	0x08006e61
 8006e14:	08006e4f 	.word	0x08006e4f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0202 	bic.w	r2, r2, #2
 8006e26:	60da      	str	r2, [r3, #12]
      break;
 8006e28:	e01b      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0204 	bic.w	r2, r2, #4
 8006e38:	60da      	str	r2, [r3, #12]
      break;
 8006e3a:	e012      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0208 	bic.w	r2, r2, #8
 8006e4a:	60da      	str	r2, [r3, #12]
      break;
 8006e4c:	e009      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0210 	bic.w	r2, r2, #16
 8006e5c:	60da      	str	r2, [r3, #12]
      break;
 8006e5e:	e000      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8006e60:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 f936 	bl	80080dc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a1a      	ldr	r2, [r3, #32]
 8006e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10f      	bne.n	8006ea0 <HAL_TIM_IC_Stop_IT+0xd4>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a1a      	ldr	r2, [r3, #32]
 8006e86:	f240 4344 	movw	r3, #1092	; 0x444
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_IC_Stop_IT+0xd4>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0202 	mvn.w	r2, #2
 8006ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fa f994 	bl	800121c <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbb4 	bl	8007664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fbbb 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0204 	mvn.w	r2, #4
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fa f96a 	bl	800121c <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fb8a 	bl	8007664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb91 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0208 	mvn.w	r2, #8
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2204      	movs	r2, #4
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa f940 	bl	800121c <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fb60 	bl	8007664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fb67 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0210 	mvn.w	r2, #16
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fa f916 	bl	800121c <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb36 	bl	8007664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb3d 	bl	8007678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b01      	cmp	r3, #1
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0201 	mvn.w	r2, #1
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb10 	bl	8007650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b80      	cmp	r3, #128	; 0x80
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007048:	2b80      	cmp	r3, #128	; 0x80
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f8f0 	bl	800823c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706a:	d10e      	bne.n	800708a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d107      	bne.n	800708a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f8e3 	bl	8008250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b40      	cmp	r3, #64	; 0x40
 8007096:	d10e      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d107      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 faeb 	bl	800768c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d10e      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d107      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f06f 0220 	mvn.w	r2, #32
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f8a3 	bl	8008228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007100:	2302      	movs	r3, #2
 8007102:	e08a      	b.n	800721a <HAL_TIM_IC_ConfigChannel+0x130>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d11b      	bne.n	8007152 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f000 fe1f 	bl	8007d6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 020c 	bic.w	r2, r2, #12
 800713c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6999      	ldr	r1, [r3, #24]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	619a      	str	r2, [r3, #24]
 8007150:	e05a      	b.n	8007208 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b04      	cmp	r3, #4
 8007156:	d11c      	bne.n	8007192 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f000 fe97 	bl	8007e9a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800717a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6999      	ldr	r1, [r3, #24]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	021a      	lsls	r2, r3, #8
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	e03a      	b.n	8007208 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d11b      	bne.n	80071d0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f000 fee4 	bl	8007f74 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 020c 	bic.w	r2, r2, #12
 80071ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69d9      	ldr	r1, [r3, #28]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	61da      	str	r2, [r3, #28]
 80071ce:	e01b      	b.n	8007208 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6819      	ldr	r1, [r3, #0]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f000 ff04 	bl	8007fec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69d9      	ldr	r1, [r3, #28]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	021a      	lsls	r2, r3, #8
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800723a:	2302      	movs	r3, #2
 800723c:	e105      	b.n	800744a <HAL_TIM_PWM_ConfigChannel+0x226>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b14      	cmp	r3, #20
 8007252:	f200 80f0 	bhi.w	8007436 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	080072b1 	.word	0x080072b1
 8007260:	08007437 	.word	0x08007437
 8007264:	08007437 	.word	0x08007437
 8007268:	08007437 	.word	0x08007437
 800726c:	080072f1 	.word	0x080072f1
 8007270:	08007437 	.word	0x08007437
 8007274:	08007437 	.word	0x08007437
 8007278:	08007437 	.word	0x08007437
 800727c:	08007333 	.word	0x08007333
 8007280:	08007437 	.word	0x08007437
 8007284:	08007437 	.word	0x08007437
 8007288:	08007437 	.word	0x08007437
 800728c:	08007373 	.word	0x08007373
 8007290:	08007437 	.word	0x08007437
 8007294:	08007437 	.word	0x08007437
 8007298:	08007437 	.word	0x08007437
 800729c:	080073b5 	.word	0x080073b5
 80072a0:	08007437 	.word	0x08007437
 80072a4:	08007437 	.word	0x08007437
 80072a8:	08007437 	.word	0x08007437
 80072ac:	080073f5 	.word	0x080073f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fa82 	bl	80077c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6999      	ldr	r1, [r3, #24]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	619a      	str	r2, [r3, #24]
      break;
 80072ee:	e0a3      	b.n	8007438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 faf2 	bl	80078e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6999      	ldr	r1, [r3, #24]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	021a      	lsls	r2, r3, #8
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	619a      	str	r2, [r3, #24]
      break;
 8007330:	e082      	b.n	8007438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb5b 	bl	80079f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0208 	orr.w	r2, r2, #8
 800734c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0204 	bic.w	r2, r2, #4
 800735c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69d9      	ldr	r1, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	61da      	str	r2, [r3, #28]
      break;
 8007370:	e062      	b.n	8007438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fbc3 	bl	8007b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69d9      	ldr	r1, [r3, #28]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	021a      	lsls	r2, r3, #8
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	61da      	str	r2, [r3, #28]
      break;
 80073b2:	e041      	b.n	8007438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fc0c 	bl	8007bd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0208 	orr.w	r2, r2, #8
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0204 	bic.w	r2, r2, #4
 80073de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073f2:	e021      	b.n	8007438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fc50 	bl	8007ca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007434:	e000      	b.n	8007438 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007436:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop

08007454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIM_ConfigClockSource+0x18>
 8007468:	2302      	movs	r3, #2
 800746a:	e0a8      	b.n	80075be <HAL_TIM_ConfigClockSource+0x16a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800748e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d067      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x124>
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d80b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x70>
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d073      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x144>
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d802      	bhi.n	80074ba <HAL_TIM_ConfigClockSource+0x66>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d06f      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80074b8:	e078      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d06c      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x144>
 80074be:	2b30      	cmp	r3, #48	; 0x30
 80074c0:	d06a      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80074c2:	e073      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074c4:	2b70      	cmp	r3, #112	; 0x70
 80074c6:	d00d      	beq.n	80074e4 <HAL_TIM_ConfigClockSource+0x90>
 80074c8:	2b70      	cmp	r3, #112	; 0x70
 80074ca:	d804      	bhi.n	80074d6 <HAL_TIM_ConfigClockSource+0x82>
 80074cc:	2b50      	cmp	r3, #80	; 0x50
 80074ce:	d033      	beq.n	8007538 <HAL_TIM_ConfigClockSource+0xe4>
 80074d0:	2b60      	cmp	r3, #96	; 0x60
 80074d2:	d041      	beq.n	8007558 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80074d4:	e06a      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d066      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x156>
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d017      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80074e2:	e063      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f000 fdd2 	bl	800809c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007506:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	609a      	str	r2, [r3, #8]
      break;
 8007510:	e04c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6899      	ldr	r1, [r3, #8]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f000 fdbb 	bl	800809c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007534:	609a      	str	r2, [r3, #8]
      break;
 8007536:	e039      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	461a      	mov	r2, r3
 8007546:	f000 fc79 	bl	8007e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2150      	movs	r1, #80	; 0x50
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fd88 	bl	8008066 <TIM_ITRx_SetConfig>
      break;
 8007556:	e029      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	461a      	mov	r2, r3
 8007566:	f000 fcd5 	bl	8007f14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2160      	movs	r1, #96	; 0x60
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fd78 	bl	8008066 <TIM_ITRx_SetConfig>
      break;
 8007576:	e019      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	461a      	mov	r2, r3
 8007586:	f000 fc59 	bl	8007e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2140      	movs	r1, #64	; 0x40
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fd68 	bl	8008066 <TIM_ITRx_SetConfig>
      break;
 8007596:	e009      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f000 fd5f 	bl	8008066 <TIM_ITRx_SetConfig>
      break;
 80075a8:	e000      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x158>
      break;
 80075aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b0c      	cmp	r3, #12
 80075da:	d831      	bhi.n	8007640 <HAL_TIM_ReadCapturedValue+0x78>
 80075dc:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	08007619 	.word	0x08007619
 80075e8:	08007641 	.word	0x08007641
 80075ec:	08007641 	.word	0x08007641
 80075f0:	08007641 	.word	0x08007641
 80075f4:	08007623 	.word	0x08007623
 80075f8:	08007641 	.word	0x08007641
 80075fc:	08007641 	.word	0x08007641
 8007600:	08007641 	.word	0x08007641
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007641 	.word	0x08007641
 800760c:	08007641 	.word	0x08007641
 8007610:	08007641 	.word	0x08007641
 8007614:	08007637 	.word	0x08007637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	60fb      	str	r3, [r7, #12]

      break;
 8007620:	e00f      	b.n	8007642 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	60fb      	str	r3, [r7, #12]

      break;
 800762a:	e00a      	b.n	8007642 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	60fb      	str	r3, [r7, #12]

      break;
 8007634:	e005      	b.n	8007642 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	60fb      	str	r3, [r7, #12]

      break;
 800763e:	e000      	b.n	8007642 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007640:	bf00      	nop
  }

  return tmpreg;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3c      	ldr	r2, [pc, #240]	; (80077a4 <TIM_Base_SetConfig+0x104>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00f      	beq.n	80076d8 <TIM_Base_SetConfig+0x38>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076be:	d00b      	beq.n	80076d8 <TIM_Base_SetConfig+0x38>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a39      	ldr	r2, [pc, #228]	; (80077a8 <TIM_Base_SetConfig+0x108>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_Base_SetConfig+0x38>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a38      	ldr	r2, [pc, #224]	; (80077ac <TIM_Base_SetConfig+0x10c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_Base_SetConfig+0x38>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a37      	ldr	r2, [pc, #220]	; (80077b0 <TIM_Base_SetConfig+0x110>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d108      	bne.n	80076ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2d      	ldr	r2, [pc, #180]	; (80077a4 <TIM_Base_SetConfig+0x104>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01b      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f8:	d017      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a2a      	ldr	r2, [pc, #168]	; (80077a8 <TIM_Base_SetConfig+0x108>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a29      	ldr	r2, [pc, #164]	; (80077ac <TIM_Base_SetConfig+0x10c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00f      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a28      	ldr	r2, [pc, #160]	; (80077b0 <TIM_Base_SetConfig+0x110>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00b      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <TIM_Base_SetConfig+0x114>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d007      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a26      	ldr	r2, [pc, #152]	; (80077b8 <TIM_Base_SetConfig+0x118>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_Base_SetConfig+0x8a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a25      	ldr	r2, [pc, #148]	; (80077bc <TIM_Base_SetConfig+0x11c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d108      	bne.n	800773c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a10      	ldr	r2, [pc, #64]	; (80077a4 <TIM_Base_SetConfig+0x104>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_Base_SetConfig+0xe8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a11      	ldr	r2, [pc, #68]	; (80077b0 <TIM_Base_SetConfig+0x110>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00b      	beq.n	8007788 <TIM_Base_SetConfig+0xe8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a10      	ldr	r2, [pc, #64]	; (80077b4 <TIM_Base_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_Base_SetConfig+0xe8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a0f      	ldr	r2, [pc, #60]	; (80077b8 <TIM_Base_SetConfig+0x118>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_Base_SetConfig+0xe8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a0e      	ldr	r2, [pc, #56]	; (80077bc <TIM_Base_SetConfig+0x11c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d103      	bne.n	8007790 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	615a      	str	r2, [r3, #20]
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40000400 	.word	0x40000400
 80077ac:	40000800 	.word	0x40000800
 80077b0:	40013400 	.word	0x40013400
 80077b4:	40014000 	.word	0x40014000
 80077b8:	40014400 	.word	0x40014400
 80077bc:	40014800 	.word	0x40014800

080077c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f023 0201 	bic.w	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 0302 	bic.w	r3, r3, #2
 800780c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a2c      	ldr	r2, [pc, #176]	; (80078cc <TIM_OC1_SetConfig+0x10c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00f      	beq.n	8007840 <TIM_OC1_SetConfig+0x80>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a2b      	ldr	r2, [pc, #172]	; (80078d0 <TIM_OC1_SetConfig+0x110>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00b      	beq.n	8007840 <TIM_OC1_SetConfig+0x80>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <TIM_OC1_SetConfig+0x114>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d007      	beq.n	8007840 <TIM_OC1_SetConfig+0x80>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a29      	ldr	r2, [pc, #164]	; (80078d8 <TIM_OC1_SetConfig+0x118>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_OC1_SetConfig+0x80>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a28      	ldr	r2, [pc, #160]	; (80078dc <TIM_OC1_SetConfig+0x11c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10c      	bne.n	800785a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0308 	bic.w	r3, r3, #8
 8007846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 0304 	bic.w	r3, r3, #4
 8007858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <TIM_OC1_SetConfig+0x10c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <TIM_OC1_SetConfig+0xc2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a1a      	ldr	r2, [pc, #104]	; (80078d0 <TIM_OC1_SetConfig+0x110>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00b      	beq.n	8007882 <TIM_OC1_SetConfig+0xc2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a19      	ldr	r2, [pc, #100]	; (80078d4 <TIM_OC1_SetConfig+0x114>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d007      	beq.n	8007882 <TIM_OC1_SetConfig+0xc2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a18      	ldr	r2, [pc, #96]	; (80078d8 <TIM_OC1_SetConfig+0x118>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_OC1_SetConfig+0xc2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a17      	ldr	r2, [pc, #92]	; (80078dc <TIM_OC1_SetConfig+0x11c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d111      	bne.n	80078a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	621a      	str	r2, [r3, #32]
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40013400 	.word	0x40013400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800

080078e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f023 0210 	bic.w	r2, r3, #16
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800790e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f023 0320 	bic.w	r3, r3, #32
 800792e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <TIM_OC2_SetConfig+0x100>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC2_SetConfig+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <TIM_OC2_SetConfig+0x104>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10d      	bne.n	8007968 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007966:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <TIM_OC2_SetConfig+0x100>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00f      	beq.n	8007990 <TIM_OC2_SetConfig+0xb0>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <TIM_OC2_SetConfig+0x104>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00b      	beq.n	8007990 <TIM_OC2_SetConfig+0xb0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <TIM_OC2_SetConfig+0x108>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d007      	beq.n	8007990 <TIM_OC2_SetConfig+0xb0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <TIM_OC2_SetConfig+0x10c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC2_SetConfig+0xb0>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <TIM_OC2_SetConfig+0x110>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d113      	bne.n	80079b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007996:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800799e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40013400 	.word	0x40013400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40014400 	.word	0x40014400
 80079f0:	40014800 	.word	0x40014800

080079f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a27      	ldr	r2, [pc, #156]	; (8007af0 <TIM_OC3_SetConfig+0xfc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_OC3_SetConfig+0x6a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <TIM_OC3_SetConfig+0x100>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d10d      	bne.n	8007a7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <TIM_OC3_SetConfig+0xfc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00f      	beq.n	8007aa2 <TIM_OC3_SetConfig+0xae>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a1b      	ldr	r2, [pc, #108]	; (8007af4 <TIM_OC3_SetConfig+0x100>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00b      	beq.n	8007aa2 <TIM_OC3_SetConfig+0xae>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a1a      	ldr	r2, [pc, #104]	; (8007af8 <TIM_OC3_SetConfig+0x104>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d007      	beq.n	8007aa2 <TIM_OC3_SetConfig+0xae>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a19      	ldr	r2, [pc, #100]	; (8007afc <TIM_OC3_SetConfig+0x108>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_OC3_SetConfig+0xae>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a18      	ldr	r2, [pc, #96]	; (8007b00 <TIM_OC3_SetConfig+0x10c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d113      	bne.n	8007aca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40012c00 	.word	0x40012c00
 8007af4:	40013400 	.word	0x40013400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800

08007b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <TIM_OC4_SetConfig+0xc0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00f      	beq.n	8007b88 <TIM_OC4_SetConfig+0x84>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <TIM_OC4_SetConfig+0xc4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00b      	beq.n	8007b88 <TIM_OC4_SetConfig+0x84>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a16      	ldr	r2, [pc, #88]	; (8007bcc <TIM_OC4_SetConfig+0xc8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d007      	beq.n	8007b88 <TIM_OC4_SetConfig+0x84>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a15      	ldr	r2, [pc, #84]	; (8007bd0 <TIM_OC4_SetConfig+0xcc>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_OC4_SetConfig+0x84>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a14      	ldr	r2, [pc, #80]	; (8007bd4 <TIM_OC4_SetConfig+0xd0>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d109      	bne.n	8007b9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	019b      	lsls	r3, r3, #6
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40012c00 	.word	0x40012c00
 8007bc8:	40013400 	.word	0x40013400
 8007bcc:	40014000 	.word	0x40014000
 8007bd0:	40014400 	.word	0x40014400
 8007bd4:	40014800 	.word	0x40014800

08007bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	041b      	lsls	r3, r3, #16
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <TIM_OC5_SetConfig+0xb4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00f      	beq.n	8007c52 <TIM_OC5_SetConfig+0x7a>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <TIM_OC5_SetConfig+0xb8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00b      	beq.n	8007c52 <TIM_OC5_SetConfig+0x7a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a15      	ldr	r2, [pc, #84]	; (8007c94 <TIM_OC5_SetConfig+0xbc>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <TIM_OC5_SetConfig+0x7a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a14      	ldr	r2, [pc, #80]	; (8007c98 <TIM_OC5_SetConfig+0xc0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_OC5_SetConfig+0x7a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a13      	ldr	r2, [pc, #76]	; (8007c9c <TIM_OC5_SetConfig+0xc4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d109      	bne.n	8007c66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800

08007ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	051b      	lsls	r3, r3, #20
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a18      	ldr	r2, [pc, #96]	; (8007d58 <TIM_OC6_SetConfig+0xb8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00f      	beq.n	8007d1c <TIM_OC6_SetConfig+0x7c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a17      	ldr	r2, [pc, #92]	; (8007d5c <TIM_OC6_SetConfig+0xbc>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00b      	beq.n	8007d1c <TIM_OC6_SetConfig+0x7c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <TIM_OC6_SetConfig+0xc0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d007      	beq.n	8007d1c <TIM_OC6_SetConfig+0x7c>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <TIM_OC6_SetConfig+0xc4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d003      	beq.n	8007d1c <TIM_OC6_SetConfig+0x7c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <TIM_OC6_SetConfig+0xc8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d109      	bne.n	8007d30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	029b      	lsls	r3, r3, #10
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	40012c00 	.word	0x40012c00
 8007d5c:	40013400 	.word	0x40013400
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a24      	ldr	r2, [pc, #144]	; (8007e28 <TIM_TI1_SetConfig+0xbc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <TIM_TI1_SetConfig+0x56>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da0:	d00f      	beq.n	8007dc2 <TIM_TI1_SetConfig+0x56>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4a21      	ldr	r2, [pc, #132]	; (8007e2c <TIM_TI1_SetConfig+0xc0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_TI1_SetConfig+0x56>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a20      	ldr	r2, [pc, #128]	; (8007e30 <TIM_TI1_SetConfig+0xc4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_TI1_SetConfig+0x56>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <TIM_TI1_SetConfig+0xc8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_TI1_SetConfig+0x56>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a1e      	ldr	r2, [pc, #120]	; (8007e38 <TIM_TI1_SetConfig+0xcc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d101      	bne.n	8007dc6 <TIM_TI1_SetConfig+0x5a>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <TIM_TI1_SetConfig+0x5c>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f023 0303 	bic.w	r3, r3, #3
 8007dd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	e003      	b.n	8007de6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f023 030a 	bic.w	r3, r3, #10
 8007e00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f003 030a 	and.w	r3, r3, #10
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40000400 	.word	0x40000400
 8007e30:	40000800 	.word	0x40000800
 8007e34:	40013400 	.word	0x40013400
 8007e38:	40014000 	.word	0x40014000

08007e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f023 0201 	bic.w	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f023 030a 	bic.w	r3, r3, #10
 8007e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f023 0210 	bic.w	r2, r3, #16
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	621a      	str	r2, [r3, #32]
}
 8007f08:	bf00      	nop
 8007f0a:	371c      	adds	r7, #28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f023 0210 	bic.w	r2, r3, #16
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	031b      	lsls	r3, r3, #12
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	621a      	str	r2, [r3, #32]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f023 0303 	bic.w	r3, r3, #3
 8007fa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	621a      	str	r2, [r3, #32]
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008018:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800802a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	031b      	lsls	r3, r3, #12
 8008030:	b29b      	uxth	r3, r3
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800803e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	031b      	lsls	r3, r3, #12
 8008044:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	621a      	str	r2, [r3, #32]
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008066:	b480      	push	{r7}
 8008068:	b085      	sub	sp, #20
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	f043 0307 	orr.w	r3, r3, #7
 8008088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	609a      	str	r2, [r3, #8]
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	021a      	lsls	r2, r3, #8
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	431a      	orrs	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	609a      	str	r2, [r3, #8]
}
 80080d0:	bf00      	nop
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 031f 	and.w	r3, r3, #31
 80080ee:	2201      	movs	r2, #1
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1a      	ldr	r2, [r3, #32]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	43db      	mvns	r3, r3
 80080fe:	401a      	ands	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a1a      	ldr	r2, [r3, #32]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	fa01 f303 	lsl.w	r3, r1, r3
 8008114:	431a      	orrs	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800813c:	2302      	movs	r3, #2
 800813e:	e063      	b.n	8008208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2b      	ldr	r2, [pc, #172]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a2a      	ldr	r2, [pc, #168]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d108      	bne.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800817a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d018      	beq.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b2:	d013      	beq.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a18      	ldr	r2, [pc, #96]	; (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00e      	beq.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a17      	ldr	r2, [pc, #92]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d009      	beq.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a12      	ldr	r2, [pc, #72]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d004      	beq.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a13      	ldr	r2, [pc, #76]	; (8008224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d10c      	bne.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40012c00 	.word	0x40012c00
 8008218:	40013400 	.word	0x40013400
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800
 8008224:	40014000 	.word	0x40014000

08008228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e040      	b.n	80082f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fb f88c 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2224      	movs	r2, #36	; 0x24
 8008290:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa1a 	bl	80086dc <UART_SetConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e022      	b.n	80082f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fc28 	bl	8008b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fcaf 	bl	8008c54 <UART_CheckIdleState>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08a      	sub	sp, #40	; 0x28
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008314:	2b20      	cmp	r3, #32
 8008316:	f040 8081 	bne.w	800841c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_UART_Transmit+0x26>
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e079      	b.n	800841e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_UART_Transmit+0x38>
 8008334:	2302      	movs	r3, #2
 8008336:	e072      	b.n	800841e <HAL_UART_Transmit+0x11e>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2221      	movs	r2, #33	; 0x21
 800834a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800834c:	f7fb f970 	bl	8003630 <HAL_GetTick>
 8008350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	d108      	bne.n	800837e <HAL_UART_Transmit+0x7e>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	e003      	b.n	8008386 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008386:	e02d      	b.n	80083e4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2200      	movs	r2, #0
 8008390:	2180      	movs	r1, #128	; 0x80
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 fca3 	bl	8008cde <UART_WaitOnFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e03d      	b.n	800841e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10b      	bne.n	80083c0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	881a      	ldrh	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083b4:	b292      	uxth	r2, r2
 80083b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	3302      	adds	r3, #2
 80083bc:	61bb      	str	r3, [r7, #24]
 80083be:	e008      	b.n	80083d2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	b292      	uxth	r2, r2
 80083ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1cb      	bne.n	8008388 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2200      	movs	r2, #0
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fc6f 	bl	8008cde <UART_WaitOnFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e009      	b.n	800841e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2220      	movs	r2, #32
 800840e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	e000      	b.n	800841e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800841c:	2302      	movs	r3, #2
  }
}
 800841e:	4618      	mov	r0, r3
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	f640 030f 	movw	r3, #2063	; 0x80f
 800844e:	4013      	ands	r3, r2
 8008450:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00e      	beq.n	8008480 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b00      	cmp	r3, #0
 800846a:	d009      	beq.n	8008480 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 8114 	beq.w	800869e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
      }
      return;
 800847e:	e10e      	b.n	800869e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80d6 	beq.w	8008634 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 80cb 	beq.w	8008634 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00e      	beq.n	80084c6 <HAL_UART_IRQHandler+0x9e>
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2201      	movs	r2, #1
 80084b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	f043 0201 	orr.w	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <HAL_UART_IRQHandler+0xc6>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2202      	movs	r2, #2
 80084e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e6:	f043 0204 	orr.w	r2, r3, #4
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00e      	beq.n	8008516 <HAL_UART_IRQHandler+0xee>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2204      	movs	r2, #4
 8008508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850e:	f043 0202 	orr.w	r2, r3, #2
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d013      	beq.n	8008548 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d104      	bne.n	8008534 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2208      	movs	r2, #8
 800853a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008540:	f043 0208 	orr.w	r2, r3, #8
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00f      	beq.n	8008572 <HAL_UART_IRQHandler+0x14a>
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856a:	f043 0220 	orr.w	r2, r3, #32
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8093 	beq.w	80086a2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b40      	cmp	r3, #64	; 0x40
 80085b2:	d004      	beq.n	80085be <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d031      	beq.n	8008622 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc08 	bl	8008dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d123      	bne.n	800861a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d013      	beq.n	8008612 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ee:	4a30      	ldr	r2, [pc, #192]	; (80086b0 <HAL_UART_IRQHandler+0x288>)
 80085f0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fb f959 	bl	80038ae <HAL_DMA_Abort_IT>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d016      	beq.n	8008630 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008610:	e00e      	b.n	8008630 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f858 	bl	80086c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	e00a      	b.n	8008630 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f854 	bl	80086c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008620:	e006      	b.n	8008630 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f850 	bl	80086c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800862e:	e038      	b.n	80086a2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	bf00      	nop
    return;
 8008632:	e036      	b.n	80086a2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00d      	beq.n	800865a <HAL_UART_IRQHandler+0x232>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d008      	beq.n	800865a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc0d 	bl	8008e72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008658:	e026      	b.n	80086a8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008672:	2b00      	cmp	r3, #0
 8008674:	d017      	beq.n	80086a6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
    }
    return;
 800867e:	e012      	b.n	80086a6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <HAL_UART_IRQHandler+0x280>
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbd3 	bl	8008e40 <UART_EndTransmit_IT>
    return;
 800869a:	bf00      	nop
 800869c:	e004      	b.n	80086a8 <HAL_UART_IRQHandler+0x280>
      return;
 800869e:	bf00      	nop
 80086a0:	e002      	b.n	80086a8 <HAL_UART_IRQHandler+0x280>
    return;
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <HAL_UART_IRQHandler+0x280>
    return;
 80086a6:	bf00      	nop
  }

}
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	08008e15 	.word	0x08008e15

080086b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	4313      	orrs	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800870e:	f023 030c 	bic.w	r3, r3, #12
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	6939      	ldr	r1, [r7, #16]
 8008718:	430b      	orrs	r3, r1
 800871a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	430a      	orrs	r2, r1
 8008754:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4aa9      	ldr	r2, [pc, #676]	; (8008a00 <UART_SetConfig+0x324>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d121      	bne.n	80087a4 <UART_SetConfig+0xc8>
 8008760:	4ba8      	ldr	r3, [pc, #672]	; (8008a04 <UART_SetConfig+0x328>)
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	2b03      	cmp	r3, #3
 800876a:	d817      	bhi.n	800879c <UART_SetConfig+0xc0>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <UART_SetConfig+0x98>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008785 	.word	0x08008785
 8008778:	08008791 	.word	0x08008791
 800877c:	08008797 	.word	0x08008797
 8008780:	0800878b 	.word	0x0800878b
 8008784:	2301      	movs	r3, #1
 8008786:	77fb      	strb	r3, [r7, #31]
 8008788:	e0b2      	b.n	80088f0 <UART_SetConfig+0x214>
 800878a:	2302      	movs	r3, #2
 800878c:	77fb      	strb	r3, [r7, #31]
 800878e:	e0af      	b.n	80088f0 <UART_SetConfig+0x214>
 8008790:	2304      	movs	r3, #4
 8008792:	77fb      	strb	r3, [r7, #31]
 8008794:	e0ac      	b.n	80088f0 <UART_SetConfig+0x214>
 8008796:	2308      	movs	r3, #8
 8008798:	77fb      	strb	r3, [r7, #31]
 800879a:	e0a9      	b.n	80088f0 <UART_SetConfig+0x214>
 800879c:	2310      	movs	r3, #16
 800879e:	77fb      	strb	r3, [r7, #31]
 80087a0:	bf00      	nop
 80087a2:	e0a5      	b.n	80088f0 <UART_SetConfig+0x214>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a97      	ldr	r2, [pc, #604]	; (8008a08 <UART_SetConfig+0x32c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d123      	bne.n	80087f6 <UART_SetConfig+0x11a>
 80087ae:	4b95      	ldr	r3, [pc, #596]	; (8008a04 <UART_SetConfig+0x328>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ba:	d012      	beq.n	80087e2 <UART_SetConfig+0x106>
 80087bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c0:	d802      	bhi.n	80087c8 <UART_SetConfig+0xec>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d007      	beq.n	80087d6 <UART_SetConfig+0xfa>
 80087c6:	e012      	b.n	80087ee <UART_SetConfig+0x112>
 80087c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087cc:	d00c      	beq.n	80087e8 <UART_SetConfig+0x10c>
 80087ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087d2:	d003      	beq.n	80087dc <UART_SetConfig+0x100>
 80087d4:	e00b      	b.n	80087ee <UART_SetConfig+0x112>
 80087d6:	2300      	movs	r3, #0
 80087d8:	77fb      	strb	r3, [r7, #31]
 80087da:	e089      	b.n	80088f0 <UART_SetConfig+0x214>
 80087dc:	2302      	movs	r3, #2
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e086      	b.n	80088f0 <UART_SetConfig+0x214>
 80087e2:	2304      	movs	r3, #4
 80087e4:	77fb      	strb	r3, [r7, #31]
 80087e6:	e083      	b.n	80088f0 <UART_SetConfig+0x214>
 80087e8:	2308      	movs	r3, #8
 80087ea:	77fb      	strb	r3, [r7, #31]
 80087ec:	e080      	b.n	80088f0 <UART_SetConfig+0x214>
 80087ee:	2310      	movs	r3, #16
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	bf00      	nop
 80087f4:	e07c      	b.n	80088f0 <UART_SetConfig+0x214>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a84      	ldr	r2, [pc, #528]	; (8008a0c <UART_SetConfig+0x330>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d123      	bne.n	8008848 <UART_SetConfig+0x16c>
 8008800:	4b80      	ldr	r3, [pc, #512]	; (8008a04 <UART_SetConfig+0x328>)
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800880c:	d012      	beq.n	8008834 <UART_SetConfig+0x158>
 800880e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008812:	d802      	bhi.n	800881a <UART_SetConfig+0x13e>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <UART_SetConfig+0x14c>
 8008818:	e012      	b.n	8008840 <UART_SetConfig+0x164>
 800881a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800881e:	d00c      	beq.n	800883a <UART_SetConfig+0x15e>
 8008820:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008824:	d003      	beq.n	800882e <UART_SetConfig+0x152>
 8008826:	e00b      	b.n	8008840 <UART_SetConfig+0x164>
 8008828:	2300      	movs	r3, #0
 800882a:	77fb      	strb	r3, [r7, #31]
 800882c:	e060      	b.n	80088f0 <UART_SetConfig+0x214>
 800882e:	2302      	movs	r3, #2
 8008830:	77fb      	strb	r3, [r7, #31]
 8008832:	e05d      	b.n	80088f0 <UART_SetConfig+0x214>
 8008834:	2304      	movs	r3, #4
 8008836:	77fb      	strb	r3, [r7, #31]
 8008838:	e05a      	b.n	80088f0 <UART_SetConfig+0x214>
 800883a:	2308      	movs	r3, #8
 800883c:	77fb      	strb	r3, [r7, #31]
 800883e:	e057      	b.n	80088f0 <UART_SetConfig+0x214>
 8008840:	2310      	movs	r3, #16
 8008842:	77fb      	strb	r3, [r7, #31]
 8008844:	bf00      	nop
 8008846:	e053      	b.n	80088f0 <UART_SetConfig+0x214>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a70      	ldr	r2, [pc, #448]	; (8008a10 <UART_SetConfig+0x334>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d123      	bne.n	800889a <UART_SetConfig+0x1be>
 8008852:	4b6c      	ldr	r3, [pc, #432]	; (8008a04 <UART_SetConfig+0x328>)
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800885a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885e:	d012      	beq.n	8008886 <UART_SetConfig+0x1aa>
 8008860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008864:	d802      	bhi.n	800886c <UART_SetConfig+0x190>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <UART_SetConfig+0x19e>
 800886a:	e012      	b.n	8008892 <UART_SetConfig+0x1b6>
 800886c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008870:	d00c      	beq.n	800888c <UART_SetConfig+0x1b0>
 8008872:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008876:	d003      	beq.n	8008880 <UART_SetConfig+0x1a4>
 8008878:	e00b      	b.n	8008892 <UART_SetConfig+0x1b6>
 800887a:	2300      	movs	r3, #0
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e037      	b.n	80088f0 <UART_SetConfig+0x214>
 8008880:	2302      	movs	r3, #2
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e034      	b.n	80088f0 <UART_SetConfig+0x214>
 8008886:	2304      	movs	r3, #4
 8008888:	77fb      	strb	r3, [r7, #31]
 800888a:	e031      	b.n	80088f0 <UART_SetConfig+0x214>
 800888c:	2308      	movs	r3, #8
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e02e      	b.n	80088f0 <UART_SetConfig+0x214>
 8008892:	2310      	movs	r3, #16
 8008894:	77fb      	strb	r3, [r7, #31]
 8008896:	bf00      	nop
 8008898:	e02a      	b.n	80088f0 <UART_SetConfig+0x214>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a5d      	ldr	r2, [pc, #372]	; (8008a14 <UART_SetConfig+0x338>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d123      	bne.n	80088ec <UART_SetConfig+0x210>
 80088a4:	4b57      	ldr	r3, [pc, #348]	; (8008a04 <UART_SetConfig+0x328>)
 80088a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80088ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088b0:	d012      	beq.n	80088d8 <UART_SetConfig+0x1fc>
 80088b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088b6:	d802      	bhi.n	80088be <UART_SetConfig+0x1e2>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <UART_SetConfig+0x1f0>
 80088bc:	e012      	b.n	80088e4 <UART_SetConfig+0x208>
 80088be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088c2:	d00c      	beq.n	80088de <UART_SetConfig+0x202>
 80088c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088c8:	d003      	beq.n	80088d2 <UART_SetConfig+0x1f6>
 80088ca:	e00b      	b.n	80088e4 <UART_SetConfig+0x208>
 80088cc:	2300      	movs	r3, #0
 80088ce:	77fb      	strb	r3, [r7, #31]
 80088d0:	e00e      	b.n	80088f0 <UART_SetConfig+0x214>
 80088d2:	2302      	movs	r3, #2
 80088d4:	77fb      	strb	r3, [r7, #31]
 80088d6:	e00b      	b.n	80088f0 <UART_SetConfig+0x214>
 80088d8:	2304      	movs	r3, #4
 80088da:	77fb      	strb	r3, [r7, #31]
 80088dc:	e008      	b.n	80088f0 <UART_SetConfig+0x214>
 80088de:	2308      	movs	r3, #8
 80088e0:	77fb      	strb	r3, [r7, #31]
 80088e2:	e005      	b.n	80088f0 <UART_SetConfig+0x214>
 80088e4:	2310      	movs	r3, #16
 80088e6:	77fb      	strb	r3, [r7, #31]
 80088e8:	bf00      	nop
 80088ea:	e001      	b.n	80088f0 <UART_SetConfig+0x214>
 80088ec:	2310      	movs	r3, #16
 80088ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f8:	f040 808e 	bne.w	8008a18 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80088fc:	7ffb      	ldrb	r3, [r7, #31]
 80088fe:	2b08      	cmp	r3, #8
 8008900:	d85e      	bhi.n	80089c0 <UART_SetConfig+0x2e4>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x22c>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	0800892d 	.word	0x0800892d
 800890c:	0800894d 	.word	0x0800894d
 8008910:	0800896d 	.word	0x0800896d
 8008914:	080089c1 	.word	0x080089c1
 8008918:	08008989 	.word	0x08008989
 800891c:	080089c1 	.word	0x080089c1
 8008920:	080089c1 	.word	0x080089c1
 8008924:	080089c1 	.word	0x080089c1
 8008928:	080089a9 	.word	0x080089a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800892c:	f7fd ff08 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 8008930:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	005a      	lsls	r2, r3, #1
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	441a      	add	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	fbb2 f3f3 	udiv	r3, r2, r3
 8008946:	b29b      	uxth	r3, r3
 8008948:	61bb      	str	r3, [r7, #24]
        break;
 800894a:	e03c      	b.n	80089c6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800894c:	f7fd ff1a 	bl	8006784 <HAL_RCC_GetPCLK2Freq>
 8008950:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	005a      	lsls	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	441a      	add	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	b29b      	uxth	r3, r3
 8008968:	61bb      	str	r3, [r7, #24]
        break;
 800896a:	e02c      	b.n	80089c6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008976:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6852      	ldr	r2, [r2, #4]
 800897e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008982:	b29b      	uxth	r3, r3
 8008984:	61bb      	str	r3, [r7, #24]
        break;
 8008986:	e01e      	b.n	80089c6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008988:	f7fd fe64 	bl	8006654 <HAL_RCC_GetSysClockFreq>
 800898c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	005a      	lsls	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	441a      	add	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	61bb      	str	r3, [r7, #24]
        break;
 80089a6:	e00e      	b.n	80089c6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	61bb      	str	r3, [r7, #24]
        break;
 80089be:	e002      	b.n	80089c6 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
        break;
 80089c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b0f      	cmp	r3, #15
 80089ca:	d916      	bls.n	80089fa <UART_SetConfig+0x31e>
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d2:	d212      	bcs.n	80089fa <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f023 030f 	bic.w	r3, r3, #15
 80089dc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	897b      	ldrh	r3, [r7, #10]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	897a      	ldrh	r2, [r7, #10]
 80089f6:	60da      	str	r2, [r3, #12]
 80089f8:	e07e      	b.n	8008af8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
 80089fe:	e07b      	b.n	8008af8 <UART_SetConfig+0x41c>
 8008a00:	40013800 	.word	0x40013800
 8008a04:	40021000 	.word	0x40021000
 8008a08:	40004400 	.word	0x40004400
 8008a0c:	40004800 	.word	0x40004800
 8008a10:	40004c00 	.word	0x40004c00
 8008a14:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008a18:	7ffb      	ldrb	r3, [r7, #31]
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d85b      	bhi.n	8008ad6 <UART_SetConfig+0x3fa>
 8008a1e:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <UART_SetConfig+0x348>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a67 	.word	0x08008a67
 8008a2c:	08008a85 	.word	0x08008a85
 8008a30:	08008ad7 	.word	0x08008ad7
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008ad7 	.word	0x08008ad7
 8008a3c:	08008ad7 	.word	0x08008ad7
 8008a40:	08008ad7 	.word	0x08008ad7
 8008a44:	08008abf 	.word	0x08008abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a48:	f7fd fe7a 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 8008a4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085a      	lsrs	r2, r3, #1
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	441a      	add	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	61bb      	str	r3, [r7, #24]
        break;
 8008a64:	e03a      	b.n	8008adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a66:	f7fd fe8d 	bl	8006784 <HAL_RCC_GetPCLK2Freq>
 8008a6a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	085a      	lsrs	r2, r3, #1
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	441a      	add	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	61bb      	str	r3, [r7, #24]
        break;
 8008a82:	e02b      	b.n	8008adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8008a8e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6852      	ldr	r2, [r2, #4]
 8008a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	61bb      	str	r3, [r7, #24]
        break;
 8008a9e:	e01d      	b.n	8008adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aa0:	f7fd fdd8 	bl	8006654 <HAL_RCC_GetSysClockFreq>
 8008aa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085a      	lsrs	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	441a      	add	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	61bb      	str	r3, [r7, #24]
        break;
 8008abc:	e00e      	b.n	8008adc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	61bb      	str	r3, [r7, #24]
        break;
 8008ad4:	e002      	b.n	8008adc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
        break;
 8008ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	d908      	bls.n	8008af4 <UART_SetConfig+0x418>
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae8:	d204      	bcs.n	8008af4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	e001      	b.n	8008af8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop

08008b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0e:	d10a      	bne.n	8008c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c62:	f7fa fce5 	bl	8003630 <HAL_GetTick>
 8008c66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	d10e      	bne.n	8008c94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f82a 	bl	8008cde <UART_WaitOnFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e020      	b.n	8008cd6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d10e      	bne.n	8008cc0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f814 	bl	8008cde <UART_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e00a      	b.n	8008cd6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cee:	e05d      	b.n	8008dac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d059      	beq.n	8008dac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf8:	f7fa fc9a 	bl	8003630 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d302      	bcc.n	8008d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d11b      	bne.n	8008d46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0201 	bic.w	r2, r2, #1
 8008d2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2220      	movs	r2, #32
 8008d38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e042      	b.n	8008dcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d02b      	beq.n	8008dac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d62:	d123      	bne.n	8008dac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0201 	bic.w	r2, r2, #1
 8008d8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2220      	movs	r2, #32
 8008d92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2220      	movs	r2, #32
 8008d98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e00f      	b.n	8008dcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4013      	ands	r3, r2
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	bf0c      	ite	eq
 8008dbc:	2301      	moveq	r3, #1
 8008dbe:	2300      	movne	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d092      	beq.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0201 	bic.w	r2, r2, #1
 8008dfa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fc48 	bl	80086c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fc25 	bl	80086b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <__libc_init_array>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4e0d      	ldr	r6, [pc, #52]	; (8008ec0 <__libc_init_array+0x38>)
 8008e8c:	4c0d      	ldr	r4, [pc, #52]	; (8008ec4 <__libc_init_array+0x3c>)
 8008e8e:	1ba4      	subs	r4, r4, r6
 8008e90:	10a4      	asrs	r4, r4, #2
 8008e92:	2500      	movs	r5, #0
 8008e94:	42a5      	cmp	r5, r4
 8008e96:	d109      	bne.n	8008eac <__libc_init_array+0x24>
 8008e98:	4e0b      	ldr	r6, [pc, #44]	; (8008ec8 <__libc_init_array+0x40>)
 8008e9a:	4c0c      	ldr	r4, [pc, #48]	; (8008ecc <__libc_init_array+0x44>)
 8008e9c:	f000 f82c 	bl	8008ef8 <_init>
 8008ea0:	1ba4      	subs	r4, r4, r6
 8008ea2:	10a4      	asrs	r4, r4, #2
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	42a5      	cmp	r5, r4
 8008ea8:	d105      	bne.n	8008eb6 <__libc_init_array+0x2e>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eb0:	4798      	blx	r3
 8008eb2:	3501      	adds	r5, #1
 8008eb4:	e7ee      	b.n	8008e94 <__libc_init_array+0xc>
 8008eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eba:	4798      	blx	r3
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	e7f2      	b.n	8008ea6 <__libc_init_array+0x1e>
 8008ec0:	0800957c 	.word	0x0800957c
 8008ec4:	0800957c 	.word	0x0800957c
 8008ec8:	0800957c 	.word	0x0800957c
 8008ecc:	08009580 	.word	0x08009580

08008ed0 <memcpy>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	1e43      	subs	r3, r0, #1
 8008ed4:	440a      	add	r2, r1
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	d100      	bne.n	8008edc <memcpy+0xc>
 8008eda:	bd10      	pop	{r4, pc}
 8008edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee4:	e7f7      	b.n	8008ed6 <memcpy+0x6>

08008ee6 <memset>:
 8008ee6:	4402      	add	r2, r0
 8008ee8:	4603      	mov	r3, r0
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d100      	bne.n	8008ef0 <memset+0xa>
 8008eee:	4770      	bx	lr
 8008ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef4:	e7f9      	b.n	8008eea <memset+0x4>
	...

08008ef8 <_init>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr

08008f04 <_fini>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr
