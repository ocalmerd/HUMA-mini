
Project_HUMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800978c  0800978c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800978c  0800978c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800978c  0800978c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000010  080097a4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080097a4  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d0c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003417  00000000  00000000  00039d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  0003d168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  0003e380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdf2  00000000  00000000  0003f400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ac9  00000000  00000000  0005c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f0ae  00000000  00000000  0006dcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cd69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  0010cde4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080090d8 	.word	0x080090d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080090d8 	.word	0x080090d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ESC_Calibration>:
//
extern uint8_t eeprom_data[32];


void ESC_Calibration ( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	PWM_Output_Start();
 8000a08:	f000 fdc4 	bl	8001594 <PWM_Output_Start>

	while ( true )
	{
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f811 	bl	8000a34 <Convert_Receiver_Channel>
 8000a12:	4602      	mov	r2, r0
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <ESC_Calibration+0x28>)
 8000a16:	601a      	str	r2, [r3, #0]

		esc_3 = receiver_input_channel_3;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <ESC_Calibration+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a1e:	6013      	str	r3, [r2, #0]

		PWM_Output_ESC_Calibration( esc_3 );
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <ESC_Calibration+0x2c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fde9 	bl	80015fc <PWM_Output_ESC_Calibration>
		receiver_input_channel_3 = Convert_Receiver_Channel(3);
 8000a2a:	e7ef      	b.n	8000a0c <ESC_Calibration+0x8>
 8000a2c:	2000009c 	.word	0x2000009c
 8000a30:	200000fc 	.word	0x200000fc

08000a34 <Convert_Receiver_Channel>:
	}
}

int Convert_Receiver_Channel( uint8_t function )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       	//First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           		//What channel corresponds with the specific function
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3317      	adds	r3, #23
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000 )	{	reverse = 1;	}               //Reverse channel when most significant bit is set
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3317      	adds	r3, #23
 8000a50:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da03      	bge.n	8000a62 <Convert_Receiver_Channel+0x2e>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a60:	e002      	b.n	8000a68 <Convert_Receiver_Channel+0x34>
	else	{	reverse = 0;	}                                                       //If the most significant is not set there is no reverse
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            		//Read the actual receiver value for the corresponding function
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	4a3e      	ldr	r2, [pc, #248]	; (8000b64 <Convert_Receiver_Channel+0x130>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	623b      	str	r3, [r7, #32]
	low	   = ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14];  	//Store the low value for the specific receiver input channel
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	330f      	adds	r3, #15
 8000a78:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	7ffa      	ldrb	r2, [r7, #31]
 8000a80:	3207      	adds	r2, #7
 8000a82:	0052      	lsls	r2, r2, #1
 8000a84:	4936      	ldr	r1, [pc, #216]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a86:	5c8a      	ldrb	r2, [r1, r2]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
	center = ( eeprom_data[channel * 2 - 1]  << 8 ) | eeprom_data[channel * 2 - 2 ]; 	//Store the center value for the specific receiver input channel
 8000a8c:	7ffb      	ldrb	r3, [r7, #31]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a33      	ldr	r2, [pc, #204]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	7ffa      	ldrb	r2, [r7, #31]
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	4930      	ldr	r1, [pc, #192]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aa0:	5c8a      	ldrb	r2, [r1, r2]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	617b      	str	r3, [r7, #20]
	high   = ( eeprom_data[channel * 2 + 7]  << 8 ) | eeprom_data[channel * 2 + 6 ];  	//Store the high value for the specific receiver input channel
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3307      	adds	r3, #7
 8000aac:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	7ffa      	ldrb	r2, [r7, #31]
 8000ab4:	3203      	adds	r2, #3
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	4929      	ldr	r1, [pc, #164]	; (8000b60 <Convert_Receiver_Channel+0x12c>)
 8000aba:	5c8a      	ldrb	r2, [r1, r2]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000ac0:	6a3a      	ldr	r2, [r7, #32]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	da1f      	bge.n	8000b08 <Convert_Receiver_Channel+0xd4>
	{                                                         							//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                                       //Limit the lowest value to the value that was detected during setup
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	da01      	bge.n	8000ad4 <Convert_Receiver_Channel+0xa0>
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);       	//Calculate and scale the actual value to a 1000 - 2000us value
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ade:	fb02 f203 	mul.w	r2, r2, r3
 8000ae2:	6979      	ldr	r1, [r7, #20]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aec:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                           //If the channel is reversed
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <Convert_Receiver_Channel+0xca>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000afc:	e02a      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else 	 {	return 1500 - difference;	}                                       //If the channel is not reversed
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b04:	3304      	adds	r3, #4
 8000b06:	e025      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else if( actual > center )
 8000b08:	6a3a      	ldr	r2, [r7, #32]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dd1f      	ble.n	8000b50 <Convert_Receiver_Channel+0x11c>
	{                                                                        			//The actual receiver value is higher than the center value
		if( actual > high )	{	actual = high;	}                                       //Limit the lowest value to the value that was detected during setup
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dd01      	ble.n	8000b1c <Convert_Receiver_Channel+0xe8>
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center);      	//Calculate and scale the actual value to a 1000 - 2000us value
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b26:	fb02 f203 	mul.w	r2, r2, r3
 8000b2a:	6939      	ldr	r1, [r7, #16]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                           //If the channel is reversed
 8000b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <Convert_Receiver_Channel+0x114>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000b44:	3304      	adds	r3, #4
 8000b46:	e005      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
		else	{	return 1500 + difference;	}                                       //If the channel is not reversed
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000b4e:	e001      	b.n	8000b54 <Convert_Receiver_Channel+0x120>
	}
	else	{	return 1500;	}
 8000b50:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	372c      	adds	r7, #44	; 0x2c
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	2000007c 	.word	0x2000007c
 8000b64:	200000a4 	.word	0x200000a4

08000b68 <Flash_ErasePage>:

uint32_t PageError;


void Flash_ErasePage( uint32_t pageaddress )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b70:	f002 ffc4 	bl	8003afc <HAL_FLASH_Unlock>

//	HAL_FLASHEx_Erase( (FLASH_EraseInitTypeDef *) FLASH_TYPEERASE_MASSERASE, (uint32_t *) PageError);
	FLASH_PageErase( pageaddress );
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f003 f909 	bl	8003d8c <FLASH_PageErase>

	HAL_FLASH_Lock();
 8000b7a:	f002 ffe5 	bl	8003b48 <HAL_FLASH_Lock>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Flash_EEPROM_Data_Write>:

HAL_StatusTypeDef Flash_EEPROM_Data_Write( uint8_t page, uint32_t address, uint32_t index, void *writeBuffer )
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b08d      	sub	sp, #52	; 0x34
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + (index*2);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8000ba0:	f002 ffac 	bl	8003afc <HAL_FLASH_Unlock>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* Fill EraseInit structure*/
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.PageAddress = address;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbPages = page;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	623b      	str	r3, [r7, #32]
    uint32_t error;


    if (status != HAL_OK)
 8000bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <Flash_EEPROM_Data_Write+0x3e>
        return status;
 8000bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bc2:	e032      	b.n	8000c2a <Flash_EEPROM_Data_Write+0xa4>

    // perform the erase first
    HAL_FLASHEx_Erase(&EraseInitStruct, &error);
 8000bc4:	f107 0214 	add.w	r2, r7, #20
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 f858 	bl	8003c84 <HAL_FLASHEx_Erase>

    if (error) { return -1; }
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <Flash_EEPROM_Data_Write+0x58>
 8000bda:	23ff      	movs	r3, #255	; 0xff
 8000bdc:	e025      	b.n	8000c2a <Flash_EEPROM_Data_Write+0xa4>

	//Write to Flash
	for( uint32_t i = 0; i < 1; i++ )
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11c      	bne.n	8000c22 <Flash_EEPROM_Data_Write+0x9c>
	{
		status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ( (uint16_t *)writeBuffer)[i] );
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	f04f 0400 	mov.w	r4, #0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f002 ff0c 	bl	8003a1c <HAL_FLASH_Program>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if (status != HAL_OK)
 8000c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <Flash_EEPROM_Data_Write+0x92>
			return status;
 8000c12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c16:	e008      	b.n	8000c2a <Flash_EEPROM_Data_Write+0xa4>


	    HAL_FLASH_Unlock();
 8000c18:	f002 ff70 	bl	8003afc <HAL_FLASH_Unlock>

	    return status;
 8000c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c20:	e003      	b.n	8000c2a <Flash_EEPROM_Data_Write+0xa4>
	}

	//Lock the Flash space
	HAL_FLASH_Lock();
 8000c22:	f002 ff91 	bl	8003b48 <HAL_FLASH_Lock>

	return status;
 8000c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3734      	adds	r7, #52	; 0x34
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}

08000c32 <Flash_EEPROM_Data_Read>:

void Flash_EEPROM_Data_Read( uint8_t page, uint32_t address, uint32_t index, void *readBuffer )
{
 8000c32:	b480      	push	{r7}
 8000c34:	b087      	sub	sp, #28
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
	uint32_t flashAddress = address + (index*2);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	4413      	add	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]

		*((uint16_t *)readBuffer) = *(uint32_t *)flashAddress;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	801a      	strh	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	371c      	adds	r7, #28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <Flight_Control_Setup>:
//
extern uint8_t eeprom_data[32];


void Flight_Control_Setup( void )
{
 8000c64:	b598      	push	{r3, r4, r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_Delay( 3000 );
 8000c68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c6c:	f002 fd58 	bl	8003720 <HAL_Delay>

	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000c70:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <Flight_Control_Setup+0x10c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e033      	b.n	8000ce0 <Flight_Control_Setup+0x7c>
	{
		Flight_Gyro_Signalen();                                           //Read the gyro output.
 8000c78:	f000 f888 	bl	8000d8c <Flight_Gyro_Signalen>

		gyro_axis_cal[1] += gyro_axis[1];                          //Ad roll value to gyro_roll_cal.
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000c7e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000c82:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <Flight_Control_Setup+0x114>)
 8000c84:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	f7ff faa2 	bl	80001d4 <__adddf3>
 8000c90:	4603      	mov	r3, r0
 8000c92:	460c      	mov	r4, r1
 8000c94:	4a37      	ldr	r2, [pc, #220]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000c96:	e9c2 3402 	strd	r3, r4, [r2, #8]
		gyro_axis_cal[2] += gyro_axis[2];                          //Ad pitch value to gyro_pitch_cal.
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000c9c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <Flight_Control_Setup+0x114>)
 8000ca2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4623      	mov	r3, r4
 8000caa:	f7ff fa93 	bl	80001d4 <__adddf3>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460c      	mov	r4, r1
 8000cb2:	4a30      	ldr	r2, [pc, #192]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000cb4:	e9c2 3404 	strd	r3, r4, [r2, #16]
		gyro_axis_cal[3] += gyro_axis[3];                          //Ad yaw value to gyro_yaw_cal.                                               //Wait 3 milliseconds before the next loop.
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000cba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <Flight_Control_Setup+0x114>)
 8000cc0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	f7ff fa84 	bl	80001d4 <__adddf3>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000cd2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	for ( cal_int = 0; cal_int < 2000 ; cal_int ++ )				//Take 2000 readings for calibration.
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <Flight_Control_Setup+0x10c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <Flight_Control_Setup+0x10c>)
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <Flight_Control_Setup+0x10c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ce8:	dbc6      	blt.n	8000c78 <Flight_Control_Setup+0x14>
	}

	//Now that we have 2000 measures, we need to divide by 2000 to get the average gyro offset.
	gyro_axis_cal[1] /= 2000;                                    //Divide the roll total by 2000.
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000cec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <Flight_Control_Setup+0x118>)
 8000cf6:	f7ff fd4d 	bl	8000794 <__aeabi_ddiv>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460c      	mov	r4, r1
 8000cfe:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000d00:	e9c2 3402 	strd	r3, r4, [r2, #8]
	gyro_axis_cal[2] /= 2000;                                    //Divide the pitch total by 2000.
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000d06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <Flight_Control_Setup+0x118>)
 8000d10:	f7ff fd40 	bl	8000794 <__aeabi_ddiv>
 8000d14:	4603      	mov	r3, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000d1a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	gyro_axis_cal[3] /= 2000;                                    //Divide the yaw total by 2000.
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000d20:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <Flight_Control_Setup+0x118>)
 8000d2a:	f7ff fd33 	bl	8000794 <__aeabi_ddiv>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460c      	mov	r4, r1
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <Flight_Control_Setup+0x110>)
 8000d34:	e9c2 3406 	strd	r3, r4, [r2, #24]

	//Wait until the receiver is active and the throttle is set to the lower position.
	while( receiver_input_channel_3 > 1100 )
 8000d38:	e00b      	b.n	8000d52 <Flight_Control_Setup+0xee>
	{
		receiver_input_channel_3 = Convert_Receiver_Channels(3);    //Convert the actual receiver signals for throttle to the standard 1000 - 2000us
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f8de 	bl	8000efc <Convert_Receiver_Channels>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <Flight_Control_Setup+0x11c>)
 8000d44:	601a      	str	r2, [r3, #0]
		receiver_input_channel_4 = Convert_Receiver_Channels(4);    //Convert the actual receiver signals for yaw to the standard 1000 - 2000us
 8000d46:	2004      	movs	r0, #4
 8000d48:	f000 f8d8 	bl	8000efc <Convert_Receiver_Channels>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Flight_Control_Setup+0x120>)
 8000d50:	601a      	str	r2, [r3, #0]
	while( receiver_input_channel_3 > 1100 )
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <Flight_Control_Setup+0x11c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f240 424c 	movw	r2, #1100	; 0x44c
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	dced      	bgt.n	8000d3a <Flight_Control_Setup+0xd6>
	}

	PWM_Output_Start();
 8000d5e:	f000 fc19 	bl	8001594 <PWM_Output_Start>
	PWM_Output_Idle();
 8000d62:	f000 fc2d 	bl	80015c0 <PWM_Output_Idle>

	start = 0;           //Set start back to 0.
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <Flight_Control_Setup+0x124>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	bd98      	pop	{r3, r4, r7, pc}
 8000d70:	2000002c 	.word	0x2000002c
 8000d74:	200001c8 	.word	0x200001c8
 8000d78:	200001a0 	.word	0x200001a0
 8000d7c:	409f4000 	.word	0x409f4000
 8000d80:	2000009c 	.word	0x2000009c
 8000d84:	20000388 	.word	0x20000388
 8000d88:	20000290 	.word	0x20000290

08000d8c <Flight_Gyro_Signalen>:
		PWM_Output_Idle();
	}
}

void Flight_Gyro_Signalen( void )
{
 8000d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d90:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8000d92:	f000 f9cd 	bl	8001130 <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_axis[1] = gX_Raw;
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <Flight_Gyro_Signalen+0x148>)
 8000d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fb65 	bl	800046c <__aeabi_i2d>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	494c      	ldr	r1, [pc, #304]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000da8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyro_axis[2] = gY_Raw;
 8000dac:	4b4b      	ldr	r3, [pc, #300]	; (8000edc <Flight_Gyro_Signalen+0x150>)
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb5a 	bl	800046c <__aeabi_i2d>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4946      	ldr	r1, [pc, #280]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000dbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gyro_axis[3] = gZ_Raw;
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <Flight_Gyro_Signalen+0x154>)
 8000dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb4f 	bl	800046c <__aeabi_i2d>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4941      	ldr	r1, [pc, #260]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000dd4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(cal_int == 2000)
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <Flight_Gyro_Signalen+0x158>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000de0:	d126      	bne.n	8000e30 <Flight_Gyro_Signalen+0xa4>
	{
		gyro_axis[1] -= gyro_axis_cal[1];                            //Only compensate after the calibration
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000de4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000de8:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <Flight_Gyro_Signalen+0x15c>)
 8000dea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000dee:	f7ff f9ef 	bl	80001d0 <__aeabi_dsub>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4938      	ldr	r1, [pc, #224]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000df8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    gyro_axis[2] -= gyro_axis_cal[2];                            //Only compensate after the calibration
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000dfe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <Flight_Gyro_Signalen+0x15c>)
 8000e04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e08:	f7ff f9e2 	bl	80001d0 <__aeabi_dsub>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4931      	ldr	r1, [pc, #196]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000e12:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    gyro_axis[3] -= gyro_axis_cal[3];                            //Only compensate after the calibration
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000e18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <Flight_Gyro_Signalen+0x15c>)
 8000e1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e22:	f7ff f9d5 	bl	80001d0 <__aeabi_dsub>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	492b      	ldr	r1, [pc, #172]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000e2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	gyro_roll  = gyro_axis[eeprom_data[28] & 0b00000011];
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <Flight_Gyro_Signalen+0x160>)
 8000e32:	7f1b      	ldrb	r3, [r3, #28]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	492b      	ldr	r1, [pc, #172]	; (8000ef0 <Flight_Gyro_Signalen+0x164>)
 8000e44:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[28] & 0b10000000 )	{	gyro_roll *= -1;	}
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <Flight_Gyro_Signalen+0x160>)
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da08      	bge.n	8000e64 <Flight_Gyro_Signalen+0xd8>
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <Flight_Gyro_Signalen+0x164>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	4692      	mov	sl, r2
 8000e5a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <Flight_Gyro_Signalen+0x164>)
 8000e60:	e9c3 ab00 	strd	sl, fp, [r3]

	gyro_pitch = gyro_axis[eeprom_data[29] & 0b00000011];
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <Flight_Gyro_Signalen+0x160>)
 8000e66:	7f5b      	ldrb	r3, [r3, #29]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4413      	add	r3, r2
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	491f      	ldr	r1, [pc, #124]	; (8000ef4 <Flight_Gyro_Signalen+0x168>)
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[29] & 0b10000000 )	{	gyro_pitch *= -1;	}
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <Flight_Gyro_Signalen+0x160>)
 8000e7e:	7f5b      	ldrb	r3, [r3, #29]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da08      	bge.n	8000e98 <Flight_Gyro_Signalen+0x10c>
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <Flight_Gyro_Signalen+0x168>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	4690      	mov	r8, r2
 8000e8e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <Flight_Gyro_Signalen+0x168>)
 8000e94:	e9c3 8900 	strd	r8, r9, [r3]

	gyro_yaw   = gyro_axis[eeprom_data[30] & 0b00000011];
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <Flight_Gyro_Signalen+0x160>)
 8000e9a:	7f9b      	ldrb	r3, [r3, #30]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <Flight_Gyro_Signalen+0x14c>)
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <Flight_Gyro_Signalen+0x16c>)
 8000eac:	e9c1 2300 	strd	r2, r3, [r1]
	if(	eeprom_data[30] & 0b10000000 )	{	gyro_yaw *= -1;		}
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <Flight_Gyro_Signalen+0x160>)
 8000eb2:	7f9b      	ldrb	r3, [r3, #30]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	da08      	bge.n	8000ecc <Flight_Gyro_Signalen+0x140>
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <Flight_Gyro_Signalen+0x16c>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	4614      	mov	r4, r2
 8000ec2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <Flight_Gyro_Signalen+0x16c>)
 8000ec8:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000ecc:	bf00      	nop
 8000ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000386 	.word	0x20000386
 8000ed8:	200001a0 	.word	0x200001a0
 8000edc:	20000384 	.word	0x20000384
 8000ee0:	20000368 	.word	0x20000368
 8000ee4:	2000002c 	.word	0x2000002c
 8000ee8:	200001c8 	.word	0x200001c8
 8000eec:	2000007c 	.word	0x2000007c
 8000ef0:	20000390 	.word	0x20000390
 8000ef4:	20000370 	.word	0x20000370
 8000ef8:	20000378 	.word	0x20000378

08000efc <Convert_Receiver_Channels>:

	pid_last_yaw_d_error = pid_error_temp;
}

int Convert_Receiver_Channels( uint8_t function )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b08b      	sub	sp, #44	; 0x2c
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t channel, reverse;                                                       //First we declare some local variables
	int low, center, high, actual;
	int difference;

	channel = eeprom_data[function + 23] & 0b00000111;                           //What channel corresponds with the specific function
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3317      	adds	r3, #23
 8000f0a:	4a47      	ldr	r2, [pc, #284]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	77fb      	strb	r3, [r7, #31]
	if( eeprom_data[function + 23] & 0b10000000  )	{	reverse = 1;	}            //Reverse channel when most significant bit is set
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	3317      	adds	r3, #23
 8000f18:	4a43      	ldr	r2, [pc, #268]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da03      	bge.n	8000f2a <Convert_Receiver_Channels+0x2e>
 8000f22:	2301      	movs	r3, #1
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f28:	e002      	b.n	8000f30 <Convert_Receiver_Channels+0x34>
	else	{	reverse = 0;	}                                                            //If the most significant is not set there is no reverse
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	actual = receiver_input[channel];                                            //Read the actual receiver value for the corresponding function
 8000f30:	7ffb      	ldrb	r3, [r7, #31]
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <Convert_Receiver_Channels+0x130>)
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	623b      	str	r3, [r7, #32]
	low 	= ( eeprom_data[channel * 2 + 15] << 8 ) | eeprom_data[channel * 2 + 14]; 	//Store the low value for the specific receiver input channel
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	330f      	adds	r3, #15
 8000f40:	4a39      	ldr	r2, [pc, #228]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	7ffa      	ldrb	r2, [r7, #31]
 8000f48:	3207      	adds	r2, #7
 8000f4a:	0052      	lsls	r2, r2, #1
 8000f4c:	4936      	ldr	r1, [pc, #216]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f4e:	5c8a      	ldrb	r2, [r1, r2]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
	center 	= ( eeprom_data[channel * 2 - 1] << 8 )  | eeprom_data[channel * 2 - 2];	//Store the center value for the specific receiver input channel
 8000f54:	7ffb      	ldrb	r3, [r7, #31]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a33      	ldr	r2, [pc, #204]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	7ffa      	ldrb	r2, [r7, #31]
 8000f62:	3a01      	subs	r2, #1
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	4930      	ldr	r1, [pc, #192]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f68:	5c8a      	ldrb	r2, [r1, r2]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
	high 	= ( eeprom_data[channel * 2 + 7] << 8 )  | eeprom_data[channel * 2 + 6];   	//Store the high value for the specific receiver input channel
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	3307      	adds	r3, #7
 8000f74:	4a2c      	ldr	r2, [pc, #176]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	7ffa      	ldrb	r2, [r7, #31]
 8000f7c:	3203      	adds	r2, #3
 8000f7e:	0052      	lsls	r2, r2, #1
 8000f80:	4929      	ldr	r1, [pc, #164]	; (8001028 <Convert_Receiver_Channels+0x12c>)
 8000f82:	5c8a      	ldrb	r2, [r1, r2]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

	if( actual < center )
 8000f88:	6a3a      	ldr	r2, [r7, #32]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	da1f      	bge.n	8000fd0 <Convert_Receiver_Channels+0xd4>
	{                                             	//The actual receiver value is lower than the center value
		if( actual < low )	{	actual = low;	}                              	//Limit the lowest value to the value that was detected during setup
 8000f90:	6a3a      	ldr	r2, [r7, #32]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	da01      	bge.n	8000f9c <Convert_Receiver_Channels+0xa0>
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	623b      	str	r3, [r7, #32]
		difference = ( (long)(center - actual) * (long)500 ) / (center - low);  //Calculate and scale the actual value to a 1000 - 2000us value
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa6:	fb02 f203 	mul.w	r2, r2, r3
 8000faa:	6979      	ldr	r1, [r7, #20]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 + difference;	}                   //If the channel is reversed
 8000fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d103      	bne.n	8000fc6 <Convert_Receiver_Channels+0xca>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000fc4:	e02a      	b.n	800101c <Convert_Receiver_Channels+0x120>
		else	{	return 1500 - difference;	}                               //If the channel is not reversed
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000fcc:	3304      	adds	r3, #4
 8000fce:	e025      	b.n	800101c <Convert_Receiver_Channels+0x120>
	}
	else if(actual > center)
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dd1f      	ble.n	8001018 <Convert_Receiver_Channels+0x11c>
	{                                           	//The actual receiver value is higher than the center value
		if(actual > high)	{	actual = high;	}                               //Limit the lowest value to the value that was detected during setup
 8000fd8:	6a3a      	ldr	r2, [r7, #32]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dd01      	ble.n	8000fe4 <Convert_Receiver_Channels+0xe8>
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	623b      	str	r3, [r7, #32]
		difference = ( (long)(actual - center) * (long)500 ) / (high - center); //Calculate and scale the actual value to a 1000 - 2000us value
 8000fe4:	6a3a      	ldr	r2, [r7, #32]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fee:	fb02 f203 	mul.w	r2, r2, r3
 8000ff2:	6939      	ldr	r1, [r7, #16]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffc:	60fb      	str	r3, [r7, #12]
		if( reverse == 1 )	{	return 1500 - difference;	}                  	//If the channel is reversed
 8000ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001002:	2b01      	cmp	r3, #1
 8001004:	d104      	bne.n	8001010 <Convert_Receiver_Channels+0x114>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800100c:	3304      	adds	r3, #4
 800100e:	e005      	b.n	800101c <Convert_Receiver_Channels+0x120>
		else	{	return 1500 + difference;	}                               //If the channel is not reversed
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001016:	e001      	b.n	800101c <Convert_Receiver_Channels+0x120>
	}
	else	{	return 1500;	}
 8001018:	f240 53dc 	movw	r3, #1500	; 0x5dc
}
 800101c:	4618      	mov	r0, r3
 800101e:	372c      	adds	r7, #44	; 0x2c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	2000007c 	.word	0x2000007c
 800102c:	200000a4 	.word	0x200000a4

08001030 <L3GD20H_Init>:
//
extern bool gyro_error;


void L3GD20H_Init( void )
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af04      	add	r7, sp, #16
	uint8_t L3GD20H_WHO_AM_I_Check = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD , L3GD20H_REG_WHO_AM_I, 1, &L3GD20H_WHO_AM_I_Check, 1, 100 );
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	220f      	movs	r2, #15
 800104a:	21d7      	movs	r1, #215	; 0xd7
 800104c:	482f      	ldr	r0, [pc, #188]	; (800110c <L3GD20H_Init+0xdc>)
 800104e:	f003 fa0b 	bl	8004468 <HAL_I2C_Mem_Read>

	if ( L3GD20H_WHO_AM_I_Check == L3GD20H_WHO_AM_I )
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2bd4      	cmp	r3, #212	; 0xd4
 8001056:	d137      	bne.n	80010c8 <L3GD20H_Init+0x98>
	{
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL1, 1, &L3GD20H_SET_CTRL1,	1, 10 );
 8001058:	230a      	movs	r3, #10
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <L3GD20H_Init+0xe0>)
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2220      	movs	r2, #32
 8001068:	21d6      	movs	r1, #214	; 0xd6
 800106a:	4828      	ldr	r0, [pc, #160]	; (800110c <L3GD20H_Init+0xdc>)
 800106c:	f003 f8e8 	bl	8004240 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Write( &hi2c1, L3GD20H_ADDRESS_DATAWRITE, L3GD20H_REG_CTRL4, 1, &L3GD20H_SET_CTRL4, 1, 10 );
 8001070:	230a      	movs	r3, #10
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <L3GD20H_Init+0xe4>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	2223      	movs	r2, #35	; 0x23
 8001080:	21d6      	movs	r1, #214	; 0xd6
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <L3GD20H_Init+0xdc>)
 8001084:	f003 f8dc 	bl	8004240 <HAL_I2C_Mem_Write>

		sprintf(uartTX, "                                                                                                    ");
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <L3GD20H_Init+0xe8>)
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <L3GD20H_Init+0xec>)
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	2365      	movs	r3, #101	; 0x65
 8001092:	461a      	mov	r2, r3
 8001094:	f008 f80c 	bl	80090b0 <memcpy>
		sprintf(uartTX, "\nL3GD20H is found and settled!\n");
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <L3GD20H_Init+0xe8>)
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <L3GD20H_Init+0xf0>)
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	6020      	str	r0, [r4, #0]
 80010a4:	6061      	str	r1, [r4, #4]
 80010a6:	60a2      	str	r2, [r4, #8]
 80010a8:	60e3      	str	r3, [r4, #12]
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	6120      	str	r0, [r4, #16]
 80010ae:	6161      	str	r1, [r4, #20]
 80010b0:	61a2      	str	r2, [r4, #24]
 80010b2:	61e3      	str	r3, [r4, #28]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2265      	movs	r2, #101	; 0x65
 80010b8:	4917      	ldr	r1, [pc, #92]	; (8001118 <L3GD20H_Init+0xe8>)
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <L3GD20H_Init+0xf4>)
 80010bc:	f007 fa10 	bl	80084e0 <HAL_UART_Transmit>

		gyro_error = false;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <L3GD20H_Init+0xf8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );

		gyro_error = true;
	}
}
 80010c6:	e01c      	b.n	8001102 <L3GD20H_Init+0xd2>
		sprintf(uartTX, "                                                                                                    ");
 80010c8:	4a13      	ldr	r2, [pc, #76]	; (8001118 <L3GD20H_Init+0xe8>)
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <L3GD20H_Init+0xec>)
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	2365      	movs	r3, #101	; 0x65
 80010d2:	461a      	mov	r2, r3
 80010d4:	f007 ffec 	bl	80090b0 <memcpy>
		sprintf(uartTX, "\nL3GD20H is NOT found!\n");
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <L3GD20H_Init+0xe8>)
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <L3GD20H_Init+0xfc>)
 80010dc:	4615      	mov	r5, r2
 80010de:	461c      	mov	r4, r3
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	6028      	str	r0, [r5, #0]
 80010e4:	6069      	str	r1, [r5, #4]
 80010e6:	60aa      	str	r2, [r5, #8]
 80010e8:	60eb      	str	r3, [r5, #12]
 80010ea:	cc03      	ldmia	r4!, {r0, r1}
 80010ec:	6128      	str	r0, [r5, #16]
 80010ee:	6169      	str	r1, [r5, #20]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	2265      	movs	r2, #101	; 0x65
 80010f4:	4908      	ldr	r1, [pc, #32]	; (8001118 <L3GD20H_Init+0xe8>)
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <L3GD20H_Init+0xf4>)
 80010f8:	f007 f9f2 	bl	80084e0 <HAL_UART_Transmit>
		gyro_error = true;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <L3GD20H_Init+0xf8>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	bf00      	nop
 800110c:	20000150 	.word	0x20000150
 8001110:	20000000 	.word	0x20000000
 8001114:	20000001 	.word	0x20000001
 8001118:	200002a4 	.word	0x200002a4
 800111c:	080090f0 	.word	0x080090f0
 8001120:	08009158 	.word	0x08009158
 8001124:	200001f8 	.word	0x200001f8
 8001128:	2000036b 	.word	0x2000036b
 800112c:	08009178 	.word	0x08009178

08001130 <L3GD20H_Read_Gyro_RAW_Outputs>:

void L3GD20H_Read_Gyro_RAW_Outputs( void )
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_L, 1,  &L3GD20H_OUT_X_L, 1, 100);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	2228      	movs	r2, #40	; 0x28
 8001146:	21d7      	movs	r1, #215	; 0xd7
 8001148:	4832      	ldr	r0, [pc, #200]	; (8001214 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800114a:	f003 f98d 	bl	8004468 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_X_H, 1, 	&L3GD20H_OUT_X_H, 1, 100);
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2229      	movs	r2, #41	; 0x29
 800115e:	21d7      	movs	r1, #215	; 0xd7
 8001160:	482c      	ldr	r0, [pc, #176]	; (8001214 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001162:	f003 f981 	bl	8004468 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_L, 1,  &L3GD20H_OUT_Y_L, 1, 100);
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	222a      	movs	r2, #42	; 0x2a
 8001176:	21d7      	movs	r1, #215	; 0xd7
 8001178:	4826      	ldr	r0, [pc, #152]	; (8001214 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 800117a:	f003 f975 	bl	8004468 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Y_H, 1,  &L3GD20H_OUT_Y_H, 1, 100);
 800117e:	2364      	movs	r3, #100	; 0x64
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	222b      	movs	r2, #43	; 0x2b
 800118e:	21d7      	movs	r1, #215	; 0xd7
 8001190:	4820      	ldr	r0, [pc, #128]	; (8001214 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 8001192:	f003 f969 	bl	8004468 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_L, 1,  &L3GD20H_OUT_Z_L, 1, 100);
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	222c      	movs	r2, #44	; 0x2c
 80011a6:	21d7      	movs	r1, #215	; 0xd7
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 80011aa:	f003 f95d 	bl	8004468 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, L3GD20H_ADDRESS_DATAREAD, L3GD20H_REG_OUT_Z_H, 1,  &L3GD20H_OUT_Z_H, 1, 100);
 80011ae:	2364      	movs	r3, #100	; 0x64
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	222d      	movs	r2, #45	; 0x2d
 80011be:	21d7      	movs	r1, #215	; 0xd7
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <L3GD20H_Read_Gyro_RAW_Outputs+0xe4>)
 80011c2:	f003 f951 	bl	8004468 <HAL_I2C_Mem_Read>

	gX_Raw = (int16_t) (L3GD20H_OUT_X_H << 8 | L3GD20H_OUT_X_L);
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <L3GD20H_Read_Gyro_RAW_Outputs+0xe8>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <L3GD20H_Read_Gyro_RAW_Outputs+0xe0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <L3GD20H_Read_Gyro_RAW_Outputs+0xfc>)
 80011da:	801a      	strh	r2, [r3, #0]
	gY_Raw = (int16_t) (L3GD20H_OUT_Y_H << 8 | L3GD20H_OUT_Y_L);
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <L3GD20H_Read_Gyro_RAW_Outputs+0xf0>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <L3GD20H_Read_Gyro_RAW_Outputs+0xec>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <L3GD20H_Read_Gyro_RAW_Outputs+0x100>)
 80011f0:	801a      	strh	r2, [r3, #0]
	gZ_Raw = (int16_t) (L3GD20H_OUT_Z_H << 8 | L3GD20H_OUT_Z_L);
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <L3GD20H_Read_Gyro_RAW_Outputs+0xf8>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <L3GD20H_Read_Gyro_RAW_Outputs+0xf4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <L3GD20H_Read_Gyro_RAW_Outputs+0x104>)
 8001206:	801a      	strh	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000030 	.word	0x20000030
 8001214:	20000150 	.word	0x20000150
 8001218:	20000031 	.word	0x20000031
 800121c:	20000032 	.word	0x20000032
 8001220:	20000033 	.word	0x20000033
 8001224:	20000034 	.word	0x20000034
 8001228:	20000035 	.word	0x20000035
 800122c:	20000386 	.word	0x20000386
 8001230:	20000384 	.word	0x20000384
 8001234:	20000368 	.word	0x20000368

08001238 <PWM_IC_Start>:
extern int receiver_input_channel_1, receiver_input_channel_2, receiver_input_channel_3, receiver_input_channel_4;
extern int receiver_input[5];


void PWM_IC_Start( void )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 800123c:	2100      	movs	r1, #0
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <PWM_IC_Start+0x10>)
 8001240:	f005 fe46 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000100 	.word	0x20000100

0800124c <HAL_TIM_IC_CaptureCallback>:
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3);
	HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4);
}

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 )   // if the interrupt source is channel1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7f1b      	ldrb	r3, [r3, #28]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d158      	bne.n	800130e <HAL_TIM_IC_CaptureCallback+0xc2>
	{
		if ( First_Captured == false ) 												// if the first value is not captured
 800125c:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11a      	bne.n	800129a <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			Roll_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 ); 	// read the first value
 8001264:	2100      	movs	r1, #0
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f006 fa9e 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 800126c:	4602      	mov	r2, r0
 800126e:	4b69      	ldr	r3, [pc, #420]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001270:	601a      	str	r2, [r3, #0]
			First_Captured = true;  											// set the first captured as true
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 020a 	bic.w	r2, r2, #10
 8001286:	621a      	str	r2, [r3, #32]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0202 	orr.w	r2, r2, #2
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	e039      	b.n	800130e <HAL_TIM_IC_CaptureCallback+0xc2>
		}

		else if ( First_Captured == true )   // if the first is already captured
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d135      	bne.n	800130e <HAL_TIM_IC_CaptureCallback+0xc2>
		{
			Roll_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 );  // read second value
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f006 fa7f 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80012ae:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Roll_IC_Val2 > Roll_IC_Val1 )
 80012b8:	4b57      	ldr	r3, [pc, #348]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d90b      	bls.n	80012dc <HAL_TIM_IC_CaptureCallback+0x90>
			{
				receiver_input_channel_1 = Roll_IC_Val2 - Roll_IC_Val1;
 80012c4:	4b54      	ldr	r3, [pc, #336]	; (8001418 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b52      	ldr	r3, [pc, #328]	; (8001414 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b52      	ldr	r3, [pc, #328]	; (800141c <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80012d2:	601a      	str	r2, [r3, #0]
				receiver_input[1] = receiver_input_channel_1;
 80012d4:	4b51      	ldr	r3, [pc, #324]	; (800141c <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a51      	ldr	r2, [pc, #324]	; (8001420 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80012da:	6053      	str	r3, [r2, #4]
			}

			First_Captured = false;	// set it back to false
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING );	// set polarity to rising edge
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 020a 	bic.w	r2, r2, #10
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a12      	ldr	r2, [r2, #32]
 80012fc:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_1 );
 80012fe:	2100      	movs	r1, #0
 8001300:	4848      	ldr	r0, [pc, #288]	; (8001424 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001302:	f005 fe53 	bl	8006fac <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_2 );
 8001306:	2104      	movs	r1, #4
 8001308:	4846      	ldr	r0, [pc, #280]	; (8001424 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800130a:	f005 fde1 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2 )   // if the interrupt source is channel2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7f1b      	ldrb	r3, [r3, #28]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d158      	bne.n	80013c8 <HAL_TIM_IC_CaptureCallback+0x17c>
	{
		if ( First_Captured == false ) // if the first value is not captured
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11a      	bne.n	8001354 <HAL_TIM_IC_CaptureCallback+0x108>
		{
			Pitch_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 ); 	// read the first value
 800131e:	2104      	movs	r1, #4
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f006 fa41 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 8001326:	4602      	mov	r2, r0
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800132a:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a1a      	ldr	r2, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0220 	orr.w	r2, r2, #32
 8001350:	621a      	str	r2, [r3, #32]
 8001352:	e039      	b.n	80013c8 <HAL_TIM_IC_CaptureCallback+0x17c>
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001354:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d135      	bne.n	80013c8 <HAL_TIM_IC_CaptureCallback+0x17c>
		{
			Pitch_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 );  // read second value
 800135c:	2104      	movs	r1, #4
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f006 fa22 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 8001364:	4602      	mov	r2, r0
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001368:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER( htim, false );  // reset the counter
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Pitch_IC_Val2 > Pitch_IC_Val1 )
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d90b      	bls.n	8001396 <HAL_TIM_IC_CaptureCallback+0x14a>
			{
				receiver_input_channel_2 = Pitch_IC_Val2 - Pitch_IC_Val1;
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800138c:	601a      	str	r2, [r3, #0]
				receiver_input[2] = receiver_input_channel_2;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a23      	ldr	r2, [pc, #140]	; (8001420 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001394:	6093      	str	r3, [r2, #8]
			}

			First_Captured = false; // set it back to false
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a12      	ldr	r2, [r2, #32]
 80013b6:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_2 );
 80013b8:	2104      	movs	r1, #4
 80013ba:	481a      	ldr	r0, [pc, #104]	; (8001424 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80013bc:	f005 fdf6 	bl	8006fac <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_3 );
 80013c0:	2108      	movs	r1, #8
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80013c4:	f005 fd84 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3 )   // if the interrupt source is channel2
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7f1b      	ldrb	r3, [r3, #28]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d16d      	bne.n	80014ac <HAL_TIM_IC_CaptureCallback+0x260>
	{
		if ( First_Captured == false ) // if the first value is not captured
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d12f      	bne.n	8001438 <HAL_TIM_IC_CaptureCallback+0x1ec>
		{
			Throttle_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 ); 	// read the first value
 80013d8:	2108      	movs	r1, #8
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f006 f9e4 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80013e4:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140a:	621a      	str	r2, [r3, #32]
 800140c:	e04e      	b.n	80014ac <HAL_TIM_IC_CaptureCallback+0x260>
 800140e:	bf00      	nop
 8001410:	20000036 	.word	0x20000036
 8001414:	20000038 	.word	0x20000038
 8001418:	2000003c 	.word	0x2000003c
 800141c:	2000038c 	.word	0x2000038c
 8001420:	200000a4 	.word	0x200000a4
 8001424:	20000100 	.word	0x20000100
 8001428:	20000040 	.word	0x20000040
 800142c:	20000044 	.word	0x20000044
 8001430:	20000380 	.word	0x20000380
 8001434:	20000048 	.word	0x20000048
		}

		else if ( First_Captured == true )   // if the first is already captured
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x324>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d135      	bne.n	80014ac <HAL_TIM_IC_CaptureCallback+0x260>
		{
			Throttle_IC_Val2 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 );  // read second value
 8001440:	2108      	movs	r1, #8
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f006 f9b0 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 8001448:	4602      	mov	r2, r0
 800144a:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x328>)
 800144c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

			if ( Throttle_IC_Val2 > Throttle_IC_Val1 )
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d90b      	bls.n	800147a <HAL_TIM_IC_CaptureCallback+0x22e>
			{
				receiver_input_channel_3 = Throttle_IC_Val2 - Throttle_IC_Val1;
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_TIM_IC_CaptureCallback+0x330>)
 8001470:	601a      	str	r2, [r3, #0]
				receiver_input[3] = receiver_input_channel_3;
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <HAL_TIM_IC_CaptureCallback+0x330>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001478:	60d3      	str	r3, [r2, #12]
			}

			First_Captured = false; // set it back to false
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x324>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800148e:	621a      	str	r2, [r3, #32]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a12      	ldr	r2, [r2, #32]
 800149a:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_3 );
 800149c:	2108      	movs	r1, #8
 800149e:	4839      	ldr	r0, [pc, #228]	; (8001584 <HAL_TIM_IC_CaptureCallback+0x338>)
 80014a0:	f005 fd84 	bl	8006fac <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_4 );
 80014a4:	210c      	movs	r1, #12
 80014a6:	4837      	ldr	r0, [pc, #220]	; (8001584 <HAL_TIM_IC_CaptureCallback+0x338>)
 80014a8:	f005 fd12 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
		}
	}

	if ( htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_4 )   // if the interrupt source is channel2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7f1b      	ldrb	r3, [r3, #28]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d158      	bne.n	8001566 <HAL_TIM_IC_CaptureCallback+0x31a>
	{
		if ( First_Captured == false ) // if the first value is not captured
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x324>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d11a      	bne.n	80014f2 <HAL_TIM_IC_CaptureCallback+0x2a6>
		{
			Yaw_IC_Val1 = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_4 ); 	// read the first value
 80014bc:	210c      	movs	r1, #12
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f006 f972 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80014c8:	601a      	str	r2, [r3, #0]
			First_Captured = true;  										// set the first captured as true
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x324>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING ); 	// Now change the polarity to falling edge
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ee:	621a      	str	r2, [r3, #32]

			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
		}
	}
}
 80014f0:	e039      	b.n	8001566 <HAL_TIM_IC_CaptureCallback+0x31a>
		else if ( First_Captured == true )   // if the first is already captured
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x324>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d135      	bne.n	8001566 <HAL_TIM_IC_CaptureCallback+0x31a>
			Yaw_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80014fa:	210c      	movs	r1, #12
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f006 f953 	bl	80077a8 <HAL_TIM_ReadCapturedValue>
 8001502:	4602      	mov	r2, r0
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_TIM_IC_CaptureCallback+0x340>)
 8001506:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, false);  // reset the counter
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
			if ( Yaw_IC_Val2 > Yaw_IC_Val1 )
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_TIM_IC_CaptureCallback+0x340>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d90b      	bls.n	8001534 <HAL_TIM_IC_CaptureCallback+0x2e8>
				receiver_input_channel_4 = Yaw_IC_Val2 - Yaw_IC_Val1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_TIM_IC_CaptureCallback+0x340>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x344>)
 800152a:	601a      	str	r2, [r3, #0]
				receiver_input[4] = receiver_input_channel_4;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x344>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001532:	6113      	str	r3, [r2, #16]
			First_Captured = false; // set it back to false
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY( htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING );  // set polarity to rising edge
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a1a      	ldr	r2, [r3, #32]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001548:	621a      	str	r2, [r3, #32]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a12      	ldr	r2, [r2, #32]
 8001554:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT( &htim2, TIM_CHANNEL_4 );
 8001556:	210c      	movs	r1, #12
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <HAL_TIM_IC_CaptureCallback+0x338>)
 800155a:	f005 fd27 	bl	8006fac <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 );
 800155e:	2100      	movs	r1, #0
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001562:	f005 fcb5 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000036 	.word	0x20000036
 8001574:	2000004c 	.word	0x2000004c
 8001578:	20000048 	.word	0x20000048
 800157c:	2000009c 	.word	0x2000009c
 8001580:	200000a4 	.word	0x200000a4
 8001584:	20000100 	.word	0x20000100
 8001588:	20000050 	.word	0x20000050
 800158c:	20000054 	.word	0x20000054
 8001590:	20000388 	.word	0x20000388

08001594 <PWM_Output_Start>:

#include "PWM_Output.h"


void PWM_Output_Start( void )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1);
 8001598:	2100      	movs	r1, #0
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <PWM_Output_Start+0x28>)
 800159c:	f005 fc14 	bl	8006dc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2);
 80015a0:	2104      	movs	r1, #4
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <PWM_Output_Start+0x28>)
 80015a4:	f005 fc10 	bl	8006dc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_3);
 80015a8:	2108      	movs	r1, #8
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <PWM_Output_Start+0x28>)
 80015ac:	f005 fc0c 	bl	8006dc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_4);
 80015b0:	210c      	movs	r1, #12
 80015b2:	4802      	ldr	r0, [pc, #8]	; (80015bc <PWM_Output_Start+0x28>)
 80015b4:	f005 fc08 	bl	8006dc8 <HAL_TIM_PWM_Start>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000b8 	.word	0x200000b8

080015c0 <PWM_Output_Idle>:

void PWM_Output_Idle( void )
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = 1000;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <PWM_Output_Idle+0x38>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 1000;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <PWM_Output_Idle+0x38>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 1000;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <PWM_Output_Idle+0x38>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = 1000;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <PWM_Output_Idle+0x38>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200000b8 	.word	0x200000b8

080015fc <PWM_Output_ESC_Calibration>:

void PWM_Output_ESC_Calibration( int esc_3 )
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	htim3.Instance->CCR1 = esc_3;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <PWM_Output_ESC_Calibration+0x34>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = esc_3;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <PWM_Output_ESC_Calibration+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = esc_3;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <PWM_Output_ESC_Calibration+0x34>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = esc_3;
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <PWM_Output_ESC_Calibration+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	200000b8 	.word	0x200000b8

08001634 <Main_Setup>:
extern float gyro_pitch, gyro_roll, gyro_yaw;
extern int16_t gX_Raw, gY_Raw, gZ_Raw;


void Main_Setup( void )
{
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	af00      	add	r7, sp, #0
    sprintf(uartTX, "                                                                                                    ");
 8001638:	4a8f      	ldr	r2, [pc, #572]	; (8001878 <Main_Setup+0x244>)
 800163a:	4b90      	ldr	r3, [pc, #576]	; (800187c <Main_Setup+0x248>)
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	2365      	movs	r3, #101	; 0x65
 8001642:	461a      	mov	r2, r3
 8001644:	f007 fd34 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nMove the sticks to the center position within 10 seconds!\n");
 8001648:	4b8b      	ldr	r3, [pc, #556]	; (8001878 <Main_Setup+0x244>)
 800164a:	4a8d      	ldr	r2, [pc, #564]	; (8001880 <Main_Setup+0x24c>)
 800164c:	4614      	mov	r4, r2
 800164e:	469c      	mov	ip, r3
 8001650:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001654:	4665      	mov	r5, ip
 8001656:	4626      	mov	r6, r4
 8001658:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800165a:	6028      	str	r0, [r5, #0]
 800165c:	6069      	str	r1, [r5, #4]
 800165e:	60aa      	str	r2, [r5, #8]
 8001660:	60eb      	str	r3, [r5, #12]
 8001662:	3410      	adds	r4, #16
 8001664:	f10c 0c10 	add.w	ip, ip, #16
 8001668:	4574      	cmp	r4, lr
 800166a:	d1f3      	bne.n	8001654 <Main_Setup+0x20>
 800166c:	4665      	mov	r5, ip
 800166e:	4623      	mov	r3, r4
 8001670:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001672:	6028      	str	r0, [r5, #0]
 8001674:	6069      	str	r1, [r5, #4]
 8001676:	60aa      	str	r2, [r5, #8]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	2265      	movs	r2, #101	; 0x65
 800167c:	497e      	ldr	r1, [pc, #504]	; (8001878 <Main_Setup+0x244>)
 800167e:	4881      	ldr	r0, [pc, #516]	; (8001884 <Main_Setup+0x250>)
 8001680:	f006 ff2e 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001684:	f242 7010 	movw	r0, #10000	; 0x2710
 8001688:	f002 f84a 	bl	8003720 <HAL_Delay>

    //Store the central stick positions
    center_channel_1 = receiver_input_channel_1;
 800168c:	4b7e      	ldr	r3, [pc, #504]	; (8001888 <Main_Setup+0x254>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a7e      	ldr	r2, [pc, #504]	; (800188c <Main_Setup+0x258>)
 8001692:	6013      	str	r3, [r2, #0]
    center_channel_2 = receiver_input_channel_2;
 8001694:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <Main_Setup+0x25c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a7e      	ldr	r2, [pc, #504]	; (8001894 <Main_Setup+0x260>)
 800169a:	6013      	str	r3, [r2, #0]
    center_channel_3 = receiver_input_channel_3;
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <Main_Setup+0x264>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a7e      	ldr	r2, [pc, #504]	; (800189c <Main_Setup+0x268>)
 80016a2:	6013      	str	r3, [r2, #0]
    center_channel_4 = receiver_input_channel_4;
 80016a4:	4b7e      	ldr	r3, [pc, #504]	; (80018a0 <Main_Setup+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7e      	ldr	r2, [pc, #504]	; (80018a4 <Main_Setup+0x270>)
 80016aa:	6013      	str	r3, [r2, #0]


    sprintf(uartTX, "                                                                                                    ");
 80016ac:	4a72      	ldr	r2, [pc, #456]	; (8001878 <Main_Setup+0x244>)
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <Main_Setup+0x248>)
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	2365      	movs	r3, #101	; 0x65
 80016b6:	461a      	mov	r2, r3
 80016b8:	f007 fcfa 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nMove the sticks to min & max positions then back to center within 10 seconds!\n");
 80016bc:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <Main_Setup+0x244>)
 80016be:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <Main_Setup+0x274>)
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	2350      	movs	r3, #80	; 0x50
 80016c6:	461a      	mov	r2, r3
 80016c8:	f007 fcf2 	bl	80090b0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	2265      	movs	r2, #101	; 0x65
 80016d0:	4969      	ldr	r1, [pc, #420]	; (8001878 <Main_Setup+0x244>)
 80016d2:	486c      	ldr	r0, [pc, #432]	; (8001884 <Main_Setup+0x250>)
 80016d4:	f006 ff04 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 1000 );
 80016d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016dc:	f002 f820 	bl	8003720 <HAL_Delay>
    //Register the min and max values of the receiver channels
    Register_Min_Max();
 80016e0:	f000 fea6 	bl	8002430 <Register_Min_Max>


    sprintf(uartTX, "                                                                                                    ");
 80016e4:	4a64      	ldr	r2, [pc, #400]	; (8001878 <Main_Setup+0x244>)
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <Main_Setup+0x248>)
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	2365      	movs	r3, #101	; 0x65
 80016ee:	461a      	mov	r2, r3
 80016f0:	f007 fcde 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nMove the throttle stick to full throttle within 10 seconds!\n");
 80016f4:	4b60      	ldr	r3, [pc, #384]	; (8001878 <Main_Setup+0x244>)
 80016f6:	4a6d      	ldr	r2, [pc, #436]	; (80018ac <Main_Setup+0x278>)
 80016f8:	4614      	mov	r4, r2
 80016fa:	469c      	mov	ip, r3
 80016fc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001700:	4665      	mov	r5, ip
 8001702:	4626      	mov	r6, r4
 8001704:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001706:	6028      	str	r0, [r5, #0]
 8001708:	6069      	str	r1, [r5, #4]
 800170a:	60aa      	str	r2, [r5, #8]
 800170c:	60eb      	str	r3, [r5, #12]
 800170e:	3410      	adds	r4, #16
 8001710:	f10c 0c10 	add.w	ip, ip, #16
 8001714:	4574      	cmp	r4, lr
 8001716:	d1f3      	bne.n	8001700 <Main_Setup+0xcc>
 8001718:	4665      	mov	r5, ip
 800171a:	4623      	mov	r3, r4
 800171c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800171e:	6028      	str	r0, [r5, #0]
 8001720:	6069      	str	r1, [r5, #4]
 8001722:	60aa      	str	r2, [r5, #8]
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	2265      	movs	r2, #101	; 0x65
 800172c:	4952      	ldr	r1, [pc, #328]	; (8001878 <Main_Setup+0x244>)
 800172e:	4855      	ldr	r0, [pc, #340]	; (8001884 <Main_Setup+0x250>)
 8001730:	f006 fed6 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 8001734:	f242 7010 	movw	r0, #10000	; 0x2710
 8001738:	f001 fff2 	bl	8003720 <HAL_Delay>
    Check_Receiver_Inputs( 1 );			//	Move the throttle stick to full throttle and back to center within 10 seconds
 800173c:	2001      	movs	r0, #1
 800173e:	f000 ff7d 	bl	800263c <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 8001742:	4a4d      	ldr	r2, [pc, #308]	; (8001878 <Main_Setup+0x244>)
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <Main_Setup+0x248>)
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	2365      	movs	r3, #101	; 0x65
 800174c:	461a      	mov	r2, r3
 800174e:	f007 fcaf 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nMove the roll stick to simulate left wing up within 10 seconds!\n");
 8001752:	4a49      	ldr	r2, [pc, #292]	; (8001878 <Main_Setup+0x244>)
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <Main_Setup+0x27c>)
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	2342      	movs	r3, #66	; 0x42
 800175c:	461a      	mov	r2, r3
 800175e:	f007 fca7 	bl	80090b0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001762:	2364      	movs	r3, #100	; 0x64
 8001764:	2265      	movs	r2, #101	; 0x65
 8001766:	4944      	ldr	r1, [pc, #272]	; (8001878 <Main_Setup+0x244>)
 8001768:	4846      	ldr	r0, [pc, #280]	; (8001884 <Main_Setup+0x250>)
 800176a:	f006 feb9 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 800176e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001772:	f001 ffd5 	bl	8003720 <HAL_Delay>
    Check_Receiver_Inputs( 2 );			//	Move the roll stick to simulate left wing up and back to center within 10 seconds
 8001776:	2002      	movs	r0, #2
 8001778:	f000 ff60 	bl	800263c <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 800177c:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <Main_Setup+0x244>)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <Main_Setup+0x248>)
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	2365      	movs	r3, #101	; 0x65
 8001786:	461a      	mov	r2, r3
 8001788:	f007 fc92 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nMove the pitch stick to simulate nose up within 10 seconds!\n");
 800178c:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <Main_Setup+0x244>)
 800178e:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <Main_Setup+0x280>)
 8001790:	4614      	mov	r4, r2
 8001792:	469c      	mov	ip, r3
 8001794:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001798:	4665      	mov	r5, ip
 800179a:	4626      	mov	r6, r4
 800179c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800179e:	6028      	str	r0, [r5, #0]
 80017a0:	6069      	str	r1, [r5, #4]
 80017a2:	60aa      	str	r2, [r5, #8]
 80017a4:	60eb      	str	r3, [r5, #12]
 80017a6:	3410      	adds	r4, #16
 80017a8:	f10c 0c10 	add.w	ip, ip, #16
 80017ac:	4574      	cmp	r4, lr
 80017ae:	d1f3      	bne.n	8001798 <Main_Setup+0x164>
 80017b0:	4665      	mov	r5, ip
 80017b2:	4623      	mov	r3, r4
 80017b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017b6:	6028      	str	r0, [r5, #0]
 80017b8:	6069      	str	r1, [r5, #4]
 80017ba:	60aa      	str	r2, [r5, #8]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	81ab      	strh	r3, [r5, #12]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	2265      	movs	r2, #101	; 0x65
 80017c4:	492c      	ldr	r1, [pc, #176]	; (8001878 <Main_Setup+0x244>)
 80017c6:	482f      	ldr	r0, [pc, #188]	; (8001884 <Main_Setup+0x250>)
 80017c8:	f006 fe8a 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 80017cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80017d0:	f001 ffa6 	bl	8003720 <HAL_Delay>
    Check_Receiver_Inputs( 3 );			//	Move the pitch stick to simulate left wing up and back to center within 10 seconds
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 ff31 	bl	800263c <Check_Receiver_Inputs>

    sprintf(uartTX, "                                                                                                    ");
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <Main_Setup+0x244>)
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <Main_Setup+0x248>)
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	2365      	movs	r3, #101	; 0x65
 80017e4:	461a      	mov	r2, r3
 80017e6:	f007 fc63 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nMove the yaw stick to simulate nose right within 10 seconds!\n");
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <Main_Setup+0x244>)
 80017ec:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <Main_Setup+0x284>)
 80017ee:	4615      	mov	r5, r2
 80017f0:	469c      	mov	ip, r3
 80017f2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80017f6:	4664      	mov	r4, ip
 80017f8:	462e      	mov	r6, r5
 80017fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017fc:	6020      	str	r0, [r4, #0]
 80017fe:	6061      	str	r1, [r4, #4]
 8001800:	60a2      	str	r2, [r4, #8]
 8001802:	60e3      	str	r3, [r4, #12]
 8001804:	3510      	adds	r5, #16
 8001806:	f10c 0c10 	add.w	ip, ip, #16
 800180a:	4575      	cmp	r5, lr
 800180c:	d1f3      	bne.n	80017f6 <Main_Setup+0x1c2>
 800180e:	4664      	mov	r4, ip
 8001810:	462b      	mov	r3, r5
 8001812:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001814:	6020      	str	r0, [r4, #0]
 8001816:	6061      	str	r1, [r4, #4]
 8001818:	60a2      	str	r2, [r4, #8]
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	789b      	ldrb	r3, [r3, #2]
 800181e:	81a2      	strh	r2, [r4, #12]
 8001820:	73a3      	strb	r3, [r4, #14]
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001822:	2364      	movs	r3, #100	; 0x64
 8001824:	2265      	movs	r2, #101	; 0x65
 8001826:	4914      	ldr	r1, [pc, #80]	; (8001878 <Main_Setup+0x244>)
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <Main_Setup+0x250>)
 800182a:	f006 fe59 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 10000 );
 800182e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001832:	f001 ff75 	bl	8003720 <HAL_Delay>
    Check_Receiver_Inputs( 4 );			//	Move the yaw stick to simulate nose right and back to center within 10 seconds
 8001836:	2004      	movs	r0, #4
 8001838:	f000 ff00 	bl	800263c <Check_Receiver_Inputs>


    sprintf(uartTX, "                                                                                                    ");
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <Main_Setup+0x244>)
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <Main_Setup+0x248>)
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	2365      	movs	r3, #101	; 0x65
 8001846:	461a      	mov	r2, r3
 8001848:	f007 fc32 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nTaking multiple gyro data samples (calibration) during ~8 seconds!\n");
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <Main_Setup+0x244>)
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <Main_Setup+0x288>)
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	2345      	movs	r3, #69	; 0x45
 8001856:	461a      	mov	r2, r3
 8001858:	f007 fc2a 	bl	80090b0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	2265      	movs	r2, #101	; 0x65
 8001860:	4905      	ldr	r1, [pc, #20]	; (8001878 <Main_Setup+0x244>)
 8001862:	4808      	ldr	r0, [pc, #32]	; (8001884 <Main_Setup+0x250>)
 8001864:	f006 fe3c 	bl	80084e0 <HAL_UART_Transmit>
    HAL_Delay( 5000 );
 8001868:	f241 3088 	movw	r0, #5000	; 0x1388
 800186c:	f001 ff58 	bl	8003720 <HAL_Delay>
	//Let's take multiple gyro data samples so we can determine the average gyro offset (calibration).
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <Main_Setup+0x28c>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e04d      	b.n	8001914 <Main_Setup+0x2e0>
 8001878:	200002a4 	.word	0x200002a4
 800187c:	08009190 	.word	0x08009190
 8001880:	080091f8 	.word	0x080091f8
 8001884:	200001f8 	.word	0x200001f8
 8001888:	2000038c 	.word	0x2000038c
 800188c:	2000035c 	.word	0x2000035c
 8001890:	20000380 	.word	0x20000380
 8001894:	20000328 	.word	0x20000328
 8001898:	2000009c 	.word	0x2000009c
 800189c:	2000034c 	.word	0x2000034c
 80018a0:	20000388 	.word	0x20000388
 80018a4:	20000314 	.word	0x20000314
 80018a8:	08009234 	.word	0x08009234
 80018ac:	08009284 	.word	0x08009284
 80018b0:	080092c4 	.word	0x080092c4
 80018b4:	08009308 	.word	0x08009308
 80018b8:	08009348 	.word	0x08009348
 80018bc:	08009388 	.word	0x08009388
 80018c0:	2000002c 	.word	0x2000002c
	{              													//Take 2000 readings for calibration.
		Setup_Gyro_Signalen();                          	//Read the gyro output.
 80018c4:	f000 fb9e 	bl	8002004 <Setup_Gyro_Signalen>

		gyro_roll_cal += gyro_roll;                               	//Ad roll value to gyro_roll_cal.
 80018c8:	4baa      	ldr	r3, [pc, #680]	; (8001b74 <Main_Setup+0x540>)
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	4baa      	ldr	r3, [pc, #680]	; (8001b78 <Main_Setup+0x544>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	4ba6      	ldr	r3, [pc, #664]	; (8001b74 <Main_Setup+0x540>)
 80018da:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch_cal += gyro_pitch;                              	//Ad pitch value to gyro_pitch_cal.
 80018de:	4ba7      	ldr	r3, [pc, #668]	; (8001b7c <Main_Setup+0x548>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	4ba6      	ldr	r3, [pc, #664]	; (8001b80 <Main_Setup+0x54c>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <Main_Setup+0x548>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw_cal += gyro_yaw;                                  	//Ad yaw value to gyro_yaw_cal.
 80018f4:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <Main_Setup+0x550>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4ba3      	ldr	r3, [pc, #652]	; (8001b88 <Main_Setup+0x554>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	4b9f      	ldr	r3, [pc, #636]	; (8001b84 <Main_Setup+0x550>)
 8001906:	edc3 7a00 	vstr	s15, [r3]
	for ( cal_int = 0; cal_int < 2000 ; cal_int++ )
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <Main_Setup+0x558>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	4a9e      	ldr	r2, [pc, #632]	; (8001b8c <Main_Setup+0x558>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <Main_Setup+0x558>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800191c:	dbd2      	blt.n	80018c4 <Main_Setup+0x290>
	}

	//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
	gyro_roll_cal /= 2000;                                       //Divide the roll total by 2000.
 800191e:	4b95      	ldr	r3, [pc, #596]	; (8001b74 <Main_Setup+0x540>)
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8001b90 <Main_Setup+0x55c>
 8001928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192c:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <Main_Setup+0x540>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch_cal /= 2000;                                      //Divide the pitch total by 2000.
 8001932:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <Main_Setup+0x548>)
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001b90 <Main_Setup+0x55c>
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <Main_Setup+0x548>)
 8001942:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw_cal /= 2000;                                        //Divide the yaw total by 2000.
 8001946:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <Main_Setup+0x550>)
 8001948:	ed93 7a00 	vldr	s14, [r3]
 800194c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8001b90 <Main_Setup+0x55c>
 8001950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001954:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <Main_Setup+0x550>)
 8001956:	edc3 7a00 	vstr	s15, [r3]


    sprintf(uartTX, "                                                                                                    ");
 800195a:	4a8e      	ldr	r2, [pc, #568]	; (8001b94 <Main_Setup+0x560>)
 800195c:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <Main_Setup+0x564>)
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	2365      	movs	r3, #101	; 0x65
 8001964:	461a      	mov	r2, r3
 8001966:	f007 fba3 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nLift the left side of the quadcopter to a 45 degree angle within 5 seconds!\n");
 800196a:	4a8a      	ldr	r2, [pc, #552]	; (8001b94 <Main_Setup+0x560>)
 800196c:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <Main_Setup+0x568>)
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	234e      	movs	r3, #78	; 0x4e
 8001974:	461a      	mov	r2, r3
 8001976:	f007 fb9b 	bl	80090b0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 800197a:	2364      	movs	r3, #100	; 0x64
 800197c:	2265      	movs	r2, #101	; 0x65
 800197e:	4985      	ldr	r1, [pc, #532]	; (8001b94 <Main_Setup+0x560>)
 8001980:	4887      	ldr	r0, [pc, #540]	; (8001ba0 <Main_Setup+0x56c>)
 8001982:	f006 fdad 	bl	80084e0 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 8001986:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800198a:	f001 fec9 	bl	8003720 <HAL_Delay>
	Check_Gyro_Axes( 1 );		//	Lift the left side of the quadcopter to a 45 degree angle within 10 seconds
 800198e:	2001      	movs	r0, #1
 8001990:	f000 fb96 	bl	80020c0 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 8001994:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <Main_Setup+0x560>)
 8001996:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <Main_Setup+0x564>)
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	2365      	movs	r3, #101	; 0x65
 800199e:	461a      	mov	r2, r3
 80019a0:	f007 fb86 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nLift the nose of the quadcopter to a 45 degree angle within 5 seconds!\n");
 80019a4:	4a7b      	ldr	r2, [pc, #492]	; (8001b94 <Main_Setup+0x560>)
 80019a6:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <Main_Setup+0x570>)
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	2349      	movs	r3, #73	; 0x49
 80019ae:	461a      	mov	r2, r3
 80019b0:	f007 fb7e 	bl	80090b0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80019b4:	2364      	movs	r3, #100	; 0x64
 80019b6:	2265      	movs	r2, #101	; 0x65
 80019b8:	4976      	ldr	r1, [pc, #472]	; (8001b94 <Main_Setup+0x560>)
 80019ba:	4879      	ldr	r0, [pc, #484]	; (8001ba0 <Main_Setup+0x56c>)
 80019bc:	f006 fd90 	bl	80084e0 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 80019c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019c4:	f001 feac 	bl	8003720 <HAL_Delay>
	Check_Gyro_Axes( 2 );		//	Lift the nose of the quadcopter to a 45 degree angle within 10 seconds
 80019c8:	2002      	movs	r0, #2
 80019ca:	f000 fb79 	bl	80020c0 <Check_Gyro_Axes>

    sprintf(uartTX, "                                                                                                    ");
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <Main_Setup+0x560>)
 80019d0:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <Main_Setup+0x564>)
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	2365      	movs	r3, #101	; 0x65
 80019d8:	461a      	mov	r2, r3
 80019da:	f007 fb69 	bl	80090b0 <memcpy>
    sprintf(uartTX, "\nRotate the nose of the quadcopter 45 degree to the right within 5 seconds!\n");
 80019de:	4a6d      	ldr	r2, [pc, #436]	; (8001b94 <Main_Setup+0x560>)
 80019e0:	4b71      	ldr	r3, [pc, #452]	; (8001ba8 <Main_Setup+0x574>)
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	234d      	movs	r3, #77	; 0x4d
 80019e8:	461a      	mov	r2, r3
 80019ea:	f007 fb61 	bl	80090b0 <memcpy>
    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	2265      	movs	r2, #101	; 0x65
 80019f2:	4968      	ldr	r1, [pc, #416]	; (8001b94 <Main_Setup+0x560>)
 80019f4:	486a      	ldr	r0, [pc, #424]	; (8001ba0 <Main_Setup+0x56c>)
 80019f6:	f006 fd73 	bl	80084e0 <HAL_UART_Transmit>
	HAL_Delay( 3000 );
 80019fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019fe:	f001 fe8f 	bl	8003720 <HAL_Delay>
	Check_Gyro_Axes( 3 );		//	Rotate the nose of the quadcopter 45 degree to the right within 10 seconds
 8001a02:	2003      	movs	r0, #3
 8001a04:	f000 fb5c 	bl	80020c0 <Check_Gyro_Axes>

    eeprom_data[0]  = center_channel_1 & 0b11111111;
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <Main_Setup+0x578>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <Main_Setup+0x57c>)
 8001a10:	701a      	strb	r2, [r3, #0]
    eeprom_data[1]  = center_channel_1 >> 8;
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <Main_Setup+0x578>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	121b      	asrs	r3, r3, #8
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <Main_Setup+0x57c>)
 8001a1c:	705a      	strb	r2, [r3, #1]
    eeprom_data[2]  = center_channel_2 & 0b11111111;
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <Main_Setup+0x580>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <Main_Setup+0x57c>)
 8001a26:	709a      	strb	r2, [r3, #2]
    eeprom_data[3]  = center_channel_2 >> 8;
 8001a28:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <Main_Setup+0x580>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	121b      	asrs	r3, r3, #8
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <Main_Setup+0x57c>)
 8001a32:	70da      	strb	r2, [r3, #3]
    eeprom_data[4]  = center_channel_3 & 0b11111111;
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <Main_Setup+0x584>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <Main_Setup+0x57c>)
 8001a3c:	711a      	strb	r2, [r3, #4]
    eeprom_data[5]  = center_channel_3 >> 8;
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <Main_Setup+0x584>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	121b      	asrs	r3, r3, #8
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <Main_Setup+0x57c>)
 8001a48:	715a      	strb	r2, [r3, #5]
    eeprom_data[6]  = center_channel_4 & 0b11111111;
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <Main_Setup+0x588>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <Main_Setup+0x57c>)
 8001a52:	719a      	strb	r2, [r3, #6]
    eeprom_data[7]  = center_channel_4 >> 8;
 8001a54:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <Main_Setup+0x588>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	121b      	asrs	r3, r3, #8
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <Main_Setup+0x57c>)
 8001a5e:	71da      	strb	r2, [r3, #7]
    eeprom_data[8]  = high_channel_1 & 0b11111111;
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <Main_Setup+0x58c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <Main_Setup+0x57c>)
 8001a68:	721a      	strb	r2, [r3, #8]
    eeprom_data[9]  = high_channel_1 >> 8;
 8001a6a:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <Main_Setup+0x58c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	121b      	asrs	r3, r3, #8
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <Main_Setup+0x57c>)
 8001a74:	725a      	strb	r2, [r3, #9]
    eeprom_data[10] = high_channel_2 & 0b11111111;
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <Main_Setup+0x590>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <Main_Setup+0x57c>)
 8001a7e:	729a      	strb	r2, [r3, #10]
    eeprom_data[11] = high_channel_2 >> 8;
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <Main_Setup+0x590>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	121b      	asrs	r3, r3, #8
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <Main_Setup+0x57c>)
 8001a8a:	72da      	strb	r2, [r3, #11]
    eeprom_data[12] = high_channel_3 & 0b11111111;
 8001a8c:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <Main_Setup+0x594>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <Main_Setup+0x57c>)
 8001a94:	731a      	strb	r2, [r3, #12]
    eeprom_data[13] = high_channel_3 >> 8;
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <Main_Setup+0x594>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	121b      	asrs	r3, r3, #8
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <Main_Setup+0x57c>)
 8001aa0:	735a      	strb	r2, [r3, #13]
    eeprom_data[14] = high_channel_4 & 0b11111111;
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <Main_Setup+0x598>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <Main_Setup+0x57c>)
 8001aaa:	739a      	strb	r2, [r3, #14]
    eeprom_data[15] = high_channel_4 >> 8;
 8001aac:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <Main_Setup+0x598>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	121b      	asrs	r3, r3, #8
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <Main_Setup+0x57c>)
 8001ab6:	73da      	strb	r2, [r3, #15]
    eeprom_data[16] = low_channel_1 & 0b11111111;
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <Main_Setup+0x59c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <Main_Setup+0x57c>)
 8001ac0:	741a      	strb	r2, [r3, #16]
    eeprom_data[17] = low_channel_1 >> 8;
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <Main_Setup+0x59c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	121b      	asrs	r3, r3, #8
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <Main_Setup+0x57c>)
 8001acc:	745a      	strb	r2, [r3, #17]
    eeprom_data[18] = low_channel_2 & 0b11111111;
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <Main_Setup+0x5a0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <Main_Setup+0x57c>)
 8001ad6:	749a      	strb	r2, [r3, #18]
    eeprom_data[19] = low_channel_2 >> 8;
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <Main_Setup+0x5a0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	121b      	asrs	r3, r3, #8
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <Main_Setup+0x57c>)
 8001ae2:	74da      	strb	r2, [r3, #19]
    eeprom_data[20] = low_channel_3 & 0b11111111;
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <Main_Setup+0x5a4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <Main_Setup+0x57c>)
 8001aec:	751a      	strb	r2, [r3, #20]
    eeprom_data[21] = low_channel_3 >> 8;
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <Main_Setup+0x5a4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	121b      	asrs	r3, r3, #8
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <Main_Setup+0x57c>)
 8001af8:	755a      	strb	r2, [r3, #21]
    eeprom_data[22] = low_channel_4 & 0b11111111;
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <Main_Setup+0x5a8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <Main_Setup+0x57c>)
 8001b02:	759a      	strb	r2, [r3, #22]
    eeprom_data[23] = low_channel_4 >> 8;
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <Main_Setup+0x5a8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	121b      	asrs	r3, r3, #8
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <Main_Setup+0x57c>)
 8001b0e:	75da      	strb	r2, [r3, #23]
    eeprom_data[24] = channel_1_assign;
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <Main_Setup+0x5ac>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <Main_Setup+0x57c>)
 8001b16:	761a      	strb	r2, [r3, #24]
    eeprom_data[25] = channel_2_assign;
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <Main_Setup+0x5b0>)
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <Main_Setup+0x57c>)
 8001b1e:	765a      	strb	r2, [r3, #25]
    eeprom_data[26] = channel_3_assign;
 8001b20:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <Main_Setup+0x5b4>)
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <Main_Setup+0x57c>)
 8001b26:	769a      	strb	r2, [r3, #26]
    eeprom_data[27] = channel_4_assign;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <Main_Setup+0x5b8>)
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <Main_Setup+0x57c>)
 8001b2e:	76da      	strb	r2, [r3, #27]
    eeprom_data[28] = roll_axis;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <Main_Setup+0x5bc>)
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <Main_Setup+0x57c>)
 8001b36:	771a      	strb	r2, [r3, #28]
    eeprom_data[29] = pitch_axis;
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <Main_Setup+0x5c0>)
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <Main_Setup+0x57c>)
 8001b3e:	775a      	strb	r2, [r3, #29]
    eeprom_data[30] = yaw_axis;
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <Main_Setup+0x5c4>)
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <Main_Setup+0x57c>)
 8001b46:	779a      	strb	r2, [r3, #30]
	eeprom_data[31] = 92;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <Main_Setup+0x57c>)
 8001b4a:	225c      	movs	r2, #92	; 0x5c
 8001b4c:	77da      	strb	r2, [r3, #31]


	if( eeprom_data[31] == 92 && eeprom_data[28] == 1 && eeprom_data[29] == 130 && eeprom_data[30] == 131 )
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <Main_Setup+0x57c>)
 8001b50:	7fdb      	ldrb	r3, [r3, #31]
 8001b52:	2b5c      	cmp	r3, #92	; 0x5c
 8001b54:	f040 8246 	bne.w	8001fe4 <Main_Setup+0x9b0>
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <Main_Setup+0x57c>)
 8001b5a:	7f1b      	ldrb	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	f040 8241 	bne.w	8001fe4 <Main_Setup+0x9b0>
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <Main_Setup+0x57c>)
 8001b64:	7f5b      	ldrb	r3, [r3, #29]
 8001b66:	2b82      	cmp	r3, #130	; 0x82
 8001b68:	f040 823c 	bne.w	8001fe4 <Main_Setup+0x9b0>
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <Main_Setup+0x57c>)
 8001b6e:	7f9b      	ldrb	r3, [r3, #30]
 8001b70:	2b83      	cmp	r3, #131	; 0x83
 8001b72:	e043      	b.n	8001bfc <Main_Setup+0x5c8>
 8001b74:	2000030c 	.word	0x2000030c
 8001b78:	20000390 	.word	0x20000390
 8001b7c:	20000338 	.word	0x20000338
 8001b80:	20000370 	.word	0x20000370
 8001b84:	20000318 	.word	0x20000318
 8001b88:	20000378 	.word	0x20000378
 8001b8c:	2000002c 	.word	0x2000002c
 8001b90:	44fa0000 	.word	0x44fa0000
 8001b94:	200002a4 	.word	0x200002a4
 8001b98:	08009190 	.word	0x08009190
 8001b9c:	080093d0 	.word	0x080093d0
 8001ba0:	200001f8 	.word	0x200001f8
 8001ba4:	08009420 	.word	0x08009420
 8001ba8:	0800946c 	.word	0x0800946c
 8001bac:	2000035c 	.word	0x2000035c
 8001bb0:	2000005c 	.word	0x2000005c
 8001bb4:	20000328 	.word	0x20000328
 8001bb8:	2000034c 	.word	0x2000034c
 8001bbc:	20000314 	.word	0x20000314
 8001bc0:	2000032c 	.word	0x2000032c
 8001bc4:	20000364 	.word	0x20000364
 8001bc8:	20000340 	.word	0x20000340
 8001bcc:	20000354 	.word	0x20000354
 8001bd0:	20000348 	.word	0x20000348
 8001bd4:	20000330 	.word	0x20000330
 8001bd8:	20000310 	.word	0x20000310
 8001bdc:	20000358 	.word	0x20000358
 8001be0:	20000351 	.word	0x20000351
 8001be4:	20000335 	.word	0x20000335
 8001be8:	20000344 	.word	0x20000344
 8001bec:	20000350 	.word	0x20000350
 8001bf0:	20000361 	.word	0x20000361
 8001bf4:	20000360 	.word	0x20000360
 8001bf8:	20000334 	.word	0x20000334
 8001bfc:	f040 81f2 	bne.w	8001fe4 <Main_Setup+0x9b0>
	{
	    sprintf(uartTX, "                                                                                                    ");
 8001c00:	4aa9      	ldr	r2, [pc, #676]	; (8001ea8 <Main_Setup+0x874>)
 8001c02:	4baa      	ldr	r3, [pc, #680]	; (8001eac <Main_Setup+0x878>)
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	2365      	movs	r3, #101	; 0x65
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f007 fa50 	bl	80090b0 <memcpy>
	    sprintf(uartTX, "\nValues look good! Saving data to the flash.....!\n");
 8001c10:	4ba5      	ldr	r3, [pc, #660]	; (8001ea8 <Main_Setup+0x874>)
 8001c12:	4aa7      	ldr	r2, [pc, #668]	; (8001eb0 <Main_Setup+0x87c>)
 8001c14:	4614      	mov	r4, r2
 8001c16:	469c      	mov	ip, r3
 8001c18:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c1c:	4665      	mov	r5, ip
 8001c1e:	4626      	mov	r6, r4
 8001c20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c22:	6028      	str	r0, [r5, #0]
 8001c24:	6069      	str	r1, [r5, #4]
 8001c26:	60aa      	str	r2, [r5, #8]
 8001c28:	60eb      	str	r3, [r5, #12]
 8001c2a:	3410      	adds	r4, #16
 8001c2c:	f10c 0c10 	add.w	ip, ip, #16
 8001c30:	4574      	cmp	r4, lr
 8001c32:	d1f3      	bne.n	8001c1c <Main_Setup+0x5e8>
 8001c34:	4663      	mov	r3, ip
 8001c36:	4622      	mov	r2, r4
 8001c38:	8811      	ldrh	r1, [r2, #0]
 8001c3a:	7892      	ldrb	r2, [r2, #2]
 8001c3c:	8019      	strh	r1, [r3, #0]
 8001c3e:	709a      	strb	r2, [r3, #2]
	    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	2265      	movs	r2, #101	; 0x65
 8001c44:	4998      	ldr	r1, [pc, #608]	; (8001ea8 <Main_Setup+0x874>)
 8001c46:	489b      	ldr	r0, [pc, #620]	; (8001eb4 <Main_Setup+0x880>)
 8001c48:	f006 fc4a 	bl	80084e0 <HAL_UART_Transmit>


		Flash_ErasePage( 0x0803F800 );
 8001c4c:	489a      	ldr	r0, [pc, #616]	; (8001eb8 <Main_Setup+0x884>)
 8001c4e:	f7fe ff8b 	bl	8000b68 <Flash_ErasePage>
																				// EEPROM Array to Flash
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  0, &eeprom_data[0]);
 8001c52:	4b9a      	ldr	r3, [pc, #616]	; (8001ebc <Main_Setup+0x888>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	4998      	ldr	r1, [pc, #608]	; (8001eb8 <Main_Setup+0x884>)
 8001c58:	207f      	movs	r0, #127	; 0x7f
 8001c5a:	f7fe ff94 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  1, &eeprom_data[1]);
 8001c5e:	4b98      	ldr	r3, [pc, #608]	; (8001ec0 <Main_Setup+0x88c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	4995      	ldr	r1, [pc, #596]	; (8001eb8 <Main_Setup+0x884>)
 8001c64:	207f      	movs	r0, #127	; 0x7f
 8001c66:	f7fe ff8e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  2, &eeprom_data[2]);
 8001c6a:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <Main_Setup+0x890>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4992      	ldr	r1, [pc, #584]	; (8001eb8 <Main_Setup+0x884>)
 8001c70:	207f      	movs	r0, #127	; 0x7f
 8001c72:	f7fe ff88 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  3, &eeprom_data[3]);
 8001c76:	4b94      	ldr	r3, [pc, #592]	; (8001ec8 <Main_Setup+0x894>)
 8001c78:	2203      	movs	r2, #3
 8001c7a:	498f      	ldr	r1, [pc, #572]	; (8001eb8 <Main_Setup+0x884>)
 8001c7c:	207f      	movs	r0, #127	; 0x7f
 8001c7e:	f7fe ff82 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  4, &eeprom_data[4]);
 8001c82:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <Main_Setup+0x898>)
 8001c84:	2204      	movs	r2, #4
 8001c86:	498c      	ldr	r1, [pc, #560]	; (8001eb8 <Main_Setup+0x884>)
 8001c88:	207f      	movs	r0, #127	; 0x7f
 8001c8a:	f7fe ff7c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  5, &eeprom_data[5]);
 8001c8e:	4b90      	ldr	r3, [pc, #576]	; (8001ed0 <Main_Setup+0x89c>)
 8001c90:	2205      	movs	r2, #5
 8001c92:	4989      	ldr	r1, [pc, #548]	; (8001eb8 <Main_Setup+0x884>)
 8001c94:	207f      	movs	r0, #127	; 0x7f
 8001c96:	f7fe ff76 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  6, &eeprom_data[6]);
 8001c9a:	4b8e      	ldr	r3, [pc, #568]	; (8001ed4 <Main_Setup+0x8a0>)
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	4986      	ldr	r1, [pc, #536]	; (8001eb8 <Main_Setup+0x884>)
 8001ca0:	207f      	movs	r0, #127	; 0x7f
 8001ca2:	f7fe ff70 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  7, &eeprom_data[7]);
 8001ca6:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <Main_Setup+0x8a4>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	4983      	ldr	r1, [pc, #524]	; (8001eb8 <Main_Setup+0x884>)
 8001cac:	207f      	movs	r0, #127	; 0x7f
 8001cae:	f7fe ff6a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  8, &eeprom_data[8]);
 8001cb2:	4b8a      	ldr	r3, [pc, #552]	; (8001edc <Main_Setup+0x8a8>)
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4980      	ldr	r1, [pc, #512]	; (8001eb8 <Main_Setup+0x884>)
 8001cb8:	207f      	movs	r0, #127	; 0x7f
 8001cba:	f7fe ff64 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800,  9, &eeprom_data[9]);
 8001cbe:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <Main_Setup+0x8ac>)
 8001cc0:	2209      	movs	r2, #9
 8001cc2:	497d      	ldr	r1, [pc, #500]	; (8001eb8 <Main_Setup+0x884>)
 8001cc4:	207f      	movs	r0, #127	; 0x7f
 8001cc6:	f7fe ff5e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 10, &eeprom_data[10]);
 8001cca:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <Main_Setup+0x8b0>)
 8001ccc:	220a      	movs	r2, #10
 8001cce:	497a      	ldr	r1, [pc, #488]	; (8001eb8 <Main_Setup+0x884>)
 8001cd0:	207f      	movs	r0, #127	; 0x7f
 8001cd2:	f7fe ff58 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 11, &eeprom_data[11]);
 8001cd6:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <Main_Setup+0x8b4>)
 8001cd8:	220b      	movs	r2, #11
 8001cda:	4977      	ldr	r1, [pc, #476]	; (8001eb8 <Main_Setup+0x884>)
 8001cdc:	207f      	movs	r0, #127	; 0x7f
 8001cde:	f7fe ff52 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 12, &eeprom_data[12]);
 8001ce2:	4b82      	ldr	r3, [pc, #520]	; (8001eec <Main_Setup+0x8b8>)
 8001ce4:	220c      	movs	r2, #12
 8001ce6:	4974      	ldr	r1, [pc, #464]	; (8001eb8 <Main_Setup+0x884>)
 8001ce8:	207f      	movs	r0, #127	; 0x7f
 8001cea:	f7fe ff4c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 13, &eeprom_data[13]);
 8001cee:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <Main_Setup+0x8bc>)
 8001cf0:	220d      	movs	r2, #13
 8001cf2:	4971      	ldr	r1, [pc, #452]	; (8001eb8 <Main_Setup+0x884>)
 8001cf4:	207f      	movs	r0, #127	; 0x7f
 8001cf6:	f7fe ff46 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 14, &eeprom_data[14]);
 8001cfa:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <Main_Setup+0x8c0>)
 8001cfc:	220e      	movs	r2, #14
 8001cfe:	496e      	ldr	r1, [pc, #440]	; (8001eb8 <Main_Setup+0x884>)
 8001d00:	207f      	movs	r0, #127	; 0x7f
 8001d02:	f7fe ff40 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 15, &eeprom_data[15]);
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <Main_Setup+0x8c4>)
 8001d08:	220f      	movs	r2, #15
 8001d0a:	496b      	ldr	r1, [pc, #428]	; (8001eb8 <Main_Setup+0x884>)
 8001d0c:	207f      	movs	r0, #127	; 0x7f
 8001d0e:	f7fe ff3a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 16, &eeprom_data[16]);
 8001d12:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <Main_Setup+0x8c8>)
 8001d14:	2210      	movs	r2, #16
 8001d16:	4968      	ldr	r1, [pc, #416]	; (8001eb8 <Main_Setup+0x884>)
 8001d18:	207f      	movs	r0, #127	; 0x7f
 8001d1a:	f7fe ff34 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 17, &eeprom_data[17]);
 8001d1e:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <Main_Setup+0x8cc>)
 8001d20:	2211      	movs	r2, #17
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <Main_Setup+0x884>)
 8001d24:	207f      	movs	r0, #127	; 0x7f
 8001d26:	f7fe ff2e 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 18, &eeprom_data[18]);
 8001d2a:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <Main_Setup+0x8d0>)
 8001d2c:	2212      	movs	r2, #18
 8001d2e:	4962      	ldr	r1, [pc, #392]	; (8001eb8 <Main_Setup+0x884>)
 8001d30:	207f      	movs	r0, #127	; 0x7f
 8001d32:	f7fe ff28 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 19, &eeprom_data[19]);
 8001d36:	4b74      	ldr	r3, [pc, #464]	; (8001f08 <Main_Setup+0x8d4>)
 8001d38:	2213      	movs	r2, #19
 8001d3a:	495f      	ldr	r1, [pc, #380]	; (8001eb8 <Main_Setup+0x884>)
 8001d3c:	207f      	movs	r0, #127	; 0x7f
 8001d3e:	f7fe ff22 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 20, &eeprom_data[20]);
 8001d42:	4b72      	ldr	r3, [pc, #456]	; (8001f0c <Main_Setup+0x8d8>)
 8001d44:	2214      	movs	r2, #20
 8001d46:	495c      	ldr	r1, [pc, #368]	; (8001eb8 <Main_Setup+0x884>)
 8001d48:	207f      	movs	r0, #127	; 0x7f
 8001d4a:	f7fe ff1c 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 21, &eeprom_data[21]);
 8001d4e:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <Main_Setup+0x8dc>)
 8001d50:	2215      	movs	r2, #21
 8001d52:	4959      	ldr	r1, [pc, #356]	; (8001eb8 <Main_Setup+0x884>)
 8001d54:	207f      	movs	r0, #127	; 0x7f
 8001d56:	f7fe ff16 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 22, &eeprom_data[22]);
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <Main_Setup+0x8e0>)
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	4956      	ldr	r1, [pc, #344]	; (8001eb8 <Main_Setup+0x884>)
 8001d60:	207f      	movs	r0, #127	; 0x7f
 8001d62:	f7fe ff10 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 23, &eeprom_data[23]);
 8001d66:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <Main_Setup+0x8e4>)
 8001d68:	2217      	movs	r2, #23
 8001d6a:	4953      	ldr	r1, [pc, #332]	; (8001eb8 <Main_Setup+0x884>)
 8001d6c:	207f      	movs	r0, #127	; 0x7f
 8001d6e:	f7fe ff0a 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 24, &eeprom_data[24]);
 8001d72:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <Main_Setup+0x8e8>)
 8001d74:	2218      	movs	r2, #24
 8001d76:	4950      	ldr	r1, [pc, #320]	; (8001eb8 <Main_Setup+0x884>)
 8001d78:	207f      	movs	r0, #127	; 0x7f
 8001d7a:	f7fe ff04 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 25, &eeprom_data[25]);
 8001d7e:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <Main_Setup+0x8ec>)
 8001d80:	2219      	movs	r2, #25
 8001d82:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <Main_Setup+0x884>)
 8001d84:	207f      	movs	r0, #127	; 0x7f
 8001d86:	f7fe fefe 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 26, &eeprom_data[26]);
 8001d8a:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <Main_Setup+0x8f0>)
 8001d8c:	221a      	movs	r2, #26
 8001d8e:	494a      	ldr	r1, [pc, #296]	; (8001eb8 <Main_Setup+0x884>)
 8001d90:	207f      	movs	r0, #127	; 0x7f
 8001d92:	f7fe fef8 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 27, &eeprom_data[27]);
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <Main_Setup+0x8f4>)
 8001d98:	221b      	movs	r2, #27
 8001d9a:	4947      	ldr	r1, [pc, #284]	; (8001eb8 <Main_Setup+0x884>)
 8001d9c:	207f      	movs	r0, #127	; 0x7f
 8001d9e:	f7fe fef2 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 28, &eeprom_data[28]);
 8001da2:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <Main_Setup+0x8f8>)
 8001da4:	221c      	movs	r2, #28
 8001da6:	4944      	ldr	r1, [pc, #272]	; (8001eb8 <Main_Setup+0x884>)
 8001da8:	207f      	movs	r0, #127	; 0x7f
 8001daa:	f7fe feec 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 29, &eeprom_data[29]);
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <Main_Setup+0x8fc>)
 8001db0:	221d      	movs	r2, #29
 8001db2:	4941      	ldr	r1, [pc, #260]	; (8001eb8 <Main_Setup+0x884>)
 8001db4:	207f      	movs	r0, #127	; 0x7f
 8001db6:	f7fe fee6 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 30, &eeprom_data[30]);
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <Main_Setup+0x900>)
 8001dbc:	221e      	movs	r2, #30
 8001dbe:	493e      	ldr	r1, [pc, #248]	; (8001eb8 <Main_Setup+0x884>)
 8001dc0:	207f      	movs	r0, #127	; 0x7f
 8001dc2:	f7fe fee0 	bl	8000b86 <Flash_EEPROM_Data_Write>
		Flash_EEPROM_Data_Write( 127, 0x0803F800, 31, &eeprom_data[31]);
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <Main_Setup+0x904>)
 8001dc8:	221f      	movs	r2, #31
 8001dca:	493b      	ldr	r1, [pc, #236]	; (8001eb8 <Main_Setup+0x884>)
 8001dcc:	207f      	movs	r0, #127	; 0x7f
 8001dce:	f7fe feda 	bl	8000b86 <Flash_EEPROM_Data_Write>


		Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data_test[0]);
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <Main_Setup+0x908>)
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	4938      	ldr	r1, [pc, #224]	; (8001eb8 <Main_Setup+0x884>)
 8001dd8:	207f      	movs	r0, #127	; 0x7f
 8001dda:	f7fe ff2a 	bl	8000c32 <Flash_EEPROM_Data_Read>

		if( eeprom_data_test[0] == 92 && eeprom_data[28] == 1 && eeprom_data[29] == 130 && eeprom_data[30] == 131 )
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <Main_Setup+0x908>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b5c      	cmp	r3, #92	; 0x5c
 8001de4:	d122      	bne.n	8001e2c <Main_Setup+0x7f8>
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <Main_Setup+0x888>)
 8001de8:	7f1b      	ldrb	r3, [r3, #28]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d11e      	bne.n	8001e2c <Main_Setup+0x7f8>
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <Main_Setup+0x888>)
 8001df0:	7f5b      	ldrb	r3, [r3, #29]
 8001df2:	2b82      	cmp	r3, #130	; 0x82
 8001df4:	d11a      	bne.n	8001e2c <Main_Setup+0x7f8>
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <Main_Setup+0x888>)
 8001df8:	7f9b      	ldrb	r3, [r3, #30]
 8001dfa:	2b83      	cmp	r3, #131	; 0x83
 8001dfc:	d116      	bne.n	8001e2c <Main_Setup+0x7f8>
		{
			sprintf(uartTX, "                                                                                                    ");
 8001dfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <Main_Setup+0x874>)
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <Main_Setup+0x878>)
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	2365      	movs	r3, #101	; 0x65
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f007 f951 	bl	80090b0 <memcpy>
			sprintf(uartTX, "\nSetup is done! Everything is looks OKAY! All data is saved to the flash! Reset!\n");
 8001e0e:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <Main_Setup+0x874>)
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <Main_Setup+0x90c>)
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	2352      	movs	r3, #82	; 0x52
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f007 f949 	bl	80090b0 <memcpy>
			HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e1e:	2364      	movs	r3, #100	; 0x64
 8001e20:	2265      	movs	r2, #101	; 0x65
 8001e22:	4921      	ldr	r1, [pc, #132]	; (8001ea8 <Main_Setup+0x874>)
 8001e24:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <Main_Setup+0x880>)
 8001e26:	f006 fb5b 	bl	80084e0 <HAL_UART_Transmit>
 8001e2a:	e0db      	b.n	8001fe4 <Main_Setup+0x9b0>
		}
		else if( eeprom_data_test[0] == 92 && eeprom_data[28] != 1 && eeprom_data[29] != 130 && eeprom_data[30] != 131 )
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <Main_Setup+0x908>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b5c      	cmp	r3, #92	; 0x5c
 8001e32:	f040 8089 	bne.w	8001f48 <Main_Setup+0x914>
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <Main_Setup+0x888>)
 8001e38:	7f1b      	ldrb	r3, [r3, #28]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	f000 8084 	beq.w	8001f48 <Main_Setup+0x914>
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <Main_Setup+0x888>)
 8001e42:	7f5b      	ldrb	r3, [r3, #29]
 8001e44:	2b82      	cmp	r3, #130	; 0x82
 8001e46:	d07f      	beq.n	8001f48 <Main_Setup+0x914>
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <Main_Setup+0x888>)
 8001e4a:	7f9b      	ldrb	r3, [r3, #30]
 8001e4c:	2b83      	cmp	r3, #131	; 0x83
 8001e4e:	d07b      	beq.n	8001f48 <Main_Setup+0x914>
		{
		    sprintf(uartTX, "                                                                                                    ");
 8001e50:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <Main_Setup+0x874>)
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <Main_Setup+0x878>)
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	2365      	movs	r3, #101	; 0x65
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f007 f928 	bl	80090b0 <memcpy>
		    sprintf(uartTX, "\nSetup is NOT done! Gyro axises are useless! Re-do the setup!\n");
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <Main_Setup+0x874>)
 8001e62:	4a38      	ldr	r2, [pc, #224]	; (8001f44 <Main_Setup+0x910>)
 8001e64:	4615      	mov	r5, r2
 8001e66:	469c      	mov	ip, r3
 8001e68:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001e6c:	4664      	mov	r4, ip
 8001e6e:	462e      	mov	r6, r5
 8001e70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e72:	6020      	str	r0, [r4, #0]
 8001e74:	6061      	str	r1, [r4, #4]
 8001e76:	60a2      	str	r2, [r4, #8]
 8001e78:	60e3      	str	r3, [r4, #12]
 8001e7a:	3510      	adds	r5, #16
 8001e7c:	f10c 0c10 	add.w	ip, ip, #16
 8001e80:	4575      	cmp	r5, lr
 8001e82:	d1f3      	bne.n	8001e6c <Main_Setup+0x838>
 8001e84:	4664      	mov	r4, ip
 8001e86:	462b      	mov	r3, r5
 8001e88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e8a:	6020      	str	r0, [r4, #0]
 8001e8c:	6061      	str	r1, [r4, #4]
 8001e8e:	60a2      	str	r2, [r4, #8]
 8001e90:	881a      	ldrh	r2, [r3, #0]
 8001e92:	789b      	ldrb	r3, [r3, #2]
 8001e94:	81a2      	strh	r2, [r4, #12]
 8001e96:	73a3      	strb	r3, [r4, #14]
		    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	2265      	movs	r2, #101	; 0x65
 8001e9c:	4902      	ldr	r1, [pc, #8]	; (8001ea8 <Main_Setup+0x874>)
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <Main_Setup+0x880>)
 8001ea0:	f006 fb1e 	bl	80084e0 <HAL_UART_Transmit>
 8001ea4:	e09e      	b.n	8001fe4 <Main_Setup+0x9b0>
 8001ea6:	bf00      	nop
 8001ea8:	200002a4 	.word	0x200002a4
 8001eac:	08009190 	.word	0x08009190
 8001eb0:	080094bc 	.word	0x080094bc
 8001eb4:	200001f8 	.word	0x200001f8
 8001eb8:	0803f800 	.word	0x0803f800
 8001ebc:	2000005c 	.word	0x2000005c
 8001ec0:	2000005d 	.word	0x2000005d
 8001ec4:	2000005e 	.word	0x2000005e
 8001ec8:	2000005f 	.word	0x2000005f
 8001ecc:	20000060 	.word	0x20000060
 8001ed0:	20000061 	.word	0x20000061
 8001ed4:	20000062 	.word	0x20000062
 8001ed8:	20000063 	.word	0x20000063
 8001edc:	20000064 	.word	0x20000064
 8001ee0:	20000065 	.word	0x20000065
 8001ee4:	20000066 	.word	0x20000066
 8001ee8:	20000067 	.word	0x20000067
 8001eec:	20000068 	.word	0x20000068
 8001ef0:	20000069 	.word	0x20000069
 8001ef4:	2000006a 	.word	0x2000006a
 8001ef8:	2000006b 	.word	0x2000006b
 8001efc:	2000006c 	.word	0x2000006c
 8001f00:	2000006d 	.word	0x2000006d
 8001f04:	2000006e 	.word	0x2000006e
 8001f08:	2000006f 	.word	0x2000006f
 8001f0c:	20000070 	.word	0x20000070
 8001f10:	20000071 	.word	0x20000071
 8001f14:	20000072 	.word	0x20000072
 8001f18:	20000073 	.word	0x20000073
 8001f1c:	20000074 	.word	0x20000074
 8001f20:	20000075 	.word	0x20000075
 8001f24:	20000076 	.word	0x20000076
 8001f28:	20000077 	.word	0x20000077
 8001f2c:	20000078 	.word	0x20000078
 8001f30:	20000079 	.word	0x20000079
 8001f34:	2000007a 	.word	0x2000007a
 8001f38:	2000007b 	.word	0x2000007b
 8001f3c:	2000031c 	.word	0x2000031c
 8001f40:	080094f0 	.word	0x080094f0
 8001f44:	08009544 	.word	0x08009544

//			Flash_ErasePage( 0x0803F800 );
		}
		else if( eeprom_data_test[0] != 92 && eeprom_data[28] == 1 && eeprom_data[29] == 130 && eeprom_data[30] == 131 )
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <Main_Setup+0x9b4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8001f4e:	d022      	beq.n	8001f96 <Main_Setup+0x962>
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <Main_Setup+0x9b8>)
 8001f52:	7f1b      	ldrb	r3, [r3, #28]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d11e      	bne.n	8001f96 <Main_Setup+0x962>
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <Main_Setup+0x9b8>)
 8001f5a:	7f5b      	ldrb	r3, [r3, #29]
 8001f5c:	2b82      	cmp	r3, #130	; 0x82
 8001f5e:	d11a      	bne.n	8001f96 <Main_Setup+0x962>
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <Main_Setup+0x9b8>)
 8001f62:	7f9b      	ldrb	r3, [r3, #30]
 8001f64:	2b83      	cmp	r3, #131	; 0x83
 8001f66:	d116      	bne.n	8001f96 <Main_Setup+0x962>
		{
		    sprintf(uartTX, "                                                                                                    ");
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <Main_Setup+0x9bc>)
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <Main_Setup+0x9c0>)
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2365      	movs	r3, #101	; 0x65
 8001f72:	461a      	mov	r2, r3
 8001f74:	f007 f89c 	bl	80090b0 <memcpy>
		    sprintf(uartTX, "\nSetup is NOT done! Writing and/or reading functions are useless!\n");
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <Main_Setup+0x9bc>)
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <Main_Setup+0x9c4>)
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	2343      	movs	r3, #67	; 0x43
 8001f82:	461a      	mov	r2, r3
 8001f84:	f007 f894 	bl	80090b0 <memcpy>
		    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001f88:	2364      	movs	r3, #100	; 0x64
 8001f8a:	2265      	movs	r2, #101	; 0x65
 8001f8c:	4918      	ldr	r1, [pc, #96]	; (8001ff0 <Main_Setup+0x9bc>)
 8001f8e:	481b      	ldr	r0, [pc, #108]	; (8001ffc <Main_Setup+0x9c8>)
 8001f90:	f006 faa6 	bl	80084e0 <HAL_UART_Transmit>
 8001f94:	e026      	b.n	8001fe4 <Main_Setup+0x9b0>

//			Flash_ErasePage( 0x0803F800 );
		}
		else
		{
		    sprintf(uartTX, "                                                                                                    ");
 8001f96:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <Main_Setup+0x9bc>)
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <Main_Setup+0x9c0>)
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	2365      	movs	r3, #101	; 0x65
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f007 f885 	bl	80090b0 <memcpy>
		    sprintf(uartTX, "\nSetup is NOT done! Re-do the setup!\n");
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <Main_Setup+0x9bc>)
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <Main_Setup+0x9cc>)
 8001faa:	4614      	mov	r4, r2
 8001fac:	469c      	mov	ip, r3
 8001fae:	f104 0e20 	add.w	lr, r4, #32
 8001fb2:	4665      	mov	r5, ip
 8001fb4:	4626      	mov	r6, r4
 8001fb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001fb8:	6028      	str	r0, [r5, #0]
 8001fba:	6069      	str	r1, [r5, #4]
 8001fbc:	60aa      	str	r2, [r5, #8]
 8001fbe:	60eb      	str	r3, [r5, #12]
 8001fc0:	3410      	adds	r4, #16
 8001fc2:	f10c 0c10 	add.w	ip, ip, #16
 8001fc6:	4574      	cmp	r4, lr
 8001fc8:	d1f3      	bne.n	8001fb2 <Main_Setup+0x97e>
 8001fca:	4663      	mov	r3, ip
 8001fcc:	4622      	mov	r2, r4
 8001fce:	6810      	ldr	r0, [r2, #0]
 8001fd0:	6018      	str	r0, [r3, #0]
 8001fd2:	8892      	ldrh	r2, [r2, #4]
 8001fd4:	809a      	strh	r2, [r3, #4]
		    HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	2265      	movs	r2, #101	; 0x65
 8001fda:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <Main_Setup+0x9bc>)
 8001fdc:	4807      	ldr	r0, [pc, #28]	; (8001ffc <Main_Setup+0x9c8>)
 8001fde:	f006 fa7f 	bl	80084e0 <HAL_UART_Transmit>

//			Flash_ErasePage( 0x0803F800 );
		}
	}
}
 8001fe2:	e7ff      	b.n	8001fe4 <Main_Setup+0x9b0>
 8001fe4:	bf00      	nop
 8001fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe8:	2000031c 	.word	0x2000031c
 8001fec:	2000005c 	.word	0x2000005c
 8001ff0:	200002a4 	.word	0x200002a4
 8001ff4:	08009190 	.word	0x08009190
 8001ff8:	08009584 	.word	0x08009584
 8001ffc:	200001f8 	.word	0x200001f8
 8002000:	080095c8 	.word	0x080095c8

08002004 <Setup_Gyro_Signalen>:

void Setup_Gyro_Signalen()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	L3GD20H_Read_Gyro_RAW_Outputs();
 8002008:	f7ff f892 	bl	8001130 <L3GD20H_Read_Gyro_RAW_Outputs>

	gyro_roll  = gX_Raw;
 800200c:	4b22      	ldr	r3, [pc, #136]	; (8002098 <Setup_Gyro_Signalen+0x94>)
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <Setup_Gyro_Signalen+0x98>)
 800201c:	edc3 7a00 	vstr	s15, [r3]
	gyro_pitch = gY_Raw;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <Setup_Gyro_Signalen+0x9c>)
 8002022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <Setup_Gyro_Signalen+0xa0>)
 8002030:	edc3 7a00 	vstr	s15, [r3]
	gyro_yaw   = gZ_Raw;
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <Setup_Gyro_Signalen+0xa4>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <Setup_Gyro_Signalen+0xa8>)
 8002044:	edc3 7a00 	vstr	s15, [r3]

	if(cal_int == 2000)							//Only compensate after the calibration
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <Setup_Gyro_Signalen+0xac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002050:	d120      	bne.n	8002094 <Setup_Gyro_Signalen+0x90>
	{
		gyro_roll  -= gyro_roll_cal;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <Setup_Gyro_Signalen+0x98>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <Setup_Gyro_Signalen+0xb0>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <Setup_Gyro_Signalen+0x98>)
 8002064:	edc3 7a00 	vstr	s15, [r3]
		gyro_pitch -= gyro_pitch_cal;
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <Setup_Gyro_Signalen+0xa0>)
 800206a:	ed93 7a00 	vldr	s14, [r3]
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <Setup_Gyro_Signalen+0xb4>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <Setup_Gyro_Signalen+0xa0>)
 800207a:	edc3 7a00 	vstr	s15, [r3]
		gyro_yaw   -= gyro_yaw_cal;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <Setup_Gyro_Signalen+0xa8>)
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <Setup_Gyro_Signalen+0xb8>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <Setup_Gyro_Signalen+0xa8>)
 8002090:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000386 	.word	0x20000386
 800209c:	20000390 	.word	0x20000390
 80020a0:	20000384 	.word	0x20000384
 80020a4:	20000370 	.word	0x20000370
 80020a8:	20000368 	.word	0x20000368
 80020ac:	20000378 	.word	0x20000378
 80020b0:	2000002c 	.word	0x2000002c
 80020b4:	2000030c 	.word	0x2000030c
 80020b8:	20000338 	.word	0x20000338
 80020bc:	20000318 	.word	0x20000318

080020c0 <Check_Gyro_Axes>:

void Check_Gyro_Axes( uint8_t movement )
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger_axis = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	77fb      	strb	r3, [r7, #31]
	float gyro_angle_roll, gyro_angle_pitch, gyro_angle_yaw;

	//Reset all axes
	gyro_angle_roll = 0;
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
	gyro_angle_pitch = 0;
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
	gyro_angle_yaw = 0;
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	613b      	str	r3, [r7, #16]

	Setup_Gyro_Signalen();
 80020e0:	f7ff ff90 	bl	8002004 <Setup_Gyro_Signalen>

	unsigned int i = 10000;
 80020e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80020e8:	60fb      	str	r3, [r7, #12]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80020ea:	e05b      	b.n	80021a4 <Check_Gyro_Axes+0xe4>
	{
		Setup_Gyro_Signalen();
 80020ec:	f7ff ff8a 	bl	8002004 <Setup_Gyro_Signalen>
		i--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]

		gyro_angle_roll += gyro_roll * 0.00007;              //0.00007 = 17.5 (md/s) / 250(Hz)
 80020f6:	69b8      	ldr	r0, [r7, #24]
 80020f8:	f7fe f9ca 	bl	8000490 <__aeabi_f2d>
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	4bc3      	ldr	r3, [pc, #780]	; (8002410 <Check_Gyro_Axes+0x350>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9c3 	bl	8000490 <__aeabi_f2d>
 800210a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002408 <Check_Gyro_Axes+0x348>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe fa16 	bl	8000540 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe f85a 	bl	80001d4 <__adddf3>
 8002120:	4603      	mov	r3, r0
 8002122:	460c      	mov	r4, r1
 8002124:	4618      	mov	r0, r3
 8002126:	4621      	mov	r1, r4
 8002128:	f7fe fc1c 	bl	8000964 <__aeabi_d2f>
 800212c:	4603      	mov	r3, r0
 800212e:	61bb      	str	r3, [r7, #24]
		gyro_angle_pitch += gyro_pitch * 0.00007;
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f7fe f9ad 	bl	8000490 <__aeabi_f2d>
 8002136:	4604      	mov	r4, r0
 8002138:	460d      	mov	r5, r1
 800213a:	4bb6      	ldr	r3, [pc, #728]	; (8002414 <Check_Gyro_Axes+0x354>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f9a6 	bl	8000490 <__aeabi_f2d>
 8002144:	a3b0      	add	r3, pc, #704	; (adr r3, 8002408 <Check_Gyro_Axes+0x348>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe f9f9 	bl	8000540 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f83d 	bl	80001d4 <__adddf3>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	4618      	mov	r0, r3
 8002160:	4621      	mov	r1, r4
 8002162:	f7fe fbff 	bl	8000964 <__aeabi_d2f>
 8002166:	4603      	mov	r3, r0
 8002168:	617b      	str	r3, [r7, #20]
		gyro_angle_yaw += gyro_yaw * 0.00007;
 800216a:	6938      	ldr	r0, [r7, #16]
 800216c:	f7fe f990 	bl	8000490 <__aeabi_f2d>
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
 8002174:	4ba8      	ldr	r3, [pc, #672]	; (8002418 <Check_Gyro_Axes+0x358>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f989 	bl	8000490 <__aeabi_f2d>
 800217e:	a3a2      	add	r3, pc, #648	; (adr r3, 8002408 <Check_Gyro_Axes+0x348>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe f9dc 	bl	8000540 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fe f820 	bl	80001d4 <__adddf3>
 8002194:	4603      	mov	r3, r0
 8002196:	460c      	mov	r4, r1
 8002198:	4618      	mov	r0, r3
 800219a:	4621      	mov	r1, r4
 800219c:	f7fe fbe2 	bl	8000964 <__aeabi_d2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]
	while( gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80021a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80021a8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	dd2d      	ble.n	8002212 <Check_Gyro_Axes+0x152>
 80021b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80021ba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	d524      	bpl.n	8002212 <Check_Gyro_Axes+0x152>
 80021c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80021cc:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	dd1b      	ble.n	8002212 <Check_Gyro_Axes+0x152>
 80021da:	edd7 7a05 	vldr	s15, [r7, #20]
 80021de:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	d512      	bpl.n	8002212 <Check_Gyro_Axes+0x152>
 80021ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80021f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fc:	dd09      	ble.n	8002212 <Check_Gyro_Axes+0x152>
 80021fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002202:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	f53f af6d 	bmi.w	80020ec <Check_Gyro_Axes+0x2c>
//		HAL_Delay( 4 );	 //Loop is running @ 250Hz. +/-300us is used for communication with the gyro
	}


	//Assign the moved axis to the corresponding function (pitch, roll, yaw)
	if(( gyro_angle_roll < -30 || gyro_angle_roll > 30 ) && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 8002212:	edd7 7a06 	vldr	s15, [r7, #24]
 8002216:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	d408      	bmi.n	8002236 <Check_Gyro_Axes+0x176>
 8002224:	edd7 7a06 	vldr	s15, [r7, #24]
 8002228:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800222c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	dd36      	ble.n	80022a4 <Check_Gyro_Axes+0x1e4>
 8002236:	edd7 7a05 	vldr	s15, [r7, #20]
 800223a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800223e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	dd2d      	ble.n	80022a4 <Check_Gyro_Axes+0x1e4>
 8002248:	edd7 7a05 	vldr	s15, [r7, #20]
 800224c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	d524      	bpl.n	80022a4 <Check_Gyro_Axes+0x1e4>
 800225a:	edd7 7a04 	vldr	s15, [r7, #16]
 800225e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	dd1b      	ble.n	80022a4 <Check_Gyro_Axes+0x1e4>
 800226c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002270:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d512      	bpl.n	80022a4 <Check_Gyro_Axes+0x1e4>
	{
		gyro_check_byte |= 0b00000001;
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <Check_Gyro_Axes+0x35c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b64      	ldr	r3, [pc, #400]	; (800241c <Check_Gyro_Axes+0x35c>)
 800228a:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_roll < 0 )	{	trigger_axis = 0b10000001;	}
 800228c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002298:	d502      	bpl.n	80022a0 <Check_Gyro_Axes+0x1e0>
 800229a:	2381      	movs	r3, #129	; 0x81
 800229c:	77fb      	strb	r3, [r7, #31]
 800229e:	e001      	b.n	80022a4 <Check_Gyro_Axes+0x1e4>
		else	{	trigger_axis = 0b00000001;	}
 80022a0:	2301      	movs	r3, #1
 80022a2:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_pitch < -30 || gyro_angle_pitch > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_yaw > -30 && gyro_angle_yaw < 30 )
 80022a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d408      	bmi.n	80022c8 <Check_Gyro_Axes+0x208>
 80022b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	dd36      	ble.n	8002336 <Check_Gyro_Axes+0x276>
 80022c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022cc:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	dd2d      	ble.n	8002336 <Check_Gyro_Axes+0x276>
 80022da:	edd7 7a06 	vldr	s15, [r7, #24]
 80022de:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	d524      	bpl.n	8002336 <Check_Gyro_Axes+0x276>
 80022ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80022f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	dd1b      	ble.n	8002336 <Check_Gyro_Axes+0x276>
 80022fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002302:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	d512      	bpl.n	8002336 <Check_Gyro_Axes+0x276>
	{
		gyro_check_byte |= 0b00000010;
 8002310:	4b42      	ldr	r3, [pc, #264]	; (800241c <Check_Gyro_Axes+0x35c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b40      	ldr	r3, [pc, #256]	; (800241c <Check_Gyro_Axes+0x35c>)
 800231c:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_pitch < 0 )	{	trigger_axis = 0b10000010;	}
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	d502      	bpl.n	8002332 <Check_Gyro_Axes+0x272>
 800232c:	2382      	movs	r3, #130	; 0x82
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	e001      	b.n	8002336 <Check_Gyro_Axes+0x276>
		else	{	trigger_axis = 0b00000010;	}
 8002332:	2302      	movs	r3, #2
 8002334:	77fb      	strb	r3, [r7, #31]
	}

	if(( gyro_angle_yaw < -30 || gyro_angle_yaw > 30 ) && gyro_angle_roll > -30 && gyro_angle_roll < 30 && gyro_angle_pitch > -30 && gyro_angle_pitch < 30 )
 8002336:	edd7 7a04 	vldr	s15, [r7, #16]
 800233a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 800233e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d408      	bmi.n	800235a <Check_Gyro_Axes+0x29a>
 8002348:	edd7 7a04 	vldr	s15, [r7, #16]
 800234c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	dd36      	ble.n	80023c8 <Check_Gyro_Axes+0x308>
 800235a:	edd7 7a06 	vldr	s15, [r7, #24]
 800235e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	dd2d      	ble.n	80023c8 <Check_Gyro_Axes+0x308>
 800236c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002370:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	d524      	bpl.n	80023c8 <Check_Gyro_Axes+0x308>
 800237e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002382:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	dd1b      	ble.n	80023c8 <Check_Gyro_Axes+0x308>
 8002390:	edd7 7a05 	vldr	s15, [r7, #20]
 8002394:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	d512      	bpl.n	80023c8 <Check_Gyro_Axes+0x308>
	{
		gyro_check_byte |= 0b00000100;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <Check_Gyro_Axes+0x35c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <Check_Gyro_Axes+0x35c>)
 80023ae:	701a      	strb	r2, [r3, #0]
		if( gyro_angle_yaw < 0 )	{	trigger_axis = 0b10000011;	}
 80023b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d502      	bpl.n	80023c4 <Check_Gyro_Axes+0x304>
 80023be:	2383      	movs	r3, #131	; 0x83
 80023c0:	77fb      	strb	r3, [r7, #31]
 80023c2:	e001      	b.n	80023c8 <Check_Gyro_Axes+0x308>
		else	{	trigger_axis = 0b00000011;	}
 80023c4:	2303      	movs	r3, #3
 80023c6:	77fb      	strb	r3, [r7, #31]
	}

	if( trigger_axis == 0 )
 80023c8:	7ffb      	ldrb	r3, [r7, #31]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <Check_Gyro_Axes+0x316>
	{
		error = true;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <Check_Gyro_Axes+0x360>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e005      	b.n	80023e2 <Check_Gyro_Axes+0x322>
	}

	else
	if( movement == 1 )	{	roll_axis  = trigger_axis;	}
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d102      	bne.n	80023e2 <Check_Gyro_Axes+0x322>
 80023dc:	4a11      	ldr	r2, [pc, #68]	; (8002424 <Check_Gyro_Axes+0x364>)
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	7013      	strb	r3, [r2, #0]
	if( movement == 2 )	{	pitch_axis = trigger_axis;	}
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d102      	bne.n	80023ee <Check_Gyro_Axes+0x32e>
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <Check_Gyro_Axes+0x368>)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	7013      	strb	r3, [r2, #0]
	if( movement == 3 )	{	yaw_axis   = trigger_axis;	}
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d102      	bne.n	80023fa <Check_Gyro_Axes+0x33a>
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <Check_Gyro_Axes+0x36c>)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	7013      	strb	r3, [r2, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bdb0      	pop	{r4, r5, r7, pc}
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
 8002408:	d7c6fbd2 	.word	0xd7c6fbd2
 800240c:	3f12599e 	.word	0x3f12599e
 8002410:	20000390 	.word	0x20000390
 8002414:	20000370 	.word	0x20000370
 8002418:	20000378 	.word	0x20000378
 800241c:	2000033d 	.word	0x2000033d
 8002420:	20000058 	.word	0x20000058
 8002424:	20000361 	.word	0x20000361
 8002428:	20000360 	.word	0x20000360
 800242c:	20000334 	.word	0x20000334

08002430 <Register_Min_Max>:

void Register_Min_Max( void )
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
	uint8_t zero = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
	low_channel_1 = receiver_input_channel_1;
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <Register_Min_Max+0x1c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6f      	ldr	r2, [pc, #444]	; (80025fc <Register_Min_Max+0x1cc>)
 8002440:	6013      	str	r3, [r2, #0]
	low_channel_2 = receiver_input_channel_2;
 8002442:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <Register_Min_Max+0x1d0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <Register_Min_Max+0x1d4>)
 8002448:	6013      	str	r3, [r2, #0]
	low_channel_3 = receiver_input_channel_3;
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <Register_Min_Max+0x1d8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6f      	ldr	r2, [pc, #444]	; (800260c <Register_Min_Max+0x1dc>)
 8002450:	6013      	str	r3, [r2, #0]
	low_channel_4 = receiver_input_channel_4;
 8002452:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <Register_Min_Max+0x1e0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6f      	ldr	r2, [pc, #444]	; (8002614 <Register_Min_Max+0x1e4>)
 8002458:	6013      	str	r3, [r2, #0]

	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 800245a:	e009      	b.n	8002470 <Register_Min_Max+0x40>
	{
		for(int i = 10000; i > 0; i-- )	{	}
 800245c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	e002      	b.n	800246a <Register_Min_Max+0x3a>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3b01      	subs	r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	dcf9      	bgt.n	8002464 <Register_Min_Max+0x34>
	while(receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <Register_Min_Max+0x1e8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f103 0214 	add.w	r2, r3, #20
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <Register_Min_Max+0x1c8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	dd07      	ble.n	8002490 <Register_Min_Max+0x60>
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <Register_Min_Max+0x1e8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1a3 0214 	sub.w	r2, r3, #20
 8002488:	4b5b      	ldr	r3, [pc, #364]	; (80025f8 <Register_Min_Max+0x1c8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbe5      	blt.n	800245c <Register_Min_Max+0x2c>
	}
	
	int k = 20000000;
 8002490:	4b62      	ldr	r3, [pc, #392]	; (800261c <Register_Min_Max+0x1ec>)
 8002492:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 8002494:	e0a2      	b.n	80025dc <Register_Min_Max+0x1ac>
	{
		if(	receiver_input_channel_1 < center_channel_1 + 20 && receiver_input_channel_1 > center_channel_1 - 20)	{	zero |= 0b00000001;	}
 8002496:	4b60      	ldr	r3, [pc, #384]	; (8002618 <Register_Min_Max+0x1e8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f103 0214 	add.w	r2, r3, #20
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <Register_Min_Max+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dd0b      	ble.n	80024be <Register_Min_Max+0x8e>
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <Register_Min_Max+0x1e8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1a3 0214 	sub.w	r2, r3, #20
 80024ae:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <Register_Min_Max+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	da03      	bge.n	80024be <Register_Min_Max+0x8e>
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_2 < center_channel_2 + 20 && receiver_input_channel_2 > center_channel_2 - 20)	{	zero |= 0b00000010;	}
 80024be:	4b58      	ldr	r3, [pc, #352]	; (8002620 <Register_Min_Max+0x1f0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f103 0214 	add.w	r2, r3, #20
 80024c6:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <Register_Min_Max+0x1d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dd0b      	ble.n	80024e6 <Register_Min_Max+0xb6>
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <Register_Min_Max+0x1f0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1a3 0214 	sub.w	r2, r3, #20
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <Register_Min_Max+0x1d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	da03      	bge.n	80024e6 <Register_Min_Max+0xb6>
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_3 < center_channel_3 + 20 && receiver_input_channel_3 > center_channel_3 - 20)	{	zero |= 0b00000100;	}
 80024e6:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <Register_Min_Max+0x1f4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f103 0214 	add.w	r2, r3, #20
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <Register_Min_Max+0x1d8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dd0b      	ble.n	800250e <Register_Min_Max+0xde>
 80024f6:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <Register_Min_Max+0x1f4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1a3 0214 	sub.w	r2, r3, #20
 80024fe:	4b42      	ldr	r3, [pc, #264]	; (8002608 <Register_Min_Max+0x1d8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	da03      	bge.n	800250e <Register_Min_Max+0xde>
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	73fb      	strb	r3, [r7, #15]
		if(	receiver_input_channel_4 < center_channel_4 + 20 && receiver_input_channel_4 > center_channel_4 - 20)	{	zero |= 0b00001000;	}
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <Register_Min_Max+0x1f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f103 0214 	add.w	r2, r3, #20
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <Register_Min_Max+0x1e0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	dd0b      	ble.n	8002536 <Register_Min_Max+0x106>
 800251e:	4b42      	ldr	r3, [pc, #264]	; (8002628 <Register_Min_Max+0x1f8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1a3 0214 	sub.w	r2, r3, #20
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <Register_Min_Max+0x1e0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	da03      	bge.n	8002536 <Register_Min_Max+0x106>
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	73fb      	strb	r3, [r7, #15]

		if(	receiver_input_channel_1 < low_channel_1)	{	low_channel_1 = receiver_input_channel_1;	}
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <Register_Min_Max+0x1c8>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b30      	ldr	r3, [pc, #192]	; (80025fc <Register_Min_Max+0x1cc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	da03      	bge.n	800254a <Register_Min_Max+0x11a>
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <Register_Min_Max+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <Register_Min_Max+0x1cc>)
 8002548:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 < low_channel_2)	{	low_channel_2 = receiver_input_channel_2;	}
 800254a:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <Register_Min_Max+0x1d0>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <Register_Min_Max+0x1d4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	da03      	bge.n	800255e <Register_Min_Max+0x12e>
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <Register_Min_Max+0x1d0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <Register_Min_Max+0x1d4>)
 800255c:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 < low_channel_3)	{	low_channel_3 = receiver_input_channel_3;	}
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <Register_Min_Max+0x1d8>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <Register_Min_Max+0x1dc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	da03      	bge.n	8002572 <Register_Min_Max+0x142>
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <Register_Min_Max+0x1d8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a27      	ldr	r2, [pc, #156]	; (800260c <Register_Min_Max+0x1dc>)
 8002570:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 < low_channel_4)	{	low_channel_4 = receiver_input_channel_4;	}
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <Register_Min_Max+0x1e0>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b27      	ldr	r3, [pc, #156]	; (8002614 <Register_Min_Max+0x1e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	da03      	bge.n	8002586 <Register_Min_Max+0x156>
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <Register_Min_Max+0x1e0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <Register_Min_Max+0x1e4>)
 8002584:	6013      	str	r3, [r2, #0]
		
		if(	receiver_input_channel_1 > high_channel_1)	{	high_channel_1 = receiver_input_channel_1;	}
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <Register_Min_Max+0x1c8>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <Register_Min_Max+0x1fc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	dd03      	ble.n	800259a <Register_Min_Max+0x16a>
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <Register_Min_Max+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <Register_Min_Max+0x1fc>)
 8002598:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_2 > high_channel_2)	{	high_channel_2 = receiver_input_channel_2;	}
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <Register_Min_Max+0x1d0>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <Register_Min_Max+0x200>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dd03      	ble.n	80025ae <Register_Min_Max+0x17e>
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <Register_Min_Max+0x1d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <Register_Min_Max+0x200>)
 80025ac:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_3 > high_channel_3)	{	high_channel_3 = receiver_input_channel_3;	}
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <Register_Min_Max+0x1d8>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <Register_Min_Max+0x204>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	dd03      	ble.n	80025c2 <Register_Min_Max+0x192>
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <Register_Min_Max+0x1d8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <Register_Min_Max+0x204>)
 80025c0:	6013      	str	r3, [r2, #0]
		if(	receiver_input_channel_4 > high_channel_4)	{	high_channel_4 = receiver_input_channel_4;	}
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <Register_Min_Max+0x1e0>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <Register_Min_Max+0x208>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dd03      	ble.n	80025d6 <Register_Min_Max+0x1a6>
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <Register_Min_Max+0x1e0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <Register_Min_Max+0x208>)
 80025d4:	6013      	str	r3, [r2, #0]

		k--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3b01      	subs	r3, #1
 80025da:	607b      	str	r3, [r7, #4]
	while( k > 0 && zero < 15 )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	dd03      	ble.n	80025ea <Register_Min_Max+0x1ba>
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b0e      	cmp	r3, #14
 80025e6:	f67f af56 	bls.w	8002496 <Register_Min_Max+0x66>
	}
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000038c 	.word	0x2000038c
 80025fc:	20000348 	.word	0x20000348
 8002600:	20000380 	.word	0x20000380
 8002604:	20000330 	.word	0x20000330
 8002608:	2000009c 	.word	0x2000009c
 800260c:	20000310 	.word	0x20000310
 8002610:	20000388 	.word	0x20000388
 8002614:	20000358 	.word	0x20000358
 8002618:	2000035c 	.word	0x2000035c
 800261c:	01312d00 	.word	0x01312d00
 8002620:	20000328 	.word	0x20000328
 8002624:	2000034c 	.word	0x2000034c
 8002628:	20000314 	.word	0x20000314
 800262c:	2000032c 	.word	0x2000032c
 8002630:	20000364 	.word	0x20000364
 8002634:	20000340 	.word	0x20000340
 8002638:	20000354 	.word	0x20000354

0800263c <Check_Receiver_Inputs>:

void Check_Receiver_Inputs( uint8_t movement )			//Check if a receiver input value is changing within 30 seconds
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	uint8_t trigger = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
	int pulse_length;
	unsigned int i = 3000000;
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <Check_Receiver_Inputs+0x18c>)
 800264c:	60fb      	str	r3, [r7, #12]

	while( i > 0 && trigger == 0 )
 800264e:	e065      	b.n	800271c <Check_Receiver_Inputs+0xe0>
	{
		HAL_Delay( 250 );
 8002650:	20fa      	movs	r0, #250	; 0xfa
 8002652:	f001 f865 	bl	8003720 <HAL_Delay>

		if(receiver_input_channel_1 > 1750 || receiver_input_channel_1 < 1250)
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <Check_Receiver_Inputs+0x190>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800265e:	4293      	cmp	r3, r2
 8002660:	dc05      	bgt.n	800266e <Check_Receiver_Inputs+0x32>
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <Check_Receiver_Inputs+0x190>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800266a:	4293      	cmp	r3, r2
 800266c:	dc0b      	bgt.n	8002686 <Check_Receiver_Inputs+0x4a>
		{
			trigger = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000001;
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 800267e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_1;
 8002680:	4b52      	ldr	r3, [pc, #328]	; (80027cc <Check_Receiver_Inputs+0x190>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_2 > 1750 || receiver_input_channel_2 < 1250)
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <Check_Receiver_Inputs+0x198>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800268e:	4293      	cmp	r3, r2
 8002690:	dc05      	bgt.n	800269e <Check_Receiver_Inputs+0x62>
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <Check_Receiver_Inputs+0x198>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800269a:	4293      	cmp	r3, r2
 800269c:	dc0b      	bgt.n	80026b6 <Check_Receiver_Inputs+0x7a>
		{
			trigger = 2;
 800269e:	2302      	movs	r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000010;
 80026a2:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 80026ae:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_2;
 80026b0:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <Check_Receiver_Inputs+0x198>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_3 > 1750 || receiver_input_channel_3 < 1250)
 80026b6:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <Check_Receiver_Inputs+0x19c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80026be:	4293      	cmp	r3, r2
 80026c0:	dc05      	bgt.n	80026ce <Check_Receiver_Inputs+0x92>
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <Check_Receiver_Inputs+0x19c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026ca:	4293      	cmp	r3, r2
 80026cc:	dc0b      	bgt.n	80026e6 <Check_Receiver_Inputs+0xaa>
		{
			trigger = 3;
 80026ce:	2303      	movs	r3, #3
 80026d0:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00000100;
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 80026de:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_3;
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <Check_Receiver_Inputs+0x19c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	613b      	str	r3, [r7, #16]
		}

		if(receiver_input_channel_4 > 1750 || receiver_input_channel_4 < 1250)
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <Check_Receiver_Inputs+0x1a0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80026ee:	4293      	cmp	r3, r2
 80026f0:	dc05      	bgt.n	80026fe <Check_Receiver_Inputs+0xc2>
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <Check_Receiver_Inputs+0x1a0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80026fa:	4293      	cmp	r3, r2
 80026fc:	dc0b      	bgt.n	8002716 <Check_Receiver_Inputs+0xda>
		{
			trigger = 4;
 80026fe:	2304      	movs	r3, #4
 8002700:	75fb      	strb	r3, [r7, #23]
			receiver_check_byte |= 0b00001000;
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <Check_Receiver_Inputs+0x194>)
 800270e:	701a      	strb	r2, [r3, #0]
			pulse_length = receiver_input_channel_4;
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <Check_Receiver_Inputs+0x1a0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	613b      	str	r3, [r7, #16]
		}

		i--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b01      	subs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
	while( i > 0 && trigger == 0 )
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <Check_Receiver_Inputs+0xec>
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d093      	beq.n	8002650 <Check_Receiver_Inputs+0x14>
	}

	if(trigger == 0)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <Check_Receiver_Inputs+0xfa>
	{
		error = 1;
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <Check_Receiver_Inputs+0x1a4>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
		{
			channel_4_assign = trigger;
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
		}
	}
}
 8002734:	e043      	b.n	80027be <Check_Receiver_Inputs+0x182>
		if(movement == 1)
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10d      	bne.n	8002758 <Check_Receiver_Inputs+0x11c>
			channel_3_assign = trigger;
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <Check_Receiver_Inputs+0x1a8>)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_3_assign += 0b10000000;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002748:	4293      	cmp	r3, r2
 800274a:	dc05      	bgt.n	8002758 <Check_Receiver_Inputs+0x11c>
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <Check_Receiver_Inputs+0x1a8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	3b80      	subs	r3, #128	; 0x80
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <Check_Receiver_Inputs+0x1a8>)
 8002756:	701a      	strb	r2, [r3, #0]
		if(movement == 2)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d10d      	bne.n	800277a <Check_Receiver_Inputs+0x13e>
			channel_1_assign = trigger;
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <Check_Receiver_Inputs+0x1ac>)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_1_assign += 0b10000000;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800276a:	4293      	cmp	r3, r2
 800276c:	dc05      	bgt.n	800277a <Check_Receiver_Inputs+0x13e>
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <Check_Receiver_Inputs+0x1ac>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	3b80      	subs	r3, #128	; 0x80
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <Check_Receiver_Inputs+0x1ac>)
 8002778:	701a      	strb	r2, [r3, #0]
		if(movement == 3)
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d10d      	bne.n	800279c <Check_Receiver_Inputs+0x160>
			channel_2_assign = trigger;
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <Check_Receiver_Inputs+0x1b0>)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	7013      	strb	r3, [r2, #0]
			if(pulse_length < 1250)channel_2_assign += 0b10000000;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800278c:	4293      	cmp	r3, r2
 800278e:	dc05      	bgt.n	800279c <Check_Receiver_Inputs+0x160>
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <Check_Receiver_Inputs+0x1b0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b80      	subs	r3, #128	; 0x80
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <Check_Receiver_Inputs+0x1b0>)
 800279a:	701a      	strb	r2, [r3, #0]
		if(movement == 4)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d10d      	bne.n	80027be <Check_Receiver_Inputs+0x182>
			channel_4_assign = trigger;
 80027a2:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <Check_Receiver_Inputs+0x1b4>)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	7013      	strb	r3, [r2, #0]
     		if(pulse_length < 1250)channel_4_assign += 0b10000000;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80027ae:	4293      	cmp	r3, r2
 80027b0:	dc05      	bgt.n	80027be <Check_Receiver_Inputs+0x182>
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <Check_Receiver_Inputs+0x1b4>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	3b80      	subs	r3, #128	; 0x80
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <Check_Receiver_Inputs+0x1b4>)
 80027bc:	701a      	strb	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	002dc6c0 	.word	0x002dc6c0
 80027cc:	2000038c 	.word	0x2000038c
 80027d0:	2000033c 	.word	0x2000033c
 80027d4:	20000380 	.word	0x20000380
 80027d8:	2000009c 	.word	0x2000009c
 80027dc:	20000388 	.word	0x20000388
 80027e0:	20000058 	.word	0x20000058
 80027e4:	20000344 	.word	0x20000344
 80027e8:	20000351 	.word	0x20000351
 80027ec:	20000335 	.word	0x20000335
 80027f0:	20000350 	.word	0x20000350

080027f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fa:	f000 ff2b 	bl	8003654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fe:	f000 faa3 	bl	8002d48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay( 3000 );
 8002802:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002806:	f000 ff8b 	bl	8003720 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800280a:	f000 fc79 	bl	8003100 <MX_GPIO_Init>
  MX_I2C1_Init();
 800280e:	f000 faf9 	bl	8002e04 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002812:	f000 fb37 	bl	8002e84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002816:	f000 fba9 	bl	8002f6c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800281a:	f000 fc41 	bl	80030a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// Flash to EEPROM Array
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  0, &eeprom_data[0]);
 800281e:	4b9d      	ldr	r3, [pc, #628]	; (8002a94 <main+0x2a0>)
 8002820:	2200      	movs	r2, #0
 8002822:	499d      	ldr	r1, [pc, #628]	; (8002a98 <main+0x2a4>)
 8002824:	207f      	movs	r0, #127	; 0x7f
 8002826:	f7fe fa04 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  1, &eeprom_data[1]);
 800282a:	4b9c      	ldr	r3, [pc, #624]	; (8002a9c <main+0x2a8>)
 800282c:	2201      	movs	r2, #1
 800282e:	499a      	ldr	r1, [pc, #616]	; (8002a98 <main+0x2a4>)
 8002830:	207f      	movs	r0, #127	; 0x7f
 8002832:	f7fe f9fe 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  2, &eeprom_data[2]);
 8002836:	4b9a      	ldr	r3, [pc, #616]	; (8002aa0 <main+0x2ac>)
 8002838:	2202      	movs	r2, #2
 800283a:	4997      	ldr	r1, [pc, #604]	; (8002a98 <main+0x2a4>)
 800283c:	207f      	movs	r0, #127	; 0x7f
 800283e:	f7fe f9f8 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  3, &eeprom_data[3]);
 8002842:	4b98      	ldr	r3, [pc, #608]	; (8002aa4 <main+0x2b0>)
 8002844:	2203      	movs	r2, #3
 8002846:	4994      	ldr	r1, [pc, #592]	; (8002a98 <main+0x2a4>)
 8002848:	207f      	movs	r0, #127	; 0x7f
 800284a:	f7fe f9f2 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  4, &eeprom_data[4]);
 800284e:	4b96      	ldr	r3, [pc, #600]	; (8002aa8 <main+0x2b4>)
 8002850:	2204      	movs	r2, #4
 8002852:	4991      	ldr	r1, [pc, #580]	; (8002a98 <main+0x2a4>)
 8002854:	207f      	movs	r0, #127	; 0x7f
 8002856:	f7fe f9ec 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  5, &eeprom_data[5]);
 800285a:	4b94      	ldr	r3, [pc, #592]	; (8002aac <main+0x2b8>)
 800285c:	2205      	movs	r2, #5
 800285e:	498e      	ldr	r1, [pc, #568]	; (8002a98 <main+0x2a4>)
 8002860:	207f      	movs	r0, #127	; 0x7f
 8002862:	f7fe f9e6 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  6, &eeprom_data[6]);
 8002866:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <main+0x2bc>)
 8002868:	2206      	movs	r2, #6
 800286a:	498b      	ldr	r1, [pc, #556]	; (8002a98 <main+0x2a4>)
 800286c:	207f      	movs	r0, #127	; 0x7f
 800286e:	f7fe f9e0 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  7, &eeprom_data[7]);
 8002872:	4b90      	ldr	r3, [pc, #576]	; (8002ab4 <main+0x2c0>)
 8002874:	2207      	movs	r2, #7
 8002876:	4988      	ldr	r1, [pc, #544]	; (8002a98 <main+0x2a4>)
 8002878:	207f      	movs	r0, #127	; 0x7f
 800287a:	f7fe f9da 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  8, &eeprom_data[8]);
 800287e:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <main+0x2c4>)
 8002880:	2208      	movs	r2, #8
 8002882:	4985      	ldr	r1, [pc, #532]	; (8002a98 <main+0x2a4>)
 8002884:	207f      	movs	r0, #127	; 0x7f
 8002886:	f7fe f9d4 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800,  9, &eeprom_data[9]);
 800288a:	4b8c      	ldr	r3, [pc, #560]	; (8002abc <main+0x2c8>)
 800288c:	2209      	movs	r2, #9
 800288e:	4982      	ldr	r1, [pc, #520]	; (8002a98 <main+0x2a4>)
 8002890:	207f      	movs	r0, #127	; 0x7f
 8002892:	f7fe f9ce 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 10, &eeprom_data[10]);
 8002896:	4b8a      	ldr	r3, [pc, #552]	; (8002ac0 <main+0x2cc>)
 8002898:	220a      	movs	r2, #10
 800289a:	497f      	ldr	r1, [pc, #508]	; (8002a98 <main+0x2a4>)
 800289c:	207f      	movs	r0, #127	; 0x7f
 800289e:	f7fe f9c8 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 11, &eeprom_data[11]);
 80028a2:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <main+0x2d0>)
 80028a4:	220b      	movs	r2, #11
 80028a6:	497c      	ldr	r1, [pc, #496]	; (8002a98 <main+0x2a4>)
 80028a8:	207f      	movs	r0, #127	; 0x7f
 80028aa:	f7fe f9c2 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 12, &eeprom_data[12]);
 80028ae:	4b86      	ldr	r3, [pc, #536]	; (8002ac8 <main+0x2d4>)
 80028b0:	220c      	movs	r2, #12
 80028b2:	4979      	ldr	r1, [pc, #484]	; (8002a98 <main+0x2a4>)
 80028b4:	207f      	movs	r0, #127	; 0x7f
 80028b6:	f7fe f9bc 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 13, &eeprom_data[13]);
 80028ba:	4b84      	ldr	r3, [pc, #528]	; (8002acc <main+0x2d8>)
 80028bc:	220d      	movs	r2, #13
 80028be:	4976      	ldr	r1, [pc, #472]	; (8002a98 <main+0x2a4>)
 80028c0:	207f      	movs	r0, #127	; 0x7f
 80028c2:	f7fe f9b6 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 14, &eeprom_data[14]);
 80028c6:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <main+0x2dc>)
 80028c8:	220e      	movs	r2, #14
 80028ca:	4973      	ldr	r1, [pc, #460]	; (8002a98 <main+0x2a4>)
 80028cc:	207f      	movs	r0, #127	; 0x7f
 80028ce:	f7fe f9b0 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 15, &eeprom_data[15]);
 80028d2:	4b80      	ldr	r3, [pc, #512]	; (8002ad4 <main+0x2e0>)
 80028d4:	220f      	movs	r2, #15
 80028d6:	4970      	ldr	r1, [pc, #448]	; (8002a98 <main+0x2a4>)
 80028d8:	207f      	movs	r0, #127	; 0x7f
 80028da:	f7fe f9aa 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 16, &eeprom_data[16]);
 80028de:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <main+0x2e4>)
 80028e0:	2210      	movs	r2, #16
 80028e2:	496d      	ldr	r1, [pc, #436]	; (8002a98 <main+0x2a4>)
 80028e4:	207f      	movs	r0, #127	; 0x7f
 80028e6:	f7fe f9a4 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 17, &eeprom_data[17]);
 80028ea:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <main+0x2e8>)
 80028ec:	2211      	movs	r2, #17
 80028ee:	496a      	ldr	r1, [pc, #424]	; (8002a98 <main+0x2a4>)
 80028f0:	207f      	movs	r0, #127	; 0x7f
 80028f2:	f7fe f99e 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 18, &eeprom_data[18]);
 80028f6:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <main+0x2ec>)
 80028f8:	2212      	movs	r2, #18
 80028fa:	4967      	ldr	r1, [pc, #412]	; (8002a98 <main+0x2a4>)
 80028fc:	207f      	movs	r0, #127	; 0x7f
 80028fe:	f7fe f998 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 19, &eeprom_data[19]);
 8002902:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <main+0x2f0>)
 8002904:	2213      	movs	r2, #19
 8002906:	4964      	ldr	r1, [pc, #400]	; (8002a98 <main+0x2a4>)
 8002908:	207f      	movs	r0, #127	; 0x7f
 800290a:	f7fe f992 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 20, &eeprom_data[20]);
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <main+0x2f4>)
 8002910:	2214      	movs	r2, #20
 8002912:	4961      	ldr	r1, [pc, #388]	; (8002a98 <main+0x2a4>)
 8002914:	207f      	movs	r0, #127	; 0x7f
 8002916:	f7fe f98c 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 21, &eeprom_data[21]);
 800291a:	4b74      	ldr	r3, [pc, #464]	; (8002aec <main+0x2f8>)
 800291c:	2215      	movs	r2, #21
 800291e:	495e      	ldr	r1, [pc, #376]	; (8002a98 <main+0x2a4>)
 8002920:	207f      	movs	r0, #127	; 0x7f
 8002922:	f7fe f986 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 22, &eeprom_data[22]);
 8002926:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <main+0x2fc>)
 8002928:	2216      	movs	r2, #22
 800292a:	495b      	ldr	r1, [pc, #364]	; (8002a98 <main+0x2a4>)
 800292c:	207f      	movs	r0, #127	; 0x7f
 800292e:	f7fe f980 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 23, &eeprom_data[23]);
 8002932:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <main+0x300>)
 8002934:	2217      	movs	r2, #23
 8002936:	4958      	ldr	r1, [pc, #352]	; (8002a98 <main+0x2a4>)
 8002938:	207f      	movs	r0, #127	; 0x7f
 800293a:	f7fe f97a 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 24, &eeprom_data[24]);
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <main+0x304>)
 8002940:	2218      	movs	r2, #24
 8002942:	4955      	ldr	r1, [pc, #340]	; (8002a98 <main+0x2a4>)
 8002944:	207f      	movs	r0, #127	; 0x7f
 8002946:	f7fe f974 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 25, &eeprom_data[25]);
 800294a:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <main+0x308>)
 800294c:	2219      	movs	r2, #25
 800294e:	4952      	ldr	r1, [pc, #328]	; (8002a98 <main+0x2a4>)
 8002950:	207f      	movs	r0, #127	; 0x7f
 8002952:	f7fe f96e 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 26, &eeprom_data[26]);
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <main+0x30c>)
 8002958:	221a      	movs	r2, #26
 800295a:	494f      	ldr	r1, [pc, #316]	; (8002a98 <main+0x2a4>)
 800295c:	207f      	movs	r0, #127	; 0x7f
 800295e:	f7fe f968 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 27, &eeprom_data[27]);
 8002962:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <main+0x310>)
 8002964:	221b      	movs	r2, #27
 8002966:	494c      	ldr	r1, [pc, #304]	; (8002a98 <main+0x2a4>)
 8002968:	207f      	movs	r0, #127	; 0x7f
 800296a:	f7fe f962 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 28, &eeprom_data[28]);
 800296e:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <main+0x314>)
 8002970:	221c      	movs	r2, #28
 8002972:	4949      	ldr	r1, [pc, #292]	; (8002a98 <main+0x2a4>)
 8002974:	207f      	movs	r0, #127	; 0x7f
 8002976:	f7fe f95c 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 29, &eeprom_data[29]);
 800297a:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <main+0x318>)
 800297c:	221d      	movs	r2, #29
 800297e:	4946      	ldr	r1, [pc, #280]	; (8002a98 <main+0x2a4>)
 8002980:	207f      	movs	r0, #127	; 0x7f
 8002982:	f7fe f956 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 30, &eeprom_data[30]);
 8002986:	4b62      	ldr	r3, [pc, #392]	; (8002b10 <main+0x31c>)
 8002988:	221e      	movs	r2, #30
 800298a:	4943      	ldr	r1, [pc, #268]	; (8002a98 <main+0x2a4>)
 800298c:	207f      	movs	r0, #127	; 0x7f
 800298e:	f7fe f950 	bl	8000c32 <Flash_EEPROM_Data_Read>
	Flash_EEPROM_Data_Read( 127, 0x0803F800, 31, &eeprom_data[31]);
 8002992:	4b60      	ldr	r3, [pc, #384]	; (8002b14 <main+0x320>)
 8002994:	221f      	movs	r2, #31
 8002996:	4940      	ldr	r1, [pc, #256]	; (8002a98 <main+0x2a4>)
 8002998:	207f      	movs	r0, #127	; 0x7f
 800299a:	f7fe f94a 	bl	8000c32 <Flash_EEPROM_Data_Read>

	L3GD20H_Init();
 800299e:	f7fe fb47 	bl	8001030 <L3GD20H_Init>
	PWM_IC_Start();
 80029a2:	f7fe fc49 	bl	8001238 <PWM_IC_Start>
	///
	HAL_Delay( 2500 );
 80029a6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80029aa:	f000 feb9 	bl	8003720 <HAL_Delay>

	/////////////////////////////////////////////////////////////////////////


	if( gyro_error == false )
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <main+0x324>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01d      	beq.n	80029f8 <main+0x204>
	{
		sprintf(uartTX, "                                                                                                    ");
 80029bc:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <main+0x328>)
 80029be:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <main+0x32c>)
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	2365      	movs	r3, #101	; 0x65
 80029c6:	461a      	mov	r2, r3
 80029c8:	f006 fb72 	bl	80090b0 <memcpy>
		sprintf(uartTX, "\nSystem started!\n");
 80029cc:	4a53      	ldr	r2, [pc, #332]	; (8002b1c <main+0x328>)
 80029ce:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <main+0x330>)
 80029d0:	4615      	mov	r5, r2
 80029d2:	461c      	mov	r4, r3
 80029d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d6:	6028      	str	r0, [r5, #0]
 80029d8:	6069      	str	r1, [r5, #4]
 80029da:	60aa      	str	r2, [r5, #8]
 80029dc:	60eb      	str	r3, [r5, #12]
 80029de:	8823      	ldrh	r3, [r4, #0]
 80029e0:	822b      	strh	r3, [r5, #16]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 80029e2:	2364      	movs	r3, #100	; 0x64
 80029e4:	2265      	movs	r2, #101	; 0x65
 80029e6:	494d      	ldr	r1, [pc, #308]	; (8002b1c <main+0x328>)
 80029e8:	484f      	ldr	r0, [pc, #316]	; (8002b28 <main+0x334>)
 80029ea:	f005 fd79 	bl	80084e0 <HAL_UART_Transmit>
		HAL_Delay( 2500 );
 80029ee:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80029f2:	f000 fe95 	bl	8003720 <HAL_Delay>
 80029f6:	e03c      	b.n	8002a72 <main+0x27e>
	}
	else if( gyro_error == true )
 80029f8:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <main+0x324>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d021      	beq.n	8002a44 <main+0x250>
	{
		  sprintf(uartTX, "                                                                                                    ");
 8002a00:	4a46      	ldr	r2, [pc, #280]	; (8002b1c <main+0x328>)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <main+0x32c>)
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	2365      	movs	r3, #101	; 0x65
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f006 fb50 	bl	80090b0 <memcpy>
		  sprintf(uartTX, "\nSystem failed to start!\n");
 8002a10:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <main+0x328>)
 8002a12:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <main+0x338>)
 8002a14:	4615      	mov	r5, r2
 8002a16:	461c      	mov	r4, r3
 8002a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1a:	6028      	str	r0, [r5, #0]
 8002a1c:	6069      	str	r1, [r5, #4]
 8002a1e:	60aa      	str	r2, [r5, #8]
 8002a20:	60eb      	str	r3, [r5, #12]
 8002a22:	cc03      	ldmia	r4!, {r0, r1}
 8002a24:	6128      	str	r0, [r5, #16]
 8002a26:	6169      	str	r1, [r5, #20]
 8002a28:	8823      	ldrh	r3, [r4, #0]
 8002a2a:	832b      	strh	r3, [r5, #24]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002a2c:	2364      	movs	r3, #100	; 0x64
 8002a2e:	2265      	movs	r2, #101	; 0x65
 8002a30:	493a      	ldr	r1, [pc, #232]	; (8002b1c <main+0x328>)
 8002a32:	483d      	ldr	r0, [pc, #244]	; (8002b28 <main+0x334>)
 8002a34:	f005 fd54 	bl	80084e0 <HAL_UART_Transmit>

		  while ( gyro_error ) {	} 		// Endless Loop
 8002a38:	bf00      	nop
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <main+0x324>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1fb      	bne.n	8002a3a <main+0x246>
 8002a42:	e016      	b.n	8002a72 <main+0x27e>
	}
	else
	{
		  sprintf(uartTX, "                                                                                                    ");
 8002a44:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <main+0x328>)
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <main+0x32c>)
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	2365      	movs	r3, #101	; 0x65
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f006 fb2e 	bl	80090b0 <memcpy>
		  sprintf(uartTX, "\nOh shit!\n");
 8002a54:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <main+0x328>)
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <main+0x33c>)
 8002a58:	cb03      	ldmia	r3!, {r0, r1}
 8002a5a:	6010      	str	r0, [r2, #0]
 8002a5c:	6051      	str	r1, [r2, #4]
 8002a5e:	8819      	ldrh	r1, [r3, #0]
 8002a60:	789b      	ldrb	r3, [r3, #2]
 8002a62:	8111      	strh	r1, [r2, #8]
 8002a64:	7293      	strb	r3, [r2, #10]
		  HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002a66:	2364      	movs	r3, #100	; 0x64
 8002a68:	2265      	movs	r2, #101	; 0x65
 8002a6a:	492c      	ldr	r1, [pc, #176]	; (8002b1c <main+0x328>)
 8002a6c:	482e      	ldr	r0, [pc, #184]	; (8002b28 <main+0x334>)
 8002a6e:	f005 fd37 	bl	80084e0 <HAL_UART_Transmit>
	}

	/////////////////////////////////////////////////////////////////////////

	if ( eeprom_data[31] == 92 && gyro_error == false )
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <main+0x2a0>)
 8002a74:	7fdb      	ldrb	r3, [r3, #31]
 8002a76:	2b5c      	cmp	r3, #92	; 0x5c
 8002a78:	f040 80e3 	bne.w	8002c42 <main+0x44e>
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <main+0x324>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80db 	beq.w	8002c42 <main+0x44e>
	{
		while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002a8c:	e08c      	b.n	8002ba8 <main+0x3b4>
		{
			for (int i = 0; i <= 50000000; i++ )
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	e085      	b.n	8002ba0 <main+0x3ac>
 8002a94:	2000007c 	.word	0x2000007c
 8002a98:	0803f800 	.word	0x0803f800
 8002a9c:	2000007d 	.word	0x2000007d
 8002aa0:	2000007e 	.word	0x2000007e
 8002aa4:	2000007f 	.word	0x2000007f
 8002aa8:	20000080 	.word	0x20000080
 8002aac:	20000081 	.word	0x20000081
 8002ab0:	20000082 	.word	0x20000082
 8002ab4:	20000083 	.word	0x20000083
 8002ab8:	20000084 	.word	0x20000084
 8002abc:	20000085 	.word	0x20000085
 8002ac0:	20000086 	.word	0x20000086
 8002ac4:	20000087 	.word	0x20000087
 8002ac8:	20000088 	.word	0x20000088
 8002acc:	20000089 	.word	0x20000089
 8002ad0:	2000008a 	.word	0x2000008a
 8002ad4:	2000008b 	.word	0x2000008b
 8002ad8:	2000008c 	.word	0x2000008c
 8002adc:	2000008d 	.word	0x2000008d
 8002ae0:	2000008e 	.word	0x2000008e
 8002ae4:	2000008f 	.word	0x2000008f
 8002ae8:	20000090 	.word	0x20000090
 8002aec:	20000091 	.word	0x20000091
 8002af0:	20000092 	.word	0x20000092
 8002af4:	20000093 	.word	0x20000093
 8002af8:	20000094 	.word	0x20000094
 8002afc:	20000095 	.word	0x20000095
 8002b00:	20000096 	.word	0x20000096
 8002b04:	20000097 	.word	0x20000097
 8002b08:	20000098 	.word	0x20000098
 8002b0c:	20000099 	.word	0x20000099
 8002b10:	2000009a 	.word	0x2000009a
 8002b14:	2000009b 	.word	0x2000009b
 8002b18:	2000036b 	.word	0x2000036b
 8002b1c:	200002a4 	.word	0x200002a4
 8002b20:	080095f0 	.word	0x080095f0
 8002b24:	08009658 	.word	0x08009658
 8002b28:	200001f8 	.word	0x200001f8
 8002b2c:	0800966c 	.word	0x0800966c
 8002b30:	08009688 	.word	0x08009688
			{
				if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a7a      	ldr	r2, [pc, #488]	; (8002d20 <main+0x52c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d12e      	bne.n	8002b9a <main+0x3a6>
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b42:	f001 fabd 	bl	80040c0 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d026      	beq.n	8002b9a <main+0x3a6>
				{
					sprintf(uartTX, "                                                                                                    ");
 8002b4c:	4a75      	ldr	r2, [pc, #468]	; (8002d24 <main+0x530>)
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <main+0x534>)
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	2365      	movs	r3, #101	; 0x65
 8002b56:	461a      	mov	r2, r3
 8002b58:	f006 faaa 	bl	80090b0 <memcpy>
					sprintf(uartTX, "\nESC Calibration is starting! Reset after calibration!\n");
 8002b5c:	4b71      	ldr	r3, [pc, #452]	; (8002d24 <main+0x530>)
 8002b5e:	4a73      	ldr	r2, [pc, #460]	; (8002d2c <main+0x538>)
 8002b60:	4614      	mov	r4, r2
 8002b62:	469c      	mov	ip, r3
 8002b64:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002b68:	4665      	mov	r5, ip
 8002b6a:	4626      	mov	r6, r4
 8002b6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b6e:	6028      	str	r0, [r5, #0]
 8002b70:	6069      	str	r1, [r5, #4]
 8002b72:	60aa      	str	r2, [r5, #8]
 8002b74:	60eb      	str	r3, [r5, #12]
 8002b76:	3410      	adds	r4, #16
 8002b78:	f10c 0c10 	add.w	ip, ip, #16
 8002b7c:	4574      	cmp	r4, lr
 8002b7e:	d1f3      	bne.n	8002b68 <main+0x374>
 8002b80:	4662      	mov	r2, ip
 8002b82:	4623      	mov	r3, r4
 8002b84:	cb03      	ldmia	r3!, {r0, r1}
 8002b86:	6010      	str	r0, [r2, #0]
 8002b88:	6051      	str	r1, [r2, #4]
					HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002b8a:	2364      	movs	r3, #100	; 0x64
 8002b8c:	2265      	movs	r2, #101	; 0x65
 8002b8e:	4965      	ldr	r1, [pc, #404]	; (8002d24 <main+0x530>)
 8002b90:	4867      	ldr	r0, [pc, #412]	; (8002d30 <main+0x53c>)
 8002b92:	f005 fca5 	bl	80084e0 <HAL_UART_Transmit>

					ESC_Calibration();
 8002b96:	f7fd ff35 	bl	8000a04 <ESC_Calibration>
			for (int i = 0; i <= 50000000; i++ )
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	; (8002d20 <main+0x52c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	ddc5      	ble.n	8002b34 <main+0x340>
		while ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002ba8:	2101      	movs	r1, #1
 8002baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bae:	f001 fa87 	bl	80040c0 <HAL_GPIO_ReadPin>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f af6a 	bne.w	8002a8e <main+0x29a>
				}
			}
		}


		sprintf(uartTX, "                                                                                                    ");
 8002bba:	4a5a      	ldr	r2, [pc, #360]	; (8002d24 <main+0x530>)
 8002bbc:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <main+0x534>)
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	2365      	movs	r3, #101	; 0x65
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f006 fa73 	bl	80090b0 <memcpy>
		sprintf(uartTX, "\nFlight Setup is starting!\n");
 8002bca:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <main+0x530>)
 8002bcc:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <main+0x540>)
 8002bce:	4615      	mov	r5, r2
 8002bd0:	461c      	mov	r4, r3
 8002bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd4:	6028      	str	r0, [r5, #0]
 8002bd6:	6069      	str	r1, [r5, #4]
 8002bd8:	60aa      	str	r2, [r5, #8]
 8002bda:	60eb      	str	r3, [r5, #12]
 8002bdc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002bde:	6128      	str	r0, [r5, #16]
 8002be0:	6169      	str	r1, [r5, #20]
 8002be2:	61aa      	str	r2, [r5, #24]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	2265      	movs	r2, #101	; 0x65
 8002be8:	494e      	ldr	r1, [pc, #312]	; (8002d24 <main+0x530>)
 8002bea:	4851      	ldr	r0, [pc, #324]	; (8002d30 <main+0x53c>)
 8002bec:	f005 fc78 	bl	80084e0 <HAL_UART_Transmit>

		Flight_Control_Setup();
 8002bf0:	f7fe f838 	bl	8000c64 <Flight_Control_Setup>

		sprintf(uartTX, "                                                                                                    ");
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	; (8002d24 <main+0x530>)
 8002bf6:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <main+0x534>)
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	2365      	movs	r3, #101	; 0x65
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f006 fa56 	bl	80090b0 <memcpy>
		sprintf(uartTX, "\nFlight Setup is done! Ready to fly!\n");
 8002c04:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <main+0x530>)
 8002c06:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <main+0x544>)
 8002c08:	4614      	mov	r4, r2
 8002c0a:	469c      	mov	ip, r3
 8002c0c:	f104 0e20 	add.w	lr, r4, #32
 8002c10:	4665      	mov	r5, ip
 8002c12:	4626      	mov	r6, r4
 8002c14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c16:	6028      	str	r0, [r5, #0]
 8002c18:	6069      	str	r1, [r5, #4]
 8002c1a:	60aa      	str	r2, [r5, #8]
 8002c1c:	60eb      	str	r3, [r5, #12]
 8002c1e:	3410      	adds	r4, #16
 8002c20:	f10c 0c10 	add.w	ip, ip, #16
 8002c24:	4574      	cmp	r4, lr
 8002c26:	d1f3      	bne.n	8002c10 <main+0x41c>
 8002c28:	4663      	mov	r3, ip
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	6810      	ldr	r0, [r2, #0]
 8002c2e:	6018      	str	r0, [r3, #0]
 8002c30:	8892      	ldrh	r2, [r2, #4]
 8002c32:	809a      	strh	r2, [r3, #4]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002c34:	2364      	movs	r3, #100	; 0x64
 8002c36:	2265      	movs	r2, #101	; 0x65
 8002c38:	493a      	ldr	r1, [pc, #232]	; (8002d24 <main+0x530>)
 8002c3a:	483d      	ldr	r0, [pc, #244]	; (8002d30 <main+0x53c>)
 8002c3c:	f005 fc50 	bl	80084e0 <HAL_UART_Transmit>
 8002c40:	e06c      	b.n	8002d1c <main+0x528>
	}
	else
	{
		setup_error = true;
 8002c42:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <main+0x548>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]

		sprintf(uartTX, "                                                                                                    ");
 8002c48:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <main+0x530>)
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <main+0x534>)
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	2365      	movs	r3, #101	; 0x65
 8002c52:	461a      	mov	r2, r3
 8002c54:	f006 fa2c 	bl	80090b0 <memcpy>
		sprintf(uartTX, "\nMain Setup has not been done correctly!\n");
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <main+0x530>)
 8002c5a:	4a39      	ldr	r2, [pc, #228]	; (8002d40 <main+0x54c>)
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	469c      	mov	ip, r3
 8002c60:	f104 0e20 	add.w	lr, r4, #32
 8002c64:	4665      	mov	r5, ip
 8002c66:	4626      	mov	r6, r4
 8002c68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c6a:	6028      	str	r0, [r5, #0]
 8002c6c:	6069      	str	r1, [r5, #4]
 8002c6e:	60aa      	str	r2, [r5, #8]
 8002c70:	60eb      	str	r3, [r5, #12]
 8002c72:	3410      	adds	r4, #16
 8002c74:	f10c 0c10 	add.w	ip, ip, #16
 8002c78:	4574      	cmp	r4, lr
 8002c7a:	d1f3      	bne.n	8002c64 <main+0x470>
 8002c7c:	4662      	mov	r2, ip
 8002c7e:	4623      	mov	r3, r4
 8002c80:	cb03      	ldmia	r3!, {r0, r1}
 8002c82:	6010      	str	r0, [r2, #0]
 8002c84:	6051      	str	r1, [r2, #4]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	8113      	strh	r3, [r2, #8]
		HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002c8a:	2364      	movs	r3, #100	; 0x64
 8002c8c:	2265      	movs	r2, #101	; 0x65
 8002c8e:	4925      	ldr	r1, [pc, #148]	; (8002d24 <main+0x530>)
 8002c90:	4827      	ldr	r0, [pc, #156]	; (8002d30 <main+0x53c>)
 8002c92:	f005 fc25 	bl	80084e0 <HAL_UART_Transmit>

		while ( setup_error )
 8002c96:	e03d      	b.n	8002d14 <main+0x520>
		{
			if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002c98:	2101      	movs	r1, #1
 8002c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9e:	f001 fa0f 	bl	80040c0 <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d035      	beq.n	8002d14 <main+0x520>
			{
				for (int i = 0; i <= 50000000; i++ )
 8002ca8:	2300      	movs	r3, #0
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	e02e      	b.n	8002d0c <main+0x518>
				{
					if( i == 50000000 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) )
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <main+0x52c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d127      	bne.n	8002d06 <main+0x512>
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f001 fa00 	bl	80040c0 <HAL_GPIO_ReadPin>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01f      	beq.n	8002d06 <main+0x512>
					{
						sprintf(uartTX, "                                                                                                    ");
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <main+0x530>)
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <main+0x534>)
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	2365      	movs	r3, #101	; 0x65
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f006 f9ed 	bl	80090b0 <memcpy>
						sprintf(uartTX, "\nSetup is starting..!\n");
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <main+0x530>)
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <main+0x550>)
 8002cda:	4614      	mov	r4, r2
 8002cdc:	461d      	mov	r5, r3
 8002cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce0:	6020      	str	r0, [r4, #0]
 8002ce2:	6061      	str	r1, [r4, #4]
 8002ce4:	60a2      	str	r2, [r4, #8]
 8002ce6:	60e3      	str	r3, [r4, #12]
 8002ce8:	6828      	ldr	r0, [r5, #0]
 8002cea:	6120      	str	r0, [r4, #16]
 8002cec:	88ab      	ldrh	r3, [r5, #4]
 8002cee:	79aa      	ldrb	r2, [r5, #6]
 8002cf0:	82a3      	strh	r3, [r4, #20]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	75a3      	strb	r3, [r4, #22]
						HAL_UART_Transmit( &huart1, (uint8_t *)uartTX, sizeof(uartTX), 100 );
 8002cf6:	2364      	movs	r3, #100	; 0x64
 8002cf8:	2265      	movs	r2, #101	; 0x65
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <main+0x530>)
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <main+0x53c>)
 8002cfe:	f005 fbef 	bl	80084e0 <HAL_UART_Transmit>

						Main_Setup( );
 8002d02:	f7fe fc97 	bl	8001634 <Main_Setup>
				for (int i = 0; i <= 50000000; i++ )
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <main+0x52c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	ddcc      	ble.n	8002cae <main+0x4ba>
		while ( setup_error )
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <main+0x548>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1bd      	bne.n	8002c98 <main+0x4a4>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <main+0x528>
 8002d1e:	bf00      	nop
 8002d20:	02faf080 	.word	0x02faf080
 8002d24:	200002a4 	.word	0x200002a4
 8002d28:	080095f0 	.word	0x080095f0
 8002d2c:	08009694 	.word	0x08009694
 8002d30:	200001f8 	.word	0x200001f8
 8002d34:	080096cc 	.word	0x080096cc
 8002d38:	080096e8 	.word	0x080096e8
 8002d3c:	2000036a 	.word	0x2000036a
 8002d40:	08009710 	.word	0x08009710
 8002d44:	0800973c 	.word	0x0800973c

08002d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b09e      	sub	sp, #120	; 0x78
 8002d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f006 f9b5 	bl	80090c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	223c      	movs	r2, #60	; 0x3c
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f006 f9a7 	bl	80090c6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d82:	2300      	movs	r3, #0
 8002d84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d86:	2301      	movs	r3, #1
 8002d88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d9c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fcc2 	bl	800572c <HAL_RCC_OscConfig>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002dae:	f000 fa1b 	bl	80031e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db2:	230f      	movs	r3, #15
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db6:	2302      	movs	r3, #2
 8002db8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fbb4 	bl	800653c <HAL_RCC_ClockConfig>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002dda:	f000 fa05 	bl	80031e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002dde:	2321      	movs	r3, #33	; 0x21
 8002de0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dea:	463b      	mov	r3, r7
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fddb 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002df8:	f000 f9f6 	bl	80031e8 <Error_Handler>
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3778      	adds	r7, #120	; 0x78
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <MX_I2C1_Init+0x78>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <MX_I2C1_Init+0x7c>)
 8002e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e3e:	480e      	ldr	r0, [pc, #56]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e40:	f001 f96e 	bl	8004120 <HAL_I2C_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e4a:	f000 f9cd 	bl	80031e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e52:	f002 fbb3 	bl	80055bc <HAL_I2CEx_ConfigAnalogFilter>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e5c:	f000 f9c4 	bl	80031e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e60:	2100      	movs	r1, #0
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <MX_I2C1_Init+0x74>)
 8002e64:	f002 fbf5 	bl	8005652 <HAL_I2CEx_ConfigDigitalFilter>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e6e:	f000 f9bb 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000150 	.word	0x20000150
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	0010020a 	.word	0x0010020a

08002e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ea8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002eac:	2247      	movs	r2, #71	; 0x47
 8002eae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002eb8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002ebc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec4:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002eca:	4827      	ldr	r0, [pc, #156]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002ecc:	f003 ffd4 	bl	8006e78 <HAL_TIM_IC_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ed6:	f000 f987 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	481f      	ldr	r0, [pc, #124]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002eea:	f005 fa0d 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002ef4:	f000 f978 	bl	80031e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002efc:	2301      	movs	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4816      	ldr	r0, [pc, #88]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002f10:	f004 f9db 	bl	80072ca <HAL_TIM_IC_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f1a:	f000 f965 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2204      	movs	r2, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002f26:	f004 f9d0 	bl	80072ca <HAL_TIM_IC_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002f30:	f000 f95a 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2208      	movs	r2, #8
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480b      	ldr	r0, [pc, #44]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002f3c:	f004 f9c5 	bl	80072ca <HAL_TIM_IC_ConfigChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002f46:	f000 f94f 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	220c      	movs	r2, #12
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <MX_TIM2_Init+0xe4>)
 8002f52:	f004 f9ba 	bl	80072ca <HAL_TIM_IC_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002f5c:	f000 f944 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000100 	.word	0x20000100

08002f6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	; 0x38
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	611a      	str	r2, [r3, #16]
 8002f9a:	615a      	str	r2, [r3, #20]
 8002f9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fa0:	4a3e      	ldr	r2, [pc, #248]	; (800309c <MX_TIM3_Init+0x130>)
 8002fa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fa6:	2248      	movs	r2, #72	; 0x48
 8002fa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8002fb0:	4b39      	ldr	r3, [pc, #228]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fb2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002fb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb8:	4b37      	ldr	r3, [pc, #220]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fc4:	4834      	ldr	r0, [pc, #208]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fc6:	f003 fe9f 	bl	8006d08 <HAL_TIM_Base_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002fd0:	f000 f90a 	bl	80031e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fde:	4619      	mov	r1, r3
 8002fe0:	482d      	ldr	r0, [pc, #180]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002fe2:	f004 fb27 	bl	8007634 <HAL_TIM_ConfigClockSource>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002fec:	f000 f8fc 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ff0:	4829      	ldr	r0, [pc, #164]	; (8003098 <MX_TIM3_Init+0x12c>)
 8002ff2:	f003 feb4 	bl	8006d5e <HAL_TIM_PWM_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002ffc:	f000 f8f4 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	4619      	mov	r1, r3
 800300e:	4822      	ldr	r0, [pc, #136]	; (8003098 <MX_TIM3_Init+0x12c>)
 8003010:	f005 f97a 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800301a:	f000 f8e5 	bl	80031e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800301e:	2360      	movs	r3, #96	; 0x60
 8003020:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003026:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800302c:	2304      	movs	r3, #4
 800302e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	2200      	movs	r2, #0
 8003034:	4619      	mov	r1, r3
 8003036:	4818      	ldr	r0, [pc, #96]	; (8003098 <MX_TIM3_Init+0x12c>)
 8003038:	f004 f9e4 	bl	8007404 <HAL_TIM_PWM_ConfigChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003042:	f000 f8d1 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003046:	463b      	mov	r3, r7
 8003048:	2204      	movs	r2, #4
 800304a:	4619      	mov	r1, r3
 800304c:	4812      	ldr	r0, [pc, #72]	; (8003098 <MX_TIM3_Init+0x12c>)
 800304e:	f004 f9d9 	bl	8007404 <HAL_TIM_PWM_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003058:	f000 f8c6 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800305c:	463b      	mov	r3, r7
 800305e:	2208      	movs	r2, #8
 8003060:	4619      	mov	r1, r3
 8003062:	480d      	ldr	r0, [pc, #52]	; (8003098 <MX_TIM3_Init+0x12c>)
 8003064:	f004 f9ce 	bl	8007404 <HAL_TIM_PWM_ConfigChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800306e:	f000 f8bb 	bl	80031e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	220c      	movs	r2, #12
 8003076:	4619      	mov	r1, r3
 8003078:	4807      	ldr	r0, [pc, #28]	; (8003098 <MX_TIM3_Init+0x12c>)
 800307a:	f004 f9c3 	bl	8007404 <HAL_TIM_PWM_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8003084:	f000 f8b0 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <MX_TIM3_Init+0x12c>)
 800308a:	f000 f9a3 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 800308e:	bf00      	nop
 8003090:	3738      	adds	r7, #56	; 0x38
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200000b8 	.word	0x200000b8
 800309c:	40000400 	.word	0x40000400

080030a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <MX_USART1_UART_Init+0x5c>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80030b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030c6:	220c      	movs	r2, #12
 80030c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030d8:	2200      	movs	r2, #0
 80030da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030de:	2200      	movs	r2, #0
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030e2:	4805      	ldr	r0, [pc, #20]	; (80030f8 <MX_USART1_UART_Init+0x58>)
 80030e4:	f005 f9ae 	bl	8008444 <HAL_UART_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80030ee:	f000 f87b 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200001f8 	.word	0x200001f8
 80030fc:	40013800 	.word	0x40013800

08003100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4a30      	ldr	r2, [pc, #192]	; (80031dc <MX_GPIO_Init+0xdc>)
 800311c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003120:	6153      	str	r3, [r2, #20]
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003138:	6153      	str	r3, [r2, #20]
 800313a:	4b28      	ldr	r3, [pc, #160]	; (80031dc <MX_GPIO_Init+0xdc>)
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <MX_GPIO_Init+0xdc>)
 800314c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003150:	6153      	str	r3, [r2, #20]
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <MX_GPIO_Init+0xdc>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6153      	str	r3, [r2, #20]
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <MX_GPIO_Init+0xdc>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003176:	2200      	movs	r2, #0
 8003178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317c:	4818      	ldr	r0, [pc, #96]	; (80031e0 <MX_GPIO_Init+0xe0>)
 800317e:	f000 ffb7 	bl	80040f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <MX_GPIO_Init+0xe4>)
 8003188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003198:	f000 fe18 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800319c:	2304      	movs	r3, #4
 800319e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	480c      	ldr	r0, [pc, #48]	; (80031e0 <MX_GPIO_Init+0xe0>)
 80031b0:	f000 fe0c 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80031b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <MX_GPIO_Init+0xe0>)
 80031ce:	f000 fdfd 	bl	8003dcc <HAL_GPIO_Init>

}
 80031d2:	bf00      	nop
 80031d4:	3728      	adds	r7, #40	; 0x28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	48000400 	.word	0x48000400
 80031e4:	10120000 	.word	0x10120000

080031e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_MspInit+0x44>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_MspInit+0x44>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6193      	str	r3, [r2, #24]
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_MspInit+0x44>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_MspInit+0x44>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <HAL_MspInit+0x44>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003220:	61d3      	str	r3, [r2, #28]
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_MspInit+0x44>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_I2C_MspInit+0xac>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d13f      	bne.n	80032e2 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_I2C_MspInit+0xb0>)
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_I2C_MspInit+0xb0>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326c:	6153      	str	r3, [r2, #20]
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_I2C_MspInit+0xb0>)
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327a:	23c0      	movs	r3, #192	; 0xc0
 800327c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327e:	2312      	movs	r3, #18
 8003280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003286:	2303      	movs	r3, #3
 8003288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800328a:	2304      	movs	r3, #4
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	4619      	mov	r1, r3
 8003294:	4817      	ldr	r0, [pc, #92]	; (80032f4 <HAL_I2C_MspInit+0xb4>)
 8003296:	f000 fd99 	bl	8003dcc <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 800329a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800329e:	f002 fa25 	bl	80056ec <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80032a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032a6:	f002 fa21 	bl	80056ec <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_I2C_MspInit+0xb0>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_I2C_MspInit+0xb0>)
 80032b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032b4:	61d3      	str	r3, [r2, #28]
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_I2C_MspInit+0xb0>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	201f      	movs	r0, #31
 80032c8:	f000 fb27 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032cc:	201f      	movs	r0, #31
 80032ce:	f000 fb40 	bl	8003952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	2020      	movs	r0, #32
 80032d8:	f000 fb1f 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032dc:	2020      	movs	r0, #32
 80032de:	f000 fb38 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032e2:	bf00      	nop
 80032e4:	3728      	adds	r7, #40	; 0x28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40005400 	.word	0x40005400
 80032f0:	40021000 	.word	0x40021000
 80032f4:	48000400 	.word	0x48000400

080032f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d130      	bne.n	800337c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800331a:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_TIM_IC_MspInit+0x8c>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_TIM_IC_MspInit+0x8c>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	61d3      	str	r3, [r2, #28]
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_TIM_IC_MspInit+0x8c>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_TIM_IC_MspInit+0x8c>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <HAL_TIM_IC_MspInit+0x8c>)
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	6153      	str	r3, [r2, #20]
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_TIM_IC_MspInit+0x8c>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800334a:	232e      	movs	r3, #46	; 0x2e
 800334c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800335a:	2301      	movs	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003368:	f000 fd30 	bl	8003dcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	201c      	movs	r0, #28
 8003372:	f000 fad2 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003376:	201c      	movs	r0, #28
 8003378:	f000 faeb 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <HAL_TIM_Base_MspInit+0x44>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d113      	bne.n	80033c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_TIM_Base_MspInit+0x48>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <HAL_TIM_Base_MspInit+0x48>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_TIM_Base_MspInit+0x48>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	201d      	movs	r0, #29
 80033b8:	f000 faaf 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033bc:	201d      	movs	r0, #29
 80033be:	f000 fac8 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_TIM_MspPostInit+0x9c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d138      	bne.n	8003468 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <HAL_TIM_MspPostInit+0xa0>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <HAL_TIM_MspPostInit+0xa0>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	6153      	str	r3, [r2, #20]
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_TIM_MspPostInit+0xa0>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_TIM_MspPostInit+0xa0>)
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_TIM_MspPostInit+0xa0>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6153      	str	r3, [r2, #20]
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_TIM_MspPostInit+0xa0>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003426:	23c0      	movs	r3, #192	; 0xc0
 8003428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003436:	2302      	movs	r3, #2
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	4619      	mov	r1, r3
 8003440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003444:	f000 fcc2 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003448:	2303      	movs	r3, #3
 800344a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003458:	2302      	movs	r3, #2
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4619      	mov	r1, r3
 8003462:	4805      	ldr	r0, [pc, #20]	; (8003478 <HAL_TIM_MspPostInit+0xa4>)
 8003464:	f000 fcb2 	bl	8003dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003468:	bf00      	nop
 800346a:	3728      	adds	r7, #40	; 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40000400 	.word	0x40000400
 8003474:	40021000 	.word	0x40021000
 8003478:	48000400 	.word	0x48000400

0800347c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_UART_MspInit+0x90>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d131      	bne.n	8003502 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_UART_MspInit+0x94>)
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <HAL_UART_MspInit+0x94>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a8:	6193      	str	r3, [r2, #24]
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_UART_MspInit+0x94>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b6:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_UART_MspInit+0x94>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <HAL_UART_MspInit+0x94>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	6153      	str	r3, [r2, #20]
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_UART_MspInit+0x94>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034e0:	2307      	movs	r3, #7
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ee:	f000 fc6d 	bl	8003dcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2100      	movs	r1, #0
 80034f6:	2025      	movs	r0, #37	; 0x25
 80034f8:	f000 fa0f 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034fc:	2025      	movs	r0, #37	; 0x25
 80034fe:	f000 fa28 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003502:	bf00      	nop
 8003504:	3728      	adds	r7, #40	; 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40013800 	.word	0x40013800
 8003510:	40021000 	.word	0x40021000

08003514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003526:	e7fe      	b.n	8003526 <HardFault_Handler+0x4>

08003528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800352c:	e7fe      	b.n	800352c <MemManage_Handler+0x4>

0800352e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <BusFault_Handler+0x4>

08003534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <UsageFault_Handler+0x4>

0800353a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003568:	f000 f8ba 	bl	80036e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}

08003570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <TIM2_IRQHandler+0x10>)
 8003576:	f003 fd89 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000100 	.word	0x20000100

08003584 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <TIM3_IRQHandler+0x10>)
 800358a:	f003 fd7f 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200000b8 	.word	0x200000b8

08003598 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <I2C1_EV_IRQHandler+0x10>)
 800359e:	f001 f87d 	bl	800469c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000150 	.word	0x20000150

080035ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80035b0:	4802      	ldr	r0, [pc, #8]	; (80035bc <I2C1_ER_IRQHandler+0x10>)
 80035b2:	f001 f88d 	bl	80046d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000150 	.word	0x20000150

080035c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035c4:	4802      	ldr	r0, [pc, #8]	; (80035d0 <USART1_IRQHandler+0x10>)
 80035c6:	f005 f81f 	bl	8008608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200001f8 	.word	0x200001f8

080035d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <SystemInit+0x28>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <SystemInit+0x28>)
 80035e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <SystemInit+0x28>)
 80035ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ee:	609a      	str	r2, [r3, #8]
#endif
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003638 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003604:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003606:	e003      	b.n	8003610 <LoopCopyDataInit>

08003608 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800360a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800360c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800360e:	3104      	adds	r1, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003610:	480b      	ldr	r0, [pc, #44]	; (8003640 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003614:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003616:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003618:	d3f6      	bcc.n	8003608 <CopyDataInit>
	ldr	r2, =_sbss
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <LoopForever+0x12>)
	b	LoopFillZerobss
 800361c:	e002      	b.n	8003624 <LoopFillZerobss>

0800361e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800361e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003620:	f842 3b04 	str.w	r3, [r2], #4

08003624 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <LoopForever+0x16>)
	cmp	r2, r3
 8003626:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003628:	d3f9      	bcc.n	800361e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800362a:	f7ff ffd3 	bl	80035d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800362e:	f005 fd1b 	bl	8009068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003632:	f7ff f8df 	bl	80027f4 <main>

08003636 <LoopForever>:

LoopForever:
    b LoopForever
 8003636:	e7fe      	b.n	8003636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003638:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800363c:	08009794 	.word	0x08009794
	ldr	r0, =_sdata
 8003640:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003644:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8003648:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800364c:	200003c0 	.word	0x200003c0

08003650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003650:	e7fe      	b.n	8003650 <ADC1_2_IRQHandler>
	...

08003654 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_Init+0x28>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <HAL_Init+0x28>)
 800365e:	f043 0310 	orr.w	r3, r3, #16
 8003662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003664:	2003      	movs	r0, #3
 8003666:	f000 f94d 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800366a:	2000      	movs	r0, #0
 800366c:	f000 f808 	bl	8003680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003670:	f7ff fdc2 	bl	80031f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40022000 	.word	0x40022000

08003680 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_InitTick+0x54>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_InitTick+0x58>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003696:	fbb3 f3f1 	udiv	r3, r3, r1
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f965 	bl	800396e <HAL_SYSTICK_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00e      	b.n	80036cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d80a      	bhi.n	80036ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b4:	2200      	movs	r2, #0
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f000 f92d 	bl	800391a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c0:	4a06      	ldr	r2, [pc, #24]	; (80036dc <HAL_InitTick+0x5c>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000004 	.word	0x20000004
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	20000008 	.word	0x20000008

080036e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_IncTick+0x20>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_IncTick+0x24>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_IncTick+0x24>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2000000c 	.word	0x2000000c
 8003704:	20000398 	.word	0x20000398

08003708 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return uwTick;  
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_GetTick+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000398 	.word	0x20000398

08003720 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff ffee 	bl	8003708 <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d005      	beq.n	8003746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_Delay+0x40>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003746:	bf00      	nop
 8003748:	f7ff ffde 	bl	8003708 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d8f7      	bhi.n	8003748 <HAL_Delay+0x28>
  {
  }
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	2000000c 	.word	0x2000000c

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	; (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f7ff ff8e 	bl	8003804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff29 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800392c:	f7ff ff3e 	bl	80037ac <__NVIC_GetPriorityGrouping>
 8003930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff8e 	bl	8003858 <NVIC_EncodePriority>
 800393c:	4602      	mov	r2, r0
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5d 	bl	8003804 <__NVIC_SetPriority>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff31 	bl	80037c8 <__NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffa2 	bl	80038c0 <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003998:	2b02      	cmp	r3, #2
 800399a:	d005      	beq.n	80039a8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2204      	movs	r2, #4
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e027      	b.n	80039f8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 020e 	bic.w	r2, r2, #14
 80039b6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
    } 
  }
  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <HAL_FLASH_Program+0xd8>)
 8003a38:	7e1b      	ldrb	r3, [r3, #24]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_FLASH_Program+0x26>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e054      	b.n	8003aec <HAL_FLASH_Program+0xd0>
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_FLASH_Program+0xd8>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a4c:	f000 f8a8 	bl	8003ba0 <FLASH_WaitForLastOperation>
 8003a50:	4603      	mov	r3, r0
 8003a52:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d144      	bne.n	8003ae4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003a60:	2301      	movs	r3, #1
 8003a62:	757b      	strb	r3, [r7, #21]
 8003a64:	e007      	b.n	8003a76 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d102      	bne.n	8003a72 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	757b      	strb	r3, [r7, #21]
 8003a70:	e001      	b.n	8003a76 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003a72:	2304      	movs	r3, #4
 8003a74:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	75bb      	strb	r3, [r7, #22]
 8003a7a:	e02d      	b.n	8003ad8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003a7c:	7dbb      	ldrb	r3, [r7, #22]
 8003a7e:	005a      	lsls	r2, r3, #1
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	eb02 0c03 	add.w	ip, r2, r3
 8003a86:	7dbb      	ldrb	r3, [r7, #22]
 8003a88:	0119      	lsls	r1, r3, #4
 8003a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8e:	f1c1 0620 	rsb	r6, r1, #32
 8003a92:	f1a1 0020 	sub.w	r0, r1, #32
 8003a96:	fa22 f401 	lsr.w	r4, r2, r1
 8003a9a:	fa03 f606 	lsl.w	r6, r3, r6
 8003a9e:	4334      	orrs	r4, r6
 8003aa0:	fa23 f000 	lsr.w	r0, r3, r0
 8003aa4:	4304      	orrs	r4, r0
 8003aa6:	fa23 f501 	lsr.w	r5, r3, r1
 8003aaa:	b2a3      	uxth	r3, r4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4660      	mov	r0, ip
 8003ab0:	f000 f85a 	bl	8003b68 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ab4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ab8:	f000 f872 	bl	8003ba0 <FLASH_WaitForLastOperation>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_FLASH_Program+0xdc>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <HAL_FLASH_Program+0xdc>)
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003ad2:	7dbb      	ldrb	r3, [r7, #22]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	75bb      	strb	r3, [r7, #22]
 8003ad8:	7dba      	ldrb	r2, [r7, #22]
 8003ada:	7d7b      	ldrb	r3, [r7, #21]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3cd      	bcc.n	8003a7c <HAL_FLASH_Program+0x60>
 8003ae0:	e000      	b.n	8003ae4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003ae2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_FLASH_Program+0xd8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	761a      	strb	r2, [r3, #24]

  return status;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af4:	200003a0 	.word	0x200003a0
 8003af8:	40022000 	.word	0x40022000

08003afc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_FLASH_Unlock+0x40>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_FLASH_Unlock+0x40>)
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <HAL_FLASH_Unlock+0x44>)
 8003b16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_FLASH_Unlock+0x40>)
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_FLASH_Unlock+0x48>)
 8003b1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_FLASH_Unlock+0x40>)
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	45670123 	.word	0x45670123
 8003b44:	cdef89ab 	.word	0xcdef89ab

08003b48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_FLASH_Lock+0x1c>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <HAL_FLASH_Lock+0x1c>)
 8003b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b56:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40022000 	.word	0x40022000

08003b68 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <FLASH_Program_HalfWord+0x30>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <FLASH_Program_HalfWord+0x34>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <FLASH_Program_HalfWord+0x34>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	801a      	strh	r2, [r3, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	200003a0 	.word	0x200003a0
 8003b9c:	40022000 	.word	0x40022000

08003ba0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff fdae 	bl	8003708 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003bae:	e010      	b.n	8003bd2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d00c      	beq.n	8003bd2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <FLASH_WaitForLastOperation+0x2e>
 8003bbe:	f7ff fda3 	bl	8003708 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d201      	bcs.n	8003bd2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e01f      	b.n	8003c12 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <FLASH_WaitForLastOperation+0x7c>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d0e8      	beq.n	8003bb0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <FLASH_WaitForLastOperation+0x7c>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d102      	bne.n	8003bf0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <FLASH_WaitForLastOperation+0x7c>)
 8003bec:	2220      	movs	r2, #32
 8003bee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <FLASH_WaitForLastOperation+0x7c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d005      	beq.n	8003c08 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <FLASH_WaitForLastOperation+0x7c>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d103      	bne.n	8003c10 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c08:	f000 f80a 	bl	8003c20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000

08003c20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <FLASH_SetErrorCode+0x5c>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d109      	bne.n	8003c4a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <FLASH_SetErrorCode+0x60>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f043 0302 	orr.w	r3, r3, #2
 8003c3e:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <FLASH_SetErrorCode+0x60>)
 8003c40:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f043 0310 	orr.w	r3, r3, #16
 8003c48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <FLASH_SetErrorCode+0x5c>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d109      	bne.n	8003c6a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <FLASH_SetErrorCode+0x60>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <FLASH_SetErrorCode+0x60>)
 8003c60:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <FLASH_SetErrorCode+0x5c>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60d3      	str	r3, [r2, #12]
}  
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	200003a0 	.word	0x200003a0

08003c84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c96:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_FLASHEx_Erase+0xcc>)
 8003c98:	7e1b      	ldrb	r3, [r3, #24]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_FLASHEx_Erase+0x1e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e052      	b.n	8003d48 <HAL_FLASHEx_Erase+0xc4>
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_FLASHEx_Erase+0xcc>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d115      	bne.n	8003cdc <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003cb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cb4:	f7ff ff74 	bl	8003ba0 <FLASH_WaitForLastOperation>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d140      	bne.n	8003d40 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003cbe:	f000 f84b 	bl	8003d58 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cc6:	f7ff ff6b 	bl	8003ba0 <FLASH_WaitForLastOperation>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HAL_FLASHEx_Erase+0xd0>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_FLASHEx_Erase+0xd0>)
 8003cd4:	f023 0304 	bic.w	r3, r3, #4
 8003cd8:	6113      	str	r3, [r2, #16]
 8003cda:	e031      	b.n	8003d40 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003cdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ce0:	f7ff ff5e 	bl	8003ba0 <FLASH_WaitForLastOperation>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d12a      	bne.n	8003d40 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	e019      	b.n	8003d2e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003cfa:	68b8      	ldr	r0, [r7, #8]
 8003cfc:	f000 f846 	bl	8003d8c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d04:	f7ff ff4c 	bl	8003ba0 <FLASH_WaitForLastOperation>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_FLASHEx_Erase+0xd0>)
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <HAL_FLASHEx_Erase+0xd0>)
 8003d12:	f023 0302 	bic.w	r3, r3, #2
 8003d16:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	601a      	str	r2, [r3, #0]
            break;
 8003d24:	e00c      	b.n	8003d40 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	02da      	lsls	r2, r3, #11
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3dc      	bcc.n	8003cfa <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_FLASHEx_Erase+0xcc>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	761a      	strb	r2, [r3, #24]

  return status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200003a0 	.word	0x200003a0
 8003d54:	40022000 	.word	0x40022000

08003d58 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <FLASH_MassErase+0x2c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <FLASH_MassErase+0x30>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <FLASH_MassErase+0x30>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <FLASH_MassErase+0x30>)
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <FLASH_MassErase+0x30>)
 8003d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d78:	6113      	str	r3, [r2, #16]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	200003a0 	.word	0x200003a0
 8003d88:	40022000 	.word	0x40022000

08003d8c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <FLASH_PageErase+0x38>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <FLASH_PageErase+0x3c>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <FLASH_PageErase+0x3c>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <FLASH_PageErase+0x3c>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <FLASH_PageErase+0x3c>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <FLASH_PageErase+0x3c>)
 8003db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db6:	6113      	str	r3, [r2, #16]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	200003a0 	.word	0x200003a0
 8003dc8:	40022000 	.word	0x40022000

08003dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dda:	e154      	b.n	8004086 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8146 	beq.w	8004080 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d00b      	beq.n	8003e14 <HAL_GPIO_Init+0x48>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d007      	beq.n	8003e14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e08:	2b11      	cmp	r3, #17
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d130      	bne.n	8003e76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 0201 	and.w	r2, r3, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0xea>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b12      	cmp	r3, #18
 8003eb4:	d123      	bne.n	8003efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	08da      	lsrs	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	220f      	movs	r2, #15
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	6939      	ldr	r1, [r7, #16]
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a0 	beq.w	8004080 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f40:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_GPIO_Init+0x2d8>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a57      	ldr	r2, [pc, #348]	; (80040a4 <HAL_GPIO_Init+0x2d8>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <HAL_GPIO_Init+0x2d8>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f58:	4a53      	ldr	r2, [pc, #332]	; (80040a8 <HAL_GPIO_Init+0x2dc>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	3302      	adds	r3, #2
 8003f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f82:	d019      	beq.n	8003fb8 <HAL_GPIO_Init+0x1ec>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a49      	ldr	r2, [pc, #292]	; (80040ac <HAL_GPIO_Init+0x2e0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <HAL_GPIO_Init+0x1e8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a48      	ldr	r2, [pc, #288]	; (80040b0 <HAL_GPIO_Init+0x2e4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00d      	beq.n	8003fb0 <HAL_GPIO_Init+0x1e4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a47      	ldr	r2, [pc, #284]	; (80040b4 <HAL_GPIO_Init+0x2e8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <HAL_GPIO_Init+0x1e0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a46      	ldr	r2, [pc, #280]	; (80040b8 <HAL_GPIO_Init+0x2ec>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_GPIO_Init+0x1dc>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	e008      	b.n	8003fba <HAL_GPIO_Init+0x1ee>
 8003fa8:	2305      	movs	r3, #5
 8003faa:	e006      	b.n	8003fba <HAL_GPIO_Init+0x1ee>
 8003fac:	2303      	movs	r3, #3
 8003fae:	e004      	b.n	8003fba <HAL_GPIO_Init+0x1ee>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e002      	b.n	8003fba <HAL_GPIO_Init+0x1ee>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_GPIO_Init+0x1ee>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	f002 0203 	and.w	r2, r2, #3
 8003fc0:	0092      	lsls	r2, r2, #2
 8003fc2:	4093      	lsls	r3, r2
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fca:	4937      	ldr	r1, [pc, #220]	; (80040a8 <HAL_GPIO_Init+0x2dc>)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd8:	4b38      	ldr	r3, [pc, #224]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004026:	4a25      	ldr	r2, [pc, #148]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800402c:	4b23      	ldr	r3, [pc, #140]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004050:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	43db      	mvns	r3, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <HAL_GPIO_Init+0x2f0>)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3301      	adds	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	f47f aea3 	bne.w	8003ddc <HAL_GPIO_Init+0x10>
  }
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40010000 	.word	0x40010000
 80040ac:	48000400 	.word	0x48000400
 80040b0:	48000800 	.word	0x48000800
 80040b4:	48000c00 	.word	0x48000c00
 80040b8:	48001000 	.word	0x48001000
 80040bc:	40010400 	.word	0x40010400

080040c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	e001      	b.n	80040e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800410c:	e002      	b.n	8004114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e081      	b.n	8004236 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff f87a 	bl	8003240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	e006      	b.n	80041a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d104      	bne.n	80041ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	ea42 0103 	orr.w	r1, r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69d9      	ldr	r1, [r3, #28]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	817b      	strh	r3, [r7, #10]
 8004252:	460b      	mov	r3, r1
 8004254:	813b      	strh	r3, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b20      	cmp	r3, #32
 8004264:	f040 80f9 	bne.w	800445a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_I2C_Mem_Write+0x34>
 800426e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0ed      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_I2C_Mem_Write+0x4e>
 800428a:	2302      	movs	r3, #2
 800428c:	e0e6      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004296:	f7ff fa37 	bl	8003708 <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2319      	movs	r3, #25
 80042a2:	2201      	movs	r2, #1
 80042a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 ffd8 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0d1      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2240      	movs	r2, #64	; 0x40
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e0:	88f8      	ldrh	r0, [r7, #6]
 80042e2:	893a      	ldrh	r2, [r7, #8]
 80042e4:	8979      	ldrh	r1, [r7, #10]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	4603      	mov	r3, r0
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fb91 	bl	8004a18 <I2C_RequestMemoryWrite>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0a9      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2bff      	cmp	r3, #255	; 0xff
 8004310:	d90e      	bls.n	8004330 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	22ff      	movs	r2, #255	; 0xff
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	b2da      	uxtb	r2, r3
 800431e:	8979      	ldrh	r1, [r7, #10]
 8004320:	2300      	movs	r3, #0
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f001 f8bb 	bl	80054a4 <I2C_TransferConfig>
 800432e:	e00f      	b.n	8004350 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	b2da      	uxtb	r2, r3
 8004340:	8979      	ldrh	r1, [r7, #10]
 8004342:	2300      	movs	r3, #0
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 f8aa 	bl	80054a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 ffc2 	bl	80052de <I2C_WaitOnTXISFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e07b      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d034      	beq.n	8004408 <HAL_I2C_Mem_Write+0x1c8>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d130      	bne.n	8004408 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	2200      	movs	r2, #0
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 ff54 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e04d      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2bff      	cmp	r3, #255	; 0xff
 80043c8:	d90e      	bls.n	80043e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	22ff      	movs	r2, #255	; 0xff
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	2300      	movs	r3, #0
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f001 f85f 	bl	80054a4 <I2C_TransferConfig>
 80043e6:	e00f      	b.n	8004408 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	8979      	ldrh	r1, [r7, #10]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f001 f84e 	bl	80054a4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d19e      	bne.n	8004350 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 ffa1 	bl	800535e <I2C_WaitOnSTOPFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e01a      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2220      	movs	r2, #32
 800442c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_I2C_Mem_Write+0x224>)
 800443a:	400b      	ands	r3, r1
 800443c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	fe00e800 	.word	0xfe00e800

08004468 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b20      	cmp	r3, #32
 800448c:	f040 80fd 	bne.w	800468a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_I2C_Mem_Read+0x34>
 8004496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0f1      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Mem_Read+0x4e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0ea      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044be:	f7ff f923 	bl	8003708 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2319      	movs	r3, #25
 80044ca:	2201      	movs	r2, #1
 80044cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fec4 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0d5      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2222      	movs	r2, #34	; 0x22
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2240      	movs	r2, #64	; 0x40
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004508:	88f8      	ldrh	r0, [r7, #6]
 800450a:	893a      	ldrh	r2, [r7, #8]
 800450c:	8979      	ldrh	r1, [r7, #10]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4603      	mov	r3, r0
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fad1 	bl	8004ac0 <I2C_RequestMemoryRead>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0ad      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2bff      	cmp	r3, #255	; 0xff
 8004538:	d90e      	bls.n	8004558 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	22ff      	movs	r2, #255	; 0xff
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	b2da      	uxtb	r2, r3
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	4b52      	ldr	r3, [pc, #328]	; (8004694 <HAL_I2C_Mem_Read+0x22c>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 ffa7 	bl	80054a4 <I2C_TransferConfig>
 8004556:	e00f      	b.n	8004578 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	b2da      	uxtb	r2, r3
 8004568:	8979      	ldrh	r1, [r7, #10]
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <HAL_I2C_Mem_Read+0x22c>)
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 ff96 	bl	80054a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2200      	movs	r2, #0
 8004580:	2104      	movs	r1, #4
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fe6b 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e07c      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d034      	beq.n	8004638 <HAL_I2C_Mem_Read+0x1d0>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d130      	bne.n	8004638 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fe3c 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e04d      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2bff      	cmp	r3, #255	; 0xff
 80045f8:	d90e      	bls.n	8004618 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	b2da      	uxtb	r2, r3
 8004606:	8979      	ldrh	r1, [r7, #10]
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 ff47 	bl	80054a4 <I2C_TransferConfig>
 8004616:	e00f      	b.n	8004638 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	b2da      	uxtb	r2, r3
 8004628:	8979      	ldrh	r1, [r7, #10]
 800462a:	2300      	movs	r3, #0
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 ff36 	bl	80054a4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d19a      	bne.n	8004578 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fe89 	bl	800535e <I2C_WaitOnSTOPFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e01a      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2220      	movs	r2, #32
 800465c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_I2C_Mem_Read+0x230>)
 800466a:	400b      	ands	r3, r1
 800466c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	80002400 	.word	0x80002400
 8004698:	fe00e800 	.word	0xfe00e800

0800469c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
  }
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_I2C_ER_IRQHandler+0x46>
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	f043 0201 	orr.w	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004714:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	0a9b      	lsrs	r3, r3, #10
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d010      	beq.n	8004744 <HAL_I2C_ER_IRQHandler+0x74>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	09db      	lsrs	r3, r3, #7
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004742:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	0a5b      	lsrs	r3, r3, #9
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d010      	beq.n	8004772 <HAL_I2C_ER_IRQHandler+0xa2>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	09db      	lsrs	r3, r3, #7
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f043 0202 	orr.w	r2, r3, #2
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004770:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 030b 	and.w	r3, r3, #11
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fc31 	bl	8004fec <I2C_ITError>
  }
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
 80047c6:	4613      	mov	r3, r2
 80047c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <I2C_Slave_ISR_IT+0x24>
 8004832:	2302      	movs	r3, #2
 8004834:	e0ec      	b.n	8004a10 <I2C_Slave_ISR_IT+0x1fe>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <I2C_Slave_ISR_IT+0x4c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004856:	6939      	ldr	r1, [r7, #16]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fa67 	bl	8004d2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d04d      	beq.n	8004906 <I2C_Slave_ISR_IT+0xf4>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d047      	beq.n	8004906 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d128      	bne.n	80048d2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b28      	cmp	r3, #40	; 0x28
 800488a:	d108      	bne.n	800489e <I2C_Slave_ISR_IT+0x8c>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004892:	d104      	bne.n	800489e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fb52 	bl	8004f40 <I2C_ITListenCplt>
 800489c:	e032      	b.n	8004904 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b29      	cmp	r3, #41	; 0x29
 80048a8:	d10e      	bne.n	80048c8 <I2C_Slave_ISR_IT+0xb6>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b0:	d00a      	beq.n	80048c8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2210      	movs	r2, #16
 80048b8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fc8d 	bl	80051da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f9d5 	bl	8004c70 <I2C_ITSlaveSeqCplt>
 80048c6:	e01d      	b.n	8004904 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2210      	movs	r2, #16
 80048ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80048d0:	e096      	b.n	8004a00 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2210      	movs	r2, #16
 80048d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f043 0204 	orr.w	r2, r3, #4
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <I2C_Slave_ISR_IT+0xe4>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f2:	f040 8085 	bne.w	8004a00 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	4619      	mov	r1, r3
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fb75 	bl	8004fec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004902:	e07d      	b.n	8004a00 <I2C_Slave_ISR_IT+0x1ee>
 8004904:	e07c      	b.n	8004a00 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d030      	beq.n	8004974 <I2C_Slave_ISR_IT+0x162>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02a      	beq.n	8004974 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d018      	beq.n	800495a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d14f      	bne.n	8004a04 <I2C_Slave_ISR_IT+0x1f2>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800496a:	d04b      	beq.n	8004a04 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f97f 	bl	8004c70 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004972:	e047      	b.n	8004a04 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	08db      	lsrs	r3, r3, #3
 8004984:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800498c:	6939      	ldr	r1, [r7, #16]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f8ea 	bl	8004b68 <I2C_ITAddrCplt>
 8004994:	e037      	b.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d031      	beq.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d02b      	beq.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80049e8:	e00d      	b.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049f0:	d002      	beq.n	80049f8 <I2C_Slave_ISR_IT+0x1e6>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f939 	bl	8004c70 <I2C_ITSlaveSeqCplt>
 80049fe:	e002      	b.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004a04:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	8979      	ldrh	r1, [r7, #10]
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <I2C_RequestMemoryWrite+0xa4>)
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fd2f 	bl	80054a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fc47 	bl	80052de <I2C_WaitOnTXISFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e02c      	b.n	8004ab4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d105      	bne.n	8004a6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a60:	893b      	ldrh	r3, [r7, #8]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
 8004a6a:	e015      	b.n	8004a98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a6c:	893b      	ldrh	r3, [r7, #8]
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fc2d 	bl	80052de <I2C_WaitOnTXISFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e012      	b.n	8004ab4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8e:	893b      	ldrh	r3, [r7, #8]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fbdb 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	80002000 	.word	0x80002000

08004ac0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	813b      	strh	r3, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	8979      	ldrh	r1, [r7, #10]
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <I2C_RequestMemoryRead+0xa4>)
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fcdc 	bl	80054a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	69b9      	ldr	r1, [r7, #24]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fbf4 	bl	80052de <I2C_WaitOnTXISFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e02c      	b.n	8004b5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b06:	893b      	ldrh	r3, [r7, #8]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b10:	e015      	b.n	8004b3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b12:	893b      	ldrh	r3, [r7, #8]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	69b9      	ldr	r1, [r7, #24]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fbda 	bl	80052de <I2C_WaitOnTXISFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e012      	b.n	8004b5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b34:	893b      	ldrh	r3, [r7, #8]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fb88 	bl	800525e <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	80002000 	.word	0x80002000

08004b68 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b7e:	2b28      	cmp	r3, #40	; 0x28
 8004b80:	d16a      	bne.n	8004c58 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ba0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004bbc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d138      	bne.n	8004c38 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004bc6:	897b      	ldrh	r3, [r7, #10]
 8004bc8:	09db      	lsrs	r3, r3, #7
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	89bb      	ldrh	r3, [r7, #12]
 8004bce:	4053      	eors	r3, r2
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f003 0306 	and.w	r3, r3, #6
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11c      	bne.n	8004c14 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d13b      	bne.n	8004c68 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c06:	89ba      	ldrh	r2, [r7, #12]
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fdd4 	bl	80047ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c12:	e029      	b.n	8004c68 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fc6f 	bl	8005500 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c2a:	89ba      	ldrh	r2, [r7, #12]
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fdc2 	bl	80047ba <HAL_I2C_AddrCallback>
}
 8004c36:	e017      	b.n	8004c68 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fc5f 	bl	8005500 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c4a:	89ba      	ldrh	r2, [r7, #12]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fdb2 	bl	80047ba <HAL_I2C_AddrCallback>
}
 8004c56:	e007      	b.n	8004c68 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0b9b      	lsrs	r3, r3, #14
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e00d      	b.n	8004cc2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	0bdb      	lsrs	r3, r3, #15
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b29      	cmp	r3, #41	; 0x29
 8004ccc:	d112      	bne.n	8004cf4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2228      	movs	r2, #40	; 0x28
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2221      	movs	r2, #33	; 0x21
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc0e 	bl	8005500 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fd50 	bl	8004792 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cf2:	e017      	b.n	8004d24 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfe:	d111      	bne.n	8004d24 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2228      	movs	r2, #40	; 0x28
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2222      	movs	r2, #34	; 0x22
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d0e:	2102      	movs	r1, #2
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fbf5 	bl	8005500 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fd41 	bl	80047a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d48:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b21      	cmp	r3, #33	; 0x21
 8004d56:	d002      	beq.n	8004d5e <I2C_ITSlaveCplt+0x32>
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b29      	cmp	r3, #41	; 0x29
 8004d5c:	d108      	bne.n	8004d70 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004d5e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fbcc 	bl	8005500 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2221      	movs	r2, #33	; 0x21
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6e:	e00d      	b.n	8004d8c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b22      	cmp	r3, #34	; 0x22
 8004d74:	d002      	beq.n	8004d7c <I2C_ITSlaveCplt+0x50>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7a:	d107      	bne.n	8004d8c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004d7c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fbbd 	bl	8005500 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2222      	movs	r2, #34	; 0x22
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b64      	ldr	r3, [pc, #400]	; (8004f38 <I2C_ITSlaveCplt+0x20c>)
 8004da8:	400b      	ands	r3, r1
 8004daa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fa14 	bl	80051da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	0b9b      	lsrs	r3, r3, #14
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dcc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d020      	beq.n	8004e18 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de4:	e018      	b.n	8004e18 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	0bdb      	lsrs	r3, r3, #15
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0304 	bic.w	r3, r3, #4
 8004e2a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	f043 0204 	orr.w	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d010      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8a7 	bl	8004fec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b28      	cmp	r3, #40	; 0x28
 8004ea8:	d141      	bne.n	8004f2e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f847 	bl	8004f40 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eb2:	e03c      	b.n	8004f2e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ebc:	d014      	beq.n	8004ee8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fed6 	bl	8004c70 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <I2C_ITSlaveCplt+0x210>)
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fc78 	bl	80047d6 <HAL_I2C_ListenCpltCallback>
}
 8004ee6:	e022      	b.n	8004f2e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b22      	cmp	r3, #34	; 0x22
 8004ef2:	d10e      	bne.n	8004f12 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fc4b 	bl	80047a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f10:	e00d      	b.n	8004f2e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fc32 	bl	8004792 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	fe00e800 	.word	0xfe00e800
 8004f3c:	ffff0000 	.word	0xffff0000

08004f40 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <I2C_ITListenCplt+0xa8>)
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d022      	beq.n	8004fbe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f043 0204 	orr.w	r2, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fbe:	f248 0103 	movw	r1, #32771	; 0x8003
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa9c 	bl	8005500 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2210      	movs	r2, #16
 8004fce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fbfc 	bl	80047d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	ffff0000 	.word	0xffff0000

08004fec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a5d      	ldr	r2, [pc, #372]	; (8005180 <I2C_ITError+0x194>)
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b28      	cmp	r3, #40	; 0x28
 8005022:	d005      	beq.n	8005030 <I2C_ITError+0x44>
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b29      	cmp	r3, #41	; 0x29
 8005028:	d002      	beq.n	8005030 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b2a      	cmp	r3, #42	; 0x2a
 800502e:	d10b      	bne.n	8005048 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005030:	2103      	movs	r1, #3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa64 	bl	8005500 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2228      	movs	r2, #40	; 0x28
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a50      	ldr	r2, [pc, #320]	; (8005184 <I2C_ITError+0x198>)
 8005044:	635a      	str	r2, [r3, #52]	; 0x34
 8005046:	e011      	b.n	800506c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005048:	f248 0103 	movw	r1, #32771	; 0x8003
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fa57 	bl	8005500 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b60      	cmp	r3, #96	; 0x60
 800505c:	d003      	beq.n	8005066 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	2b00      	cmp	r3, #0
 8005078:	d039      	beq.n	80050ee <I2C_ITError+0x102>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b11      	cmp	r3, #17
 800507e:	d002      	beq.n	8005086 <I2C_ITError+0x9a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b21      	cmp	r3, #33	; 0x21
 8005084:	d133      	bne.n	80050ee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005094:	d107      	bne.n	80050a6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fca9 	bl	8003a02 <HAL_DMA_GetState>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d017      	beq.n	80050e6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	4a33      	ldr	r2, [pc, #204]	; (8005188 <I2C_ITError+0x19c>)
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fc5b 	bl	8003986 <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04d      	beq.n	8005172 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050e4:	e045      	b.n	8005172 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f850 	bl	800518c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ec:	e041      	b.n	8005172 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d039      	beq.n	800516a <I2C_ITError+0x17e>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b12      	cmp	r3, #18
 80050fa:	d002      	beq.n	8005102 <I2C_ITError+0x116>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b22      	cmp	r3, #34	; 0x22
 8005100:	d133      	bne.n	800516a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800510c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005110:	d107      	bne.n	8005122 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005120:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	4618      	mov	r0, r3
 8005128:	f7fe fc6b 	bl	8003a02 <HAL_DMA_GetState>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d017      	beq.n	8005162 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	4a14      	ldr	r2, [pc, #80]	; (8005188 <I2C_ITError+0x19c>)
 8005138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe fc1d 	bl	8003986 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005160:	e009      	b.n	8005176 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f812 	bl	800518c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005168:	e005      	b.n	8005176 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f80e 	bl	800518c <I2C_TreatErrorCallback>
  }
}
 8005170:	e002      	b.n	8005178 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005176:	bf00      	nop
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	ffff0000 	.word	0xffff0000
 8005184:	08004813 	.word	0x08004813
 8005188:	08005223 	.word	0x08005223

0800518c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b60      	cmp	r3, #96	; 0x60
 800519e:	d10e      	bne.n	80051be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fb21 	bl	80047fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051bc:	e009      	b.n	80051d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fb0c 	bl	80047ea <HAL_I2C_ErrorCallback>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d103      	bne.n	80051f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d007      	beq.n	8005216 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	619a      	str	r2, [r3, #24]
  }
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	2200      	movs	r2, #0
 800523e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	2200      	movs	r2, #0
 800524e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff9b 	bl	800518c <I2C_TreatErrorCallback>
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800526e:	e022      	b.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d01e      	beq.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fe fa46 	bl	8003708 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d113      	bne.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e00f      	b.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699a      	ldr	r2, [r3, #24]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d0cd      	beq.n	8005270 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052ea:	e02c      	b.n	8005346 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f871 	bl	80053d8 <I2C_IsAcknowledgeFailed>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e02a      	b.n	8005356 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d01e      	beq.n	8005346 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005308:	f7fe f9fe 	bl	8003708 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d113      	bne.n	8005346 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e007      	b.n	8005356 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b02      	cmp	r3, #2
 8005352:	d1cb      	bne.n	80052ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800536a:	e028      	b.n	80053be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f831 	bl	80053d8 <I2C_IsAcknowledgeFailed>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e026      	b.n	80053ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fe f9c2 	bl	8003708 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d113      	bne.n	80053be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e007      	b.n	80053ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d1cf      	bne.n	800536c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d151      	bne.n	8005496 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f2:	e022      	b.n	800543a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d01e      	beq.n	800543a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fc:	f7fe f984 	bl	8003708 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <I2C_IsAcknowledgeFailed+0x3a>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d113      	bne.n	800543a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e02e      	b.n	8005498 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b20      	cmp	r3, #32
 8005446:	d1d5      	bne.n	80053f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2210      	movs	r2, #16
 800544e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2220      	movs	r2, #32
 8005456:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff febe 	bl	80051da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6859      	ldr	r1, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800546a:	400b      	ands	r3, r1
 800546c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	fe00e800 	.word	0xfe00e800

080054a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	817b      	strh	r3, [r7, #10]
 80054b2:	4613      	mov	r3, r2
 80054b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	0d5b      	lsrs	r3, r3, #21
 80054c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <I2C_TransferConfig+0x58>)
 80054c6:	430b      	orrs	r3, r1
 80054c8:	43db      	mvns	r3, r3
 80054ca:	ea02 0103 	and.w	r1, r2, r3
 80054ce:	897b      	ldrh	r3, [r7, #10]
 80054d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054d4:	7a7b      	ldrb	r3, [r7, #9]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	03ff63ff 	.word	0x03ff63ff

08005500 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005510:	887b      	ldrh	r3, [r7, #2]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00f      	beq.n	800553a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005520:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800552e:	2b28      	cmp	r3, #40	; 0x28
 8005530:	d003      	beq.n	800553a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005538:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800553a:	887b      	ldrh	r3, [r7, #2]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00f      	beq.n	8005564 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800554a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005558:	2b28      	cmp	r3, #40	; 0x28
 800555a:	d003      	beq.n	8005564 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005562:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005568:	2b00      	cmp	r3, #0
 800556a:	da03      	bge.n	8005574 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005572:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005574:	887b      	ldrh	r3, [r7, #2]
 8005576:	2b10      	cmp	r3, #16
 8005578:	d103      	bne.n	8005582 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005580:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005582:	887b      	ldrh	r3, [r7, #2]
 8005584:	2b20      	cmp	r3, #32
 8005586:	d103      	bne.n	8005590 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f043 0320 	orr.w	r3, r3, #32
 800558e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005590:	887b      	ldrh	r3, [r7, #2]
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d103      	bne.n	800559e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	43da      	mvns	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	400a      	ands	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d138      	bne.n	8005644 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055dc:	2302      	movs	r3, #2
 80055de:	e032      	b.n	8005646 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800560e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6819      	ldr	r1, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d139      	bne.n	80056dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005672:	2302      	movs	r3, #2
 8005674:	e033      	b.n	80056de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2224      	movs	r2, #36	; 0x24
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6193      	str	r3, [r2, #24]
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4905      	ldr	r1, [pc, #20]	; (8005728 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40021000 	.word	0x40021000
 8005728:	40010000 	.word	0x40010000

0800572c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005732:	af00      	add	r7, sp, #0
 8005734:	1d3b      	adds	r3, r7, #4
 8005736:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f000 bef4 	b.w	800652e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 816a 	beq.w	8005a2a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005756:	4bb3      	ldr	r3, [pc, #716]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00c      	beq.n	800577c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005762:	4bb0      	ldr	r3, [pc, #704]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b08      	cmp	r3, #8
 800576c:	d159      	bne.n	8005822 <HAL_RCC_OscConfig+0xf6>
 800576e:	4bad      	ldr	r3, [pc, #692]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d152      	bne.n	8005822 <HAL_RCC_OscConfig+0xf6>
 800577c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005780:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005790:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d102      	bne.n	80057ae <HAL_RCC_OscConfig+0x82>
 80057a8:	4b9e      	ldr	r3, [pc, #632]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0xae>
 80057ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80057c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80057ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80057d6:	4b93      	ldr	r3, [pc, #588]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80057e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80057e6:	fa92 f2a2 	rbit	r2, r2
 80057ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80057ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80057f2:	fab2 f282 	clz	r2, r2
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	f042 0220 	orr.w	r2, r2, #32
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	f002 021f 	and.w	r2, r2, #31
 8005802:	2101      	movs	r1, #1
 8005804:	fa01 f202 	lsl.w	r2, r1, r2
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 810c 	beq.w	8005a28 <HAL_RCC_OscConfig+0x2fc>
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f040 8106 	bne.w	8005a28 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f000 be86 	b.w	800652e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	d106      	bne.n	800583c <HAL_RCC_OscConfig+0x110>
 800582e:	4b7d      	ldr	r3, [pc, #500]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7c      	ldr	r2, [pc, #496]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e030      	b.n	800589e <HAL_RCC_OscConfig+0x172>
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10c      	bne.n	8005860 <HAL_RCC_OscConfig+0x134>
 8005846:	4b77      	ldr	r3, [pc, #476]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a76      	ldr	r2, [pc, #472]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 800584c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b74      	ldr	r3, [pc, #464]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a73      	ldr	r2, [pc, #460]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e01e      	b.n	800589e <HAL_RCC_OscConfig+0x172>
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800586a:	d10c      	bne.n	8005886 <HAL_RCC_OscConfig+0x15a>
 800586c:	4b6d      	ldr	r3, [pc, #436]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6c      	ldr	r2, [pc, #432]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a69      	ldr	r2, [pc, #420]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 800587e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e00b      	b.n	800589e <HAL_RCC_OscConfig+0x172>
 8005886:	4b67      	ldr	r3, [pc, #412]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a66      	ldr	r2, [pc, #408]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 800588c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b64      	ldr	r3, [pc, #400]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a63      	ldr	r2, [pc, #396]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800589e:	4b61      	ldr	r3, [pc, #388]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	f023 020f 	bic.w	r2, r3, #15
 80058a6:	1d3b      	adds	r3, r7, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	495d      	ldr	r1, [pc, #372]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d059      	beq.n	8005970 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058bc:	f7fd ff24 	bl	8003708 <HAL_GetTick>
 80058c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c4:	e00a      	b.n	80058dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c6:	f7fd ff1f 	bl	8003708 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d902      	bls.n	80058dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	f000 be29 	b.w	800652e <HAL_RCC_OscConfig+0xe02>
 80058dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80058e8:	fa93 f3a3 	rbit	r3, r3
 80058ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80058f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d102      	bne.n	800590e <HAL_RCC_OscConfig+0x1e2>
 8005908:	4b46      	ldr	r3, [pc, #280]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	e015      	b.n	800593a <HAL_RCC_OscConfig+0x20e>
 800590e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005912:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005916:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800591a:	fa93 f3a3 	rbit	r3, r3
 800591e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005926:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800592a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005936:	4b3b      	ldr	r3, [pc, #236]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800593e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005942:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005946:	fa92 f2a2 	rbit	r2, r2
 800594a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800594e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005952:	fab2 f282 	clz	r2, r2
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	f042 0220 	orr.w	r2, r2, #32
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	f002 021f 	and.w	r2, r2, #31
 8005962:	2101      	movs	r1, #1
 8005964:	fa01 f202 	lsl.w	r2, r1, r2
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ab      	beq.n	80058c6 <HAL_RCC_OscConfig+0x19a>
 800596e:	e05c      	b.n	8005a2a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7fd feca 	bl	8003708 <HAL_GetTick>
 8005974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800597a:	f7fd fec5 	bl	8003708 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	; 0x64
 8005988:	d902      	bls.n	8005990 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	f000 bdcf 	b.w	800652e <HAL_RCC_OscConfig+0xe02>
 8005990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005994:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005998:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800599c:	fa93 f3a3 	rbit	r3, r3
 80059a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80059a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a8:	fab3 f383 	clz	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d102      	bne.n	80059c2 <HAL_RCC_OscConfig+0x296>
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	e015      	b.n	80059ee <HAL_RCC_OscConfig+0x2c2>
 80059c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80059ce:	fa93 f3a3 	rbit	r3, r3
 80059d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80059d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80059de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80059e2:	fa93 f3a3 	rbit	r3, r3
 80059e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <HAL_RCC_OscConfig+0x2f8>)
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80059f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80059fa:	fa92 f2a2 	rbit	r2, r2
 80059fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005a02:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005a06:	fab2 f282 	clz	r2, r2
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	f042 0220 	orr.w	r2, r2, #32
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	f002 021f 	and.w	r2, r2, #31
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1ab      	bne.n	800597a <HAL_RCC_OscConfig+0x24e>
 8005a22:	e002      	b.n	8005a2a <HAL_RCC_OscConfig+0x2fe>
 8005a24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 816f 	beq.w	8005d18 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005a3a:	4bd0      	ldr	r3, [pc, #832]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a46:	4bcd      	ldr	r3, [pc, #820]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d16c      	bne.n	8005b2c <HAL_RCC_OscConfig+0x400>
 8005a52:	4bca      	ldr	r3, [pc, #808]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d166      	bne.n	8005b2c <HAL_RCC_OscConfig+0x400>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005a68:	fa93 f3a3 	rbit	r3, r3
 8005a6c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005a70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a74:	fab3 f383 	clz	r3, r3
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <HAL_RCC_OscConfig+0x362>
 8005a88:	4bbc      	ldr	r3, [pc, #752]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	e013      	b.n	8005ab6 <HAL_RCC_OscConfig+0x38a>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a94:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005a98:	fa93 f3a3 	rbit	r3, r3
 8005a9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005aa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005aaa:	fa93 f3a3 	rbit	r3, r3
 8005aae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005ab2:	4bb2      	ldr	r3, [pc, #712]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005abc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005ac0:	fa92 f2a2 	rbit	r2, r2
 8005ac4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005ac8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005acc:	fab2 f282 	clz	r2, r2
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	f042 0220 	orr.w	r2, r2, #32
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	f002 021f 	and.w	r2, r2, #31
 8005adc:	2101      	movs	r1, #1
 8005ade:	fa01 f202 	lsl.w	r2, r1, r2
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <HAL_RCC_OscConfig+0x3cc>
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d002      	beq.n	8005af8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f000 bd1b 	b.w	800652e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4ba0      	ldr	r3, [pc, #640]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	21f8      	movs	r1, #248	; 0xf8
 8005b08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005b10:	fa91 f1a1 	rbit	r1, r1
 8005b14:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005b18:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005b1c:	fab1 f181 	clz	r1, r1
 8005b20:	b2c9      	uxtb	r1, r1
 8005b22:	408b      	lsls	r3, r1
 8005b24:	4995      	ldr	r1, [pc, #596]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2a:	e0f5      	b.n	8005d18 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8085 	beq.w	8005c42 <HAL_RCC_OscConfig+0x516>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005b4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2301      	movs	r3, #1
 8005b62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fd fdd0 	bl	8003708 <HAL_GetTick>
 8005b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6e:	f7fd fdcb 	bl	8003708 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d902      	bls.n	8005b84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	f000 bcd5 	b.w	800652e <HAL_RCC_OscConfig+0xe02>
 8005b84:	2302      	movs	r3, #2
 8005b86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005b96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9a:	fab3 f383 	clz	r3, r3
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d102      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x488>
 8005bae:	4b73      	ldr	r3, [pc, #460]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	e013      	b.n	8005bdc <HAL_RCC_OscConfig+0x4b0>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005bcc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005bd0:	fa93 f3a3 	rbit	r3, r3
 8005bd4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005bd8:	4b68      	ldr	r3, [pc, #416]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005be2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005be6:	fa92 f2a2 	rbit	r2, r2
 8005bea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005bee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005bf2:	fab2 f282 	clz	r2, r2
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f042 0220 	orr.w	r2, r2, #32
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	f002 021f 	and.w	r2, r2, #31
 8005c02:	2101      	movs	r1, #1
 8005c04:	fa01 f202 	lsl.w	r2, r1, r2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0af      	beq.n	8005b6e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	21f8      	movs	r1, #248	; 0xf8
 8005c1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005c26:	fa91 f1a1 	rbit	r1, r1
 8005c2a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005c2e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005c32:	fab1 f181 	clz	r1, r1
 8005c36:	b2c9      	uxtb	r1, r1
 8005c38:	408b      	lsls	r3, r1
 8005c3a:	4950      	ldr	r1, [pc, #320]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]
 8005c40:	e06a      	b.n	8005d18 <HAL_RCC_OscConfig+0x5ec>
 8005c42:	2301      	movs	r3, #1
 8005c44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c4c:	fa93 f3a3 	rbit	r3, r3
 8005c50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005c54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c58:	fab3 f383 	clz	r3, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6e:	f7fd fd4b 	bl	8003708 <HAL_GetTick>
 8005c72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c78:	f7fd fd46 	bl	8003708 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d902      	bls.n	8005c8e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	f000 bc50 	b.w	800652e <HAL_RCC_OscConfig+0xe02>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c98:	fa93 f3a3 	rbit	r3, r3
 8005c9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca4:	fab3 f383 	clz	r3, r3
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f043 0301 	orr.w	r3, r3, #1
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d102      	bne.n	8005cbe <HAL_RCC_OscConfig+0x592>
 8005cb8:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	e013      	b.n	8005ce6 <HAL_RCC_OscConfig+0x5ba>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cda:	fa93 f3a3 	rbit	r3, r3
 8005cde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_RCC_OscConfig+0x650>)
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005cec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005cf0:	fa92 f2a2 	rbit	r2, r2
 8005cf4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005cf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005cfc:	fab2 f282 	clz	r2, r2
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	f042 0220 	orr.w	r2, r2, #32
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	f002 021f 	and.w	r2, r2, #31
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1af      	bne.n	8005c78 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80da 	beq.w	8005edc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d069      	beq.n	8005e06 <HAL_RCC_OscConfig+0x6da>
 8005d32:	2301      	movs	r3, #1
 8005d34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d3c:	fa93 f3a3 	rbit	r3, r3
 8005d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d48:	fab3 f383 	clz	r3, r3
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <HAL_RCC_OscConfig+0x654>)
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	461a      	mov	r2, r3
 8005d58:	2301      	movs	r3, #1
 8005d5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fd fcd4 	bl	8003708 <HAL_GetTick>
 8005d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d64:	e00e      	b.n	8005d84 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d66:	f7fd fccf 	bl	8003708 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d906      	bls.n	8005d84 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e3d9      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	10908120 	.word	0x10908120
 8005d84:	2302      	movs	r3, #2
 8005d86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d8e:	fa93 f3a3 	rbit	r3, r3
 8005d92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fa93 f2a3 	rbit	r2, r3
 8005da8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005db2:	2202      	movs	r2, #2
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	fa93 f2a3 	rbit	r2, r3
 8005dc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005dc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc6:	4ba5      	ldr	r3, [pc, #660]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005dce:	2102      	movs	r1, #2
 8005dd0:	6019      	str	r1, [r3, #0]
 8005dd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	fa93 f1a3 	rbit	r1, r3
 8005ddc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005de0:	6019      	str	r1, [r3, #0]
  return result;
 8005de2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	fab3 f383 	clz	r3, r3
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0b0      	beq.n	8005d66 <HAL_RCC_OscConfig+0x63a>
 8005e04:	e06a      	b.n	8005edc <HAL_RCC_OscConfig+0x7b0>
 8005e06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	fa93 f2a3 	rbit	r2, r3
 8005e18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005e1c:	601a      	str	r2, [r3, #0]
  return result;
 8005e1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005e22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b8c      	ldr	r3, [pc, #560]	; (8006060 <HAL_RCC_OscConfig+0x934>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	461a      	mov	r2, r3
 8005e34:	2300      	movs	r3, #0
 8005e36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e38:	f7fd fc66 	bl	8003708 <HAL_GetTick>
 8005e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e40:	e009      	b.n	8005e56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e42:	f7fd fc61 	bl	8003708 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e36b      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 8005e56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fa93 f2a3 	rbit	r2, r3
 8005e68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005e72:	2202      	movs	r2, #2
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	fa93 f2a3 	rbit	r2, r3
 8005e80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	fa93 f2a3 	rbit	r2, r3
 8005e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005e9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	6019      	str	r1, [r3, #0]
 8005eaa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	fa93 f1a3 	rbit	r1, r3
 8005eb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005eb8:	6019      	str	r1, [r3, #0]
  return result;
 8005eba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	fab3 f383 	clz	r3, r3
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1b2      	bne.n	8005e42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8158 	beq.w	800619c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef2:	4b5a      	ldr	r3, [pc, #360]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d112      	bne.n	8005f24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	4b57      	ldr	r3, [pc, #348]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4a56      	ldr	r2, [pc, #344]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	61d3      	str	r3, [r2, #28]
 8005f0a:	4b54      	ldr	r3, [pc, #336]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005f12:	f107 0308 	add.w	r3, r7, #8
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f107 0308 	add.w	r3, r7, #8
 8005f1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f24:	4b4f      	ldr	r3, [pc, #316]	; (8006064 <HAL_RCC_OscConfig+0x938>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11a      	bne.n	8005f66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f30:	4b4c      	ldr	r3, [pc, #304]	; (8006064 <HAL_RCC_OscConfig+0x938>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a4b      	ldr	r2, [pc, #300]	; (8006064 <HAL_RCC_OscConfig+0x938>)
 8005f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3c:	f7fd fbe4 	bl	8003708 <HAL_GetTick>
 8005f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	e009      	b.n	8005f5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fd fbdf 	bl	8003708 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b64      	cmp	r3, #100	; 0x64
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e2e9      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5a:	4b42      	ldr	r3, [pc, #264]	; (8006064 <HAL_RCC_OscConfig+0x938>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ef      	beq.n	8005f46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCC_OscConfig+0x852>
 8005f70:	4b3a      	ldr	r3, [pc, #232]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4a39      	ldr	r2, [pc, #228]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6213      	str	r3, [r2, #32]
 8005f7c:	e02f      	b.n	8005fde <HAL_RCC_OscConfig+0x8b2>
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x876>
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	4a33      	ldr	r2, [pc, #204]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	6213      	str	r3, [r2, #32]
 8005f94:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	4a30      	ldr	r2, [pc, #192]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005f9a:	f023 0304 	bic.w	r3, r3, #4
 8005f9e:	6213      	str	r3, [r2, #32]
 8005fa0:	e01d      	b.n	8005fde <HAL_RCC_OscConfig+0x8b2>
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d10c      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x89a>
 8005fac:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4a2a      	ldr	r2, [pc, #168]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	6213      	str	r3, [r2, #32]
 8005fb8:	4b28      	ldr	r3, [pc, #160]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	4a27      	ldr	r2, [pc, #156]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6213      	str	r3, [r2, #32]
 8005fc4:	e00b      	b.n	8005fde <HAL_RCC_OscConfig+0x8b2>
 8005fc6:	4b25      	ldr	r3, [pc, #148]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4a24      	ldr	r2, [pc, #144]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6213      	str	r3, [r2, #32]
 8005fd2:	4b22      	ldr	r3, [pc, #136]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4a21      	ldr	r2, [pc, #132]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8005fd8:	f023 0304 	bic.w	r3, r3, #4
 8005fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d06b      	beq.n	80060c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fd fb8e 	bl	8003708 <HAL_GetTick>
 8005fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff0:	e00b      	b.n	800600a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff2:	f7fd fb89 	bl	8003708 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e291      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 800600a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800600e:	2202      	movs	r2, #2
 8006010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006012:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	fa93 f2a3 	rbit	r2, r3
 800601c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006026:	2202      	movs	r2, #2
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	fa93 f2a3 	rbit	r2, r3
 8006034:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006038:	601a      	str	r2, [r3, #0]
  return result;
 800603a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800603e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f043 0302 	orr.w	r3, r3, #2
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d109      	bne.n	8006068 <HAL_RCC_OscConfig+0x93c>
 8006054:	4b01      	ldr	r3, [pc, #4]	; (800605c <HAL_RCC_OscConfig+0x930>)
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	e014      	b.n	8006084 <HAL_RCC_OscConfig+0x958>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	10908120 	.word	0x10908120
 8006064:	40007000 	.word	0x40007000
 8006068:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800606c:	2202      	movs	r2, #2
 800606e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	fa93 f2a3 	rbit	r2, r3
 800607a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	4bbb      	ldr	r3, [pc, #748]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006088:	2102      	movs	r1, #2
 800608a:	6011      	str	r1, [r2, #0]
 800608c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	fa92 f1a2 	rbit	r1, r2
 8006096:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800609a:	6011      	str	r1, [r2, #0]
  return result;
 800609c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	fab2 f282 	clz	r2, r2
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	f002 021f 	and.w	r2, r2, #31
 80060b2:	2101      	movs	r1, #1
 80060b4:	fa01 f202 	lsl.w	r2, r1, r2
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d099      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x8c6>
 80060be:	e063      	b.n	8006188 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fd fb22 	bl	8003708 <HAL_GetTick>
 80060c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c8:	e00b      	b.n	80060e2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fd fb1d 	bl	8003708 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e225      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 80060e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80060e6:	2202      	movs	r2, #2
 80060e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	fa93 f2a3 	rbit	r2, r3
 80060f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80060fe:	2202      	movs	r2, #2
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	fa93 f2a3 	rbit	r2, r3
 800610c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006110:	601a      	str	r2, [r3, #0]
  return result;
 8006112:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006116:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f043 0302 	orr.w	r3, r3, #2
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d102      	bne.n	8006132 <HAL_RCC_OscConfig+0xa06>
 800612c:	4b90      	ldr	r3, [pc, #576]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	e00d      	b.n	800614e <HAL_RCC_OscConfig+0xa22>
 8006132:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006136:	2202      	movs	r2, #2
 8006138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	fa93 f2a3 	rbit	r2, r3
 8006144:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	4b89      	ldr	r3, [pc, #548]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006152:	2102      	movs	r1, #2
 8006154:	6011      	str	r1, [r2, #0]
 8006156:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	fa92 f1a2 	rbit	r1, r2
 8006160:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006164:	6011      	str	r1, [r2, #0]
  return result;
 8006166:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	fab2 f282 	clz	r2, r2
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	f002 021f 	and.w	r2, r2, #31
 800617c:	2101      	movs	r1, #1
 800617e:	fa01 f202 	lsl.w	r2, r1, r2
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1a0      	bne.n	80060ca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006188:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800618c:	2b01      	cmp	r3, #1
 800618e:	d105      	bne.n	800619c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006190:	4b77      	ldr	r3, [pc, #476]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	4a76      	ldr	r2, [pc, #472]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 8006196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 81c2 	beq.w	800652c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061a8:	4b71      	ldr	r3, [pc, #452]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	f000 819c 	beq.w	80064ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	f040 8114 	bne.w	80063ea <HAL_RCC_OscConfig+0xcbe>
 80061c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	fa93 f2a3 	rbit	r2, r3
 80061d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80061da:	601a      	str	r2, [r3, #0]
  return result;
 80061dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80061e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	461a      	mov	r2, r3
 80061f4:	2300      	movs	r3, #0
 80061f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f8:	f7fd fa86 	bl	8003708 <HAL_GetTick>
 80061fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006200:	e009      	b.n	8006216 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006202:	f7fd fa81 	bl	8003708 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e18b      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 8006216:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800621a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800621e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006220:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	fa93 f2a3 	rbit	r2, r3
 800622a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800622e:	601a      	str	r2, [r3, #0]
  return result;
 8006230:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006236:	fab3 f383 	clz	r3, r3
 800623a:	b2db      	uxtb	r3, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d102      	bne.n	8006250 <HAL_RCC_OscConfig+0xb24>
 800624a:	4b49      	ldr	r3, [pc, #292]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	e01b      	b.n	8006288 <HAL_RCC_OscConfig+0xb5c>
 8006250:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	fa93 f2a3 	rbit	r2, r3
 8006264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800626e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	fa93 f2a3 	rbit	r2, r3
 800627e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b3a      	ldr	r3, [pc, #232]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800628c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	fa92 f1a2 	rbit	r1, r2
 800629c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80062a0:	6011      	str	r1, [r2, #0]
  return result;
 80062a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	fab2 f282 	clz	r2, r2
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	f042 0220 	orr.w	r2, r2, #32
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	f002 021f 	and.w	r2, r2, #31
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f202 	lsl.w	r2, r1, r2
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d19e      	bne.n	8006202 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062c4:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80062cc:	1d3b      	adds	r3, r7, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80062d2:	1d3b      	adds	r3, r7, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	430b      	orrs	r3, r1
 80062da:	4925      	ldr	r1, [pc, #148]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	604b      	str	r3, [r1, #4]
 80062e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80062e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	fa93 f2a3 	rbit	r2, r3
 80062f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062f8:	601a      	str	r2, [r3, #0]
  return result;
 80062fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006300:	fab3 f383 	clz	r3, r3
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800630a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	461a      	mov	r2, r3
 8006312:	2301      	movs	r3, #1
 8006314:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006316:	f7fd f9f7 	bl	8003708 <HAL_GetTick>
 800631a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800631e:	e009      	b.n	8006334 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006320:	f7fd f9f2 	bl	8003708 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0fc      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 8006334:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800633c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	fa93 f2a3 	rbit	r2, r3
 8006348:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800634c:	601a      	str	r2, [r3, #0]
  return result;
 800634e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006352:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006354:	fab3 f383 	clz	r3, r3
 8006358:	b2db      	uxtb	r3, r3
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d105      	bne.n	8006374 <HAL_RCC_OscConfig+0xc48>
 8006368:	4b01      	ldr	r3, [pc, #4]	; (8006370 <HAL_RCC_OscConfig+0xc44>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	e01e      	b.n	80063ac <HAL_RCC_OscConfig+0xc80>
 800636e:	bf00      	nop
 8006370:	40021000 	.word	0x40021000
 8006374:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800637c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	fa93 f2a3 	rbit	r2, r3
 8006388:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	fa93 f2a3 	rbit	r2, r3
 80063a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	4b63      	ldr	r3, [pc, #396]	; (8006538 <HAL_RCC_OscConfig+0xe0c>)
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80063b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	fa92 f1a2 	rbit	r1, r2
 80063c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80063c4:	6011      	str	r1, [r2, #0]
  return result;
 80063c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	fab2 f282 	clz	r2, r2
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	f042 0220 	orr.w	r2, r2, #32
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	f002 021f 	and.w	r2, r2, #31
 80063dc:	2101      	movs	r1, #1
 80063de:	fa01 f202 	lsl.w	r2, r1, r2
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d09b      	beq.n	8006320 <HAL_RCC_OscConfig+0xbf4>
 80063e8:	e0a0      	b.n	800652c <HAL_RCC_OscConfig+0xe00>
 80063ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	fa93 f2a3 	rbit	r2, r3
 80063fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006402:	601a      	str	r2, [r3, #0]
  return result;
 8006404:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006408:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	461a      	mov	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fd f972 	bl	8003708 <HAL_GetTick>
 8006424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006428:	e009      	b.n	800643e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800642a:	f7fd f96d 	bl	8003708 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e077      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
 800643e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006442:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	fa93 f2a3 	rbit	r2, r3
 8006452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006456:	601a      	str	r2, [r3, #0]
  return result;
 8006458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800645e:	fab3 f383 	clz	r3, r3
 8006462:	b2db      	uxtb	r3, r3
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b01      	cmp	r3, #1
 8006470:	d102      	bne.n	8006478 <HAL_RCC_OscConfig+0xd4c>
 8006472:	4b31      	ldr	r3, [pc, #196]	; (8006538 <HAL_RCC_OscConfig+0xe0c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	e01b      	b.n	80064b0 <HAL_RCC_OscConfig+0xd84>
 8006478:	f107 0320 	add.w	r3, r7, #32
 800647c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	f107 0320 	add.w	r3, r7, #32
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	fa93 f2a3 	rbit	r2, r3
 800648c:	f107 031c 	add.w	r3, r7, #28
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f107 0318 	add.w	r3, r7, #24
 8006496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f107 0318 	add.w	r3, r7, #24
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	fa93 f2a3 	rbit	r2, r3
 80064a6:	f107 0314 	add.w	r3, r7, #20
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	4b22      	ldr	r3, [pc, #136]	; (8006538 <HAL_RCC_OscConfig+0xe0c>)
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	f107 0210 	add.w	r2, r7, #16
 80064b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80064b8:	6011      	str	r1, [r2, #0]
 80064ba:	f107 0210 	add.w	r2, r7, #16
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	fa92 f1a2 	rbit	r1, r2
 80064c4:	f107 020c 	add.w	r2, r7, #12
 80064c8:	6011      	str	r1, [r2, #0]
  return result;
 80064ca:	f107 020c 	add.w	r2, r7, #12
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	fab2 f282 	clz	r2, r2
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	f042 0220 	orr.w	r2, r2, #32
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	f002 021f 	and.w	r2, r2, #31
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f202 	lsl.w	r2, r1, r2
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d19e      	bne.n	800642a <HAL_RCC_OscConfig+0xcfe>
 80064ec:	e01e      	b.n	800652c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e018      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <HAL_RCC_OscConfig+0xe0c>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006504:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006508:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	429a      	cmp	r2, r3
 8006514:	d108      	bne.n	8006528 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006516:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800651a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800651e:	1d3b      	adds	r3, r7, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40021000 	.word	0x40021000

0800653c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b09e      	sub	sp, #120	; 0x78
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e162      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006554:	4b90      	ldr	r3, [pc, #576]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d910      	bls.n	8006584 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b8d      	ldr	r3, [pc, #564]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f023 0207 	bic.w	r2, r3, #7
 800656a:	498b      	ldr	r1, [pc, #556]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	4313      	orrs	r3, r2
 8006570:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	4b89      	ldr	r3, [pc, #548]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e14a      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006590:	4b82      	ldr	r3, [pc, #520]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	497f      	ldr	r1, [pc, #508]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80dc 	beq.w	8006768 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d13c      	bne.n	8006632 <HAL_RCC_ClockConfig+0xf6>
 80065b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c0:	fa93 f3a3 	rbit	r3, r3
 80065c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80065c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c8:	fab3 f383 	clz	r3, r3
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d102      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xa6>
 80065dc:	4b6f      	ldr	r3, [pc, #444]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	e00f      	b.n	8006602 <HAL_RCC_ClockConfig+0xc6>
 80065e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065ea:	fa93 f3a3 	rbit	r3, r3
 80065ee:	667b      	str	r3, [r7, #100]	; 0x64
 80065f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065f4:	663b      	str	r3, [r7, #96]	; 0x60
 80065f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f8:	fa93 f3a3 	rbit	r3, r3
 80065fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fe:	4b67      	ldr	r3, [pc, #412]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006606:	65ba      	str	r2, [r7, #88]	; 0x58
 8006608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800660a:	fa92 f2a2 	rbit	r2, r2
 800660e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006612:	fab2 f282 	clz	r2, r2
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	f042 0220 	orr.w	r2, r2, #32
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	f002 021f 	and.w	r2, r2, #31
 8006622:	2101      	movs	r1, #1
 8006624:	fa01 f202 	lsl.w	r2, r1, r2
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d17b      	bne.n	8006726 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e0f3      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d13c      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x178>
 800663a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800663e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006642:	fa93 f3a3 	rbit	r3, r3
 8006646:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664a:	fab3 f383 	clz	r3, r3
 800664e:	b2db      	uxtb	r3, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d102      	bne.n	8006664 <HAL_RCC_ClockConfig+0x128>
 800665e:	4b4f      	ldr	r3, [pc, #316]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	e00f      	b.n	8006684 <HAL_RCC_ClockConfig+0x148>
 8006664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006668:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	fa93 f3a3 	rbit	r3, r3
 8006670:	647b      	str	r3, [r7, #68]	; 0x44
 8006672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	fa93 f3a3 	rbit	r3, r3
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006680:	4b46      	ldr	r3, [pc, #280]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006688:	63ba      	str	r2, [r7, #56]	; 0x38
 800668a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668c:	fa92 f2a2 	rbit	r2, r2
 8006690:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006694:	fab2 f282 	clz	r2, r2
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	f042 0220 	orr.w	r2, r2, #32
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	f002 021f 	and.w	r2, r2, #31
 80066a4:	2101      	movs	r1, #1
 80066a6:	fa01 f202 	lsl.w	r2, r1, r2
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d13a      	bne.n	8006726 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0b2      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
 80066b4:	2302      	movs	r3, #2
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	fa93 f3a3 	rbit	r3, r3
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c2:	fab3 f383 	clz	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d102      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
 80066d6:	4b31      	ldr	r3, [pc, #196]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	e00d      	b.n	80066f8 <HAL_RCC_ClockConfig+0x1bc>
 80066dc:	2302      	movs	r3, #2
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
 80066e8:	2302      	movs	r3, #2
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	fa93 f3a3 	rbit	r3, r3
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	4b29      	ldr	r3, [pc, #164]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	2202      	movs	r2, #2
 80066fa:	61ba      	str	r2, [r7, #24]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	fa92 f2a2 	rbit	r2, r2
 8006702:	617a      	str	r2, [r7, #20]
  return result;
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	fab2 f282 	clz	r2, r2
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	f042 0220 	orr.w	r2, r2, #32
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	f002 021f 	and.w	r2, r2, #31
 8006716:	2101      	movs	r1, #1
 8006718:	fa01 f202 	lsl.w	r2, r1, r2
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e079      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f023 0203 	bic.w	r2, r3, #3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	491a      	ldr	r1, [pc, #104]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006734:	4313      	orrs	r3, r2
 8006736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006738:	f7fc ffe6 	bl	8003708 <HAL_GetTick>
 800673c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673e:	e00a      	b.n	8006756 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006740:	f7fc ffe2 	bl	8003708 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	; 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e061      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <HAL_RCC_ClockConfig+0x260>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f003 020c 	and.w	r2, r3, #12
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	429a      	cmp	r2, r3
 8006766:	d1eb      	bne.n	8006740 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006768:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d214      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 0207 	bic.w	r2, r3, #7
 800677e:	4906      	ldr	r1, [pc, #24]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <HAL_RCC_ClockConfig+0x25c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e040      	b.n	800681a <HAL_RCC_ClockConfig+0x2de>
 8006798:	40022000 	.word	0x40022000
 800679c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_RCC_ClockConfig+0x2e8>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	491a      	ldr	r1, [pc, #104]	; (8006824 <HAL_RCC_ClockConfig+0x2e8>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ca:	4b16      	ldr	r3, [pc, #88]	; (8006824 <HAL_RCC_ClockConfig+0x2e8>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4912      	ldr	r1, [pc, #72]	; (8006824 <HAL_RCC_ClockConfig+0x2e8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80067de:	f000 f829 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 80067e2:	4601      	mov	r1, r0
 80067e4:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <HAL_RCC_ClockConfig+0x2e8>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ec:	22f0      	movs	r2, #240	; 0xf0
 80067ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	fa92 f2a2 	rbit	r2, r2
 80067f6:	60fa      	str	r2, [r7, #12]
  return result;
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	fab2 f282 	clz	r2, r2
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	40d3      	lsrs	r3, r2
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <HAL_RCC_ClockConfig+0x2ec>)
 8006804:	5cd3      	ldrb	r3, [r2, r3]
 8006806:	fa21 f303 	lsr.w	r3, r1, r3
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <HAL_RCC_ClockConfig+0x2f0>)
 800680c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HAL_RCC_ClockConfig+0x2f4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fc ff34 	bl	8003680 <HAL_InitTick>
  
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3778      	adds	r7, #120	; 0x78
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000
 8006828:	08009754 	.word	0x08009754
 800682c:	20000004 	.word	0x20000004
 8006830:	20000008 	.word	0x20000008

08006834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006834:	b480      	push	{r7}
 8006836:	b08b      	sub	sp, #44	; 0x2c
 8006838:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	2300      	movs	r3, #0
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f003 030c 	and.w	r3, r3, #12
 800685a:	2b04      	cmp	r3, #4
 800685c:	d002      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x30>
 800685e:	2b08      	cmp	r3, #8
 8006860:	d003      	beq.n	800686a <HAL_RCC_GetSysClockFreq+0x36>
 8006862:	e03c      	b.n	80068de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006866:	623b      	str	r3, [r7, #32]
      break;
 8006868:	e03c      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006870:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006874:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	fa92 f2a2 	rbit	r2, r2
 800687c:	607a      	str	r2, [r7, #4]
  return result;
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	fab2 f282 	clz	r2, r2
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	40d3      	lsrs	r3, r2
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800688a:	5cd3      	ldrb	r3, [r2, r3]
 800688c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800688e:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	220f      	movs	r2, #15
 8006898:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	fa92 f2a2 	rbit	r2, r2
 80068a0:	60fa      	str	r2, [r7, #12]
  return result;
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	fab2 f282 	clz	r2, r2
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	40d3      	lsrs	r3, r2
 80068ac:	4a14      	ldr	r2, [pc, #80]	; (8006900 <HAL_RCC_GetSysClockFreq+0xcc>)
 80068ae:	5cd3      	ldrb	r3, [r2, r3]
 80068b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068bc:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
 80068cc:	e004      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	623b      	str	r3, [r7, #32]
      break;
 80068dc:	e002      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068de:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068e0:	623b      	str	r3, [r7, #32]
      break;
 80068e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068e4:	6a3b      	ldr	r3, [r7, #32]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	372c      	adds	r7, #44	; 0x2c
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40021000 	.word	0x40021000
 80068f8:	007a1200 	.word	0x007a1200
 80068fc:	0800976c 	.word	0x0800976c
 8006900:	0800977c 	.word	0x0800977c
 8006904:	003d0900 	.word	0x003d0900

08006908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800690c:	4b03      	ldr	r3, [pc, #12]	; (800691c <HAL_RCC_GetHCLKFreq+0x14>)
 800690e:	681b      	ldr	r3, [r3, #0]
}
 8006910:	4618      	mov	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000004 	.word	0x20000004

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006926:	f7ff ffef 	bl	8006908 <HAL_RCC_GetHCLKFreq>
 800692a:	4601      	mov	r1, r0
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006934:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006938:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	fa92 f2a2 	rbit	r2, r2
 8006940:	603a      	str	r2, [r7, #0]
  return result;
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	fab2 f282 	clz	r2, r2
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	40d3      	lsrs	r3, r2
 800694c:	4a04      	ldr	r2, [pc, #16]	; (8006960 <HAL_RCC_GetPCLK1Freq+0x40>)
 800694e:	5cd3      	ldrb	r3, [r2, r3]
 8006950:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021000 	.word	0x40021000
 8006960:	08009764 	.word	0x08009764

08006964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800696a:	f7ff ffcd 	bl	8006908 <HAL_RCC_GetHCLKFreq>
 800696e:	4601      	mov	r1, r0
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006978:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800697c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	fa92 f2a2 	rbit	r2, r2
 8006984:	603a      	str	r2, [r7, #0]
  return result;
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	fab2 f282 	clz	r2, r2
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	40d3      	lsrs	r3, r2
 8006990:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006992:	5cd3      	ldrb	r3, [r2, r3]
 8006994:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40021000 	.word	0x40021000
 80069a4:	08009764 	.word	0x08009764

080069a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b092      	sub	sp, #72	; 0x48
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80d7 	beq.w	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069cc:	4b4e      	ldr	r3, [pc, #312]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10e      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069d8:	4b4b      	ldr	r3, [pc, #300]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	4a4a      	ldr	r2, [pc, #296]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e2:	61d3      	str	r3, [r2, #28]
 80069e4:	4b48      	ldr	r3, [pc, #288]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f6:	4b45      	ldr	r3, [pc, #276]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d118      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a02:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a41      	ldr	r2, [pc, #260]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0e:	f7fc fe7b 	bl	8003708 <HAL_GetTick>
 8006a12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a14:	e008      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a16:	f7fc fe77 	bl	8003708 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b64      	cmp	r3, #100	; 0x64
 8006a22:	d901      	bls.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e169      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a28:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a34:	4b34      	ldr	r3, [pc, #208]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8084 	beq.w	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d07c      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	fa93 f3a3 	rbit	r3, r3
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a6e:	fab3 f383 	clz	r3, r3
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b26      	ldr	r3, [pc, #152]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	2301      	movs	r3, #1
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d04b      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab6:	f7fc fe27 	bl	8003708 <HAL_GetTick>
 8006aba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006abe:	f7fc fe23 	bl	8003708 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e113      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	fa93 f3a3 	rbit	r3, r3
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	623b      	str	r3, [r7, #32]
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	fa93 f3a3 	rbit	r3, r3
 8006aea:	61fb      	str	r3, [r7, #28]
  return result;
 8006aec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aee:	fab3 f383 	clz	r3, r3
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d108      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006b02:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	e00d      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	10908100 	.word	0x10908100
 8006b14:	2302      	movs	r3, #2
 8006b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	fa93 f3a3 	rbit	r3, r3
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	4b78      	ldr	r3, [pc, #480]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	2202      	movs	r2, #2
 8006b26:	613a      	str	r2, [r7, #16]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	fa92 f2a2 	rbit	r2, r2
 8006b2e:	60fa      	str	r2, [r7, #12]
  return result;
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	fab2 f282 	clz	r2, r2
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	f002 021f 	and.w	r2, r2, #31
 8006b42:	2101      	movs	r1, #1
 8006b44:	fa01 f202 	lsl.w	r2, r1, r2
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0b7      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	496a      	ldr	r1, [pc, #424]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b68:	4b66      	ldr	r3, [pc, #408]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4a65      	ldr	r2, [pc, #404]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d008      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b80:	4b60      	ldr	r3, [pc, #384]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	f023 0203 	bic.w	r2, r3, #3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	495d      	ldr	r1, [pc, #372]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b9e:	4b59      	ldr	r3, [pc, #356]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4956      	ldr	r1, [pc, #344]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bbc:	4b51      	ldr	r3, [pc, #324]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	494e      	ldr	r1, [pc, #312]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d008      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bda:	4b4a      	ldr	r3, [pc, #296]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f023 0210 	bic.w	r2, r3, #16
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4947      	ldr	r1, [pc, #284]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006bf8:	4b42      	ldr	r3, [pc, #264]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	493f      	ldr	r1, [pc, #252]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c16:	4b3b      	ldr	r3, [pc, #236]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f023 0220 	bic.w	r2, r3, #32
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	4938      	ldr	r1, [pc, #224]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c34:	4b33      	ldr	r3, [pc, #204]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	4930      	ldr	r1, [pc, #192]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c52:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	4929      	ldr	r1, [pc, #164]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c70:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4921      	ldr	r1, [pc, #132]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	491a      	ldr	r1, [pc, #104]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006cac:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	4912      	ldr	r1, [pc, #72]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	490b      	ldr	r1, [pc, #44]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf4:	4903      	ldr	r1, [pc, #12]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3748      	adds	r7, #72	; 0x48
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40021000 	.word	0x40021000

08006d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e01d      	b.n	8006d56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fc fb2a 	bl	8003388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f000 fd9a 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e01d      	b.n	8006dac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f815 	bl	8006db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fd6f 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 fa6e 	bl	80082bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <HAL_TIM_PWM_Start+0x98>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x4a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <HAL_TIM_PWM_Start+0x9c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x4a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <HAL_TIM_PWM_Start+0xa0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x4a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <HAL_TIM_PWM_Start+0xa4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x4a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_TIM_PWM_Start+0xa8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_PWM_Start+0x4e>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <HAL_TIM_PWM_Start+0x50>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <HAL_TIM_PWM_Start+0xac>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b06      	cmp	r3, #6
 8006e3c:	d00b      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x8e>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e44:	d007      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0201 	orr.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40013400 	.word	0x40013400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800
 8006e74:	00010007 	.word	0x00010007

08006e78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e01d      	b.n	8006ec6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fc fa2a 	bl	80032f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f000 fce2 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b0c      	cmp	r3, #12
 8006ede:	d841      	bhi.n	8006f64 <HAL_TIM_IC_Start_IT+0x94>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <HAL_TIM_IC_Start_IT+0x18>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f1d 	.word	0x08006f1d
 8006eec:	08006f65 	.word	0x08006f65
 8006ef0:	08006f65 	.word	0x08006f65
 8006ef4:	08006f65 	.word	0x08006f65
 8006ef8:	08006f2f 	.word	0x08006f2f
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006f65 	.word	0x08006f65
 8006f04:	08006f65 	.word	0x08006f65
 8006f08:	08006f41 	.word	0x08006f41
 8006f0c:	08006f65 	.word	0x08006f65
 8006f10:	08006f65 	.word	0x08006f65
 8006f14:	08006f65 	.word	0x08006f65
 8006f18:	08006f53 	.word	0x08006f53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0202 	orr.w	r2, r2, #2
 8006f2a:	60da      	str	r2, [r3, #12]
      break;
 8006f2c:	e01b      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0204 	orr.w	r2, r2, #4
 8006f3c:	60da      	str	r2, [r3, #12]
      break;
 8006f3e:	e012      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0208 	orr.w	r2, r2, #8
 8006f4e:	60da      	str	r2, [r3, #12]
      break;
 8006f50:	e009      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0210 	orr.w	r2, r2, #16
 8006f60:	60da      	str	r2, [r3, #12]
      break;
 8006f62:	e000      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006f64:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f9a4 	bl	80082bc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <HAL_TIM_IC_Start_IT+0xd8>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d00b      	beq.n	8006f9e <HAL_TIM_IC_Start_IT+0xce>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8c:	d007      	beq.n	8006f9e <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0201 	orr.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	00010007 	.word	0x00010007

08006fac <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d841      	bhi.n	8007040 <HAL_TIM_IC_Stop_IT+0x94>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <HAL_TIM_IC_Stop_IT+0x18>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006ff9 	.word	0x08006ff9
 8006fc8:	08007041 	.word	0x08007041
 8006fcc:	08007041 	.word	0x08007041
 8006fd0:	08007041 	.word	0x08007041
 8006fd4:	0800700b 	.word	0x0800700b
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007041 	.word	0x08007041
 8006fe0:	08007041 	.word	0x08007041
 8006fe4:	0800701d 	.word	0x0800701d
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007041 	.word	0x08007041
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	0800702f 	.word	0x0800702f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0202 	bic.w	r2, r2, #2
 8007006:	60da      	str	r2, [r3, #12]
      break;
 8007008:	e01b      	b.n	8007042 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0204 	bic.w	r2, r2, #4
 8007018:	60da      	str	r2, [r3, #12]
      break;
 800701a:	e012      	b.n	8007042 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0208 	bic.w	r2, r2, #8
 800702a:	60da      	str	r2, [r3, #12]
      break;
 800702c:	e009      	b.n	8007042 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0210 	bic.w	r2, r2, #16
 800703c:	60da      	str	r2, [r3, #12]
      break;
 800703e:	e000      	b.n	8007042 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8007040:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f936 	bl	80082bc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	f241 1311 	movw	r3, #4369	; 0x1111
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10f      	bne.n	8007080 <HAL_TIM_IC_Stop_IT+0xd4>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a1a      	ldr	r2, [r3, #32]
 8007066:	f240 4344 	movw	r3, #1092	; 0x444
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IC_Stop_IT+0xd4>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d122      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d11b      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0202 	mvn.w	r2, #2
 80070b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fa f8bc 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fbb4 	bl	8007844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fbbb 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d122      	bne.n	800713c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d11b      	bne.n	800713c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0204 	mvn.w	r2, #4
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fa f892 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb8a 	bl	8007844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fb91 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b08      	cmp	r3, #8
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b08      	cmp	r3, #8
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0208 	mvn.w	r2, #8
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2204      	movs	r2, #4
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fa f868 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fb60 	bl	8007844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb67 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d122      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d11b      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0210 	mvn.w	r2, #16
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2208      	movs	r2, #8
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fa f83e 	bl	800124c <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fb36 	bl	8007844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb3d 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10e      	bne.n	8007210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d107      	bne.n	8007210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0201 	mvn.w	r2, #1
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fb10 	bl	8007830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007228:	2b80      	cmp	r3, #128	; 0x80
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f8f0 	bl	800841c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724a:	d10e      	bne.n	800726a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d107      	bne.n	800726a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f8e3 	bl	8008430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b40      	cmp	r3, #64	; 0x40
 8007276:	d10e      	bne.n	8007296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d107      	bne.n	8007296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800728e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 faeb 	bl	800786c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d10e      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f06f 0220 	mvn.w	r2, #32
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f8a3 	bl	8008408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e08a      	b.n	80073fa <HAL_TIM_IC_ConfigChannel+0x130>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11b      	bne.n	8007332 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6819      	ldr	r1, [r3, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f000 fe1f 	bl	8007f4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 020c 	bic.w	r2, r2, #12
 800731c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6999      	ldr	r1, [r3, #24]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	619a      	str	r2, [r3, #24]
 8007330:	e05a      	b.n	80073e8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b04      	cmp	r3, #4
 8007336:	d11c      	bne.n	8007372 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f000 fe97 	bl	800807a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800735a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6999      	ldr	r1, [r3, #24]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	619a      	str	r2, [r3, #24]
 8007370:	e03a      	b.n	80073e8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d11b      	bne.n	80073b0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f000 fee4 	bl	8008154 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69da      	ldr	r2, [r3, #28]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 020c 	bic.w	r2, r2, #12
 800739a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69d9      	ldr	r1, [r3, #28]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	61da      	str	r2, [r3, #28]
 80073ae:	e01b      	b.n	80073e8 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6819      	ldr	r1, [r3, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f000 ff04 	bl	80081cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	69d9      	ldr	r1, [r3, #28]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800741a:	2302      	movs	r3, #2
 800741c:	e105      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x226>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b14      	cmp	r3, #20
 8007432:	f200 80f0 	bhi.w	8007616 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007491 	.word	0x08007491
 8007440:	08007617 	.word	0x08007617
 8007444:	08007617 	.word	0x08007617
 8007448:	08007617 	.word	0x08007617
 800744c:	080074d1 	.word	0x080074d1
 8007450:	08007617 	.word	0x08007617
 8007454:	08007617 	.word	0x08007617
 8007458:	08007617 	.word	0x08007617
 800745c:	08007513 	.word	0x08007513
 8007460:	08007617 	.word	0x08007617
 8007464:	08007617 	.word	0x08007617
 8007468:	08007617 	.word	0x08007617
 800746c:	08007553 	.word	0x08007553
 8007470:	08007617 	.word	0x08007617
 8007474:	08007617 	.word	0x08007617
 8007478:	08007617 	.word	0x08007617
 800747c:	08007595 	.word	0x08007595
 8007480:	08007617 	.word	0x08007617
 8007484:	08007617 	.word	0x08007617
 8007488:	08007617 	.word	0x08007617
 800748c:	080075d5 	.word	0x080075d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fa82 	bl	80079a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0208 	orr.w	r2, r2, #8
 80074aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0204 	bic.w	r2, r2, #4
 80074ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6999      	ldr	r1, [r3, #24]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	619a      	str	r2, [r3, #24]
      break;
 80074ce:	e0a3      	b.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 faf2 	bl	8007ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6999      	ldr	r1, [r3, #24]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	021a      	lsls	r2, r3, #8
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	619a      	str	r2, [r3, #24]
      break;
 8007510:	e082      	b.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fb5b 	bl	8007bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0208 	orr.w	r2, r2, #8
 800752c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0204 	bic.w	r2, r2, #4
 800753c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	61da      	str	r2, [r3, #28]
      break;
 8007550:	e062      	b.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fbc3 	bl	8007ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69da      	ldr	r2, [r3, #28]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800756c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69d9      	ldr	r1, [r3, #28]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	021a      	lsls	r2, r3, #8
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	61da      	str	r2, [r3, #28]
      break;
 8007592:	e041      	b.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fc0c 	bl	8007db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0208 	orr.w	r2, r2, #8
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0204 	bic.w	r2, r2, #4
 80075be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075d2:	e021      	b.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fc50 	bl	8007e80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	021a      	lsls	r2, r3, #8
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007614:	e000      	b.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007616:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIM_ConfigClockSource+0x18>
 8007648:	2302      	movs	r3, #2
 800764a:	e0a8      	b.n	800779e <HAL_TIM_ConfigClockSource+0x16a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800766e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007676:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d067      	beq.n	8007758 <HAL_TIM_ConfigClockSource+0x124>
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d80b      	bhi.n	80076a4 <HAL_TIM_ConfigClockSource+0x70>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d073      	beq.n	8007778 <HAL_TIM_ConfigClockSource+0x144>
 8007690:	2b10      	cmp	r3, #16
 8007692:	d802      	bhi.n	800769a <HAL_TIM_ConfigClockSource+0x66>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d06f      	beq.n	8007778 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007698:	e078      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800769a:	2b20      	cmp	r3, #32
 800769c:	d06c      	beq.n	8007778 <HAL_TIM_ConfigClockSource+0x144>
 800769e:	2b30      	cmp	r3, #48	; 0x30
 80076a0:	d06a      	beq.n	8007778 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80076a2:	e073      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80076a4:	2b70      	cmp	r3, #112	; 0x70
 80076a6:	d00d      	beq.n	80076c4 <HAL_TIM_ConfigClockSource+0x90>
 80076a8:	2b70      	cmp	r3, #112	; 0x70
 80076aa:	d804      	bhi.n	80076b6 <HAL_TIM_ConfigClockSource+0x82>
 80076ac:	2b50      	cmp	r3, #80	; 0x50
 80076ae:	d033      	beq.n	8007718 <HAL_TIM_ConfigClockSource+0xe4>
 80076b0:	2b60      	cmp	r3, #96	; 0x60
 80076b2:	d041      	beq.n	8007738 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80076b4:	e06a      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80076b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ba:	d066      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x156>
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c0:	d017      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80076c2:	e063      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6899      	ldr	r1, [r3, #8]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f000 fdd2 	bl	800827c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	609a      	str	r2, [r3, #8]
      break;
 80076f0:	e04c      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6899      	ldr	r1, [r3, #8]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f000 fdbb 	bl	800827c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007714:	609a      	str	r2, [r3, #8]
      break;
 8007716:	e039      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	6859      	ldr	r1, [r3, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	461a      	mov	r2, r3
 8007726:	f000 fc79 	bl	800801c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2150      	movs	r1, #80	; 0x50
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fd88 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 8007736:	e029      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	6859      	ldr	r1, [r3, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	461a      	mov	r2, r3
 8007746:	f000 fcd5 	bl	80080f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2160      	movs	r1, #96	; 0x60
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fd78 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 8007756:	e019      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	6859      	ldr	r1, [r3, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	461a      	mov	r2, r3
 8007766:	f000 fc59 	bl	800801c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2140      	movs	r1, #64	; 0x40
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fd68 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 8007776:	e009      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f000 fd5f 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 8007788:	e000      	b.n	800778c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800778a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b0c      	cmp	r3, #12
 80077ba:	d831      	bhi.n	8007820 <HAL_TIM_ReadCapturedValue+0x78>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077f9 	.word	0x080077f9
 80077c8:	08007821 	.word	0x08007821
 80077cc:	08007821 	.word	0x08007821
 80077d0:	08007821 	.word	0x08007821
 80077d4:	08007803 	.word	0x08007803
 80077d8:	08007821 	.word	0x08007821
 80077dc:	08007821 	.word	0x08007821
 80077e0:	08007821 	.word	0x08007821
 80077e4:	0800780d 	.word	0x0800780d
 80077e8:	08007821 	.word	0x08007821
 80077ec:	08007821 	.word	0x08007821
 80077f0:	08007821 	.word	0x08007821
 80077f4:	08007817 	.word	0x08007817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	60fb      	str	r3, [r7, #12]

      break;
 8007800:	e00f      	b.n	8007822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	60fb      	str	r3, [r7, #12]

      break;
 800780a:	e00a      	b.n	8007822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	60fb      	str	r3, [r7, #12]

      break;
 8007814:	e005      	b.n	8007822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	60fb      	str	r3, [r7, #12]

      break;
 800781e:	e000      	b.n	8007822 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007820:	bf00      	nop
  }

  return tmpreg;
 8007822:	68fb      	ldr	r3, [r7, #12]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3c      	ldr	r2, [pc, #240]	; (8007984 <TIM_Base_SetConfig+0x104>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00f      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d00b      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a39      	ldr	r2, [pc, #228]	; (8007988 <TIM_Base_SetConfig+0x108>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d007      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a38      	ldr	r2, [pc, #224]	; (800798c <TIM_Base_SetConfig+0x10c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a37      	ldr	r2, [pc, #220]	; (8007990 <TIM_Base_SetConfig+0x110>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d108      	bne.n	80078ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2d      	ldr	r2, [pc, #180]	; (8007984 <TIM_Base_SetConfig+0x104>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01b      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d017      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2a      	ldr	r2, [pc, #168]	; (8007988 <TIM_Base_SetConfig+0x108>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a29      	ldr	r2, [pc, #164]	; (800798c <TIM_Base_SetConfig+0x10c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a28      	ldr	r2, [pc, #160]	; (8007990 <TIM_Base_SetConfig+0x110>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a27      	ldr	r2, [pc, #156]	; (8007994 <TIM_Base_SetConfig+0x114>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <TIM_Base_SetConfig+0x118>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a25      	ldr	r2, [pc, #148]	; (800799c <TIM_Base_SetConfig+0x11c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <TIM_Base_SetConfig+0x104>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a11      	ldr	r2, [pc, #68]	; (8007990 <TIM_Base_SetConfig+0x110>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <TIM_Base_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a0f      	ldr	r2, [pc, #60]	; (8007998 <TIM_Base_SetConfig+0x118>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0e      	ldr	r2, [pc, #56]	; (800799c <TIM_Base_SetConfig+0x11c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40013400 	.word	0x40013400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800

080079a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0201 	bic.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <TIM_OC1_SetConfig+0x10c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00f      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a2b      	ldr	r2, [pc, #172]	; (8007ab0 <TIM_OC1_SetConfig+0x110>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00b      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a2a      	ldr	r2, [pc, #168]	; (8007ab4 <TIM_OC1_SetConfig+0x114>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d007      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <TIM_OC1_SetConfig+0x118>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_OC1_SetConfig+0x80>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a28      	ldr	r2, [pc, #160]	; (8007abc <TIM_OC1_SetConfig+0x11c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10c      	bne.n	8007a3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f023 0308 	bic.w	r3, r3, #8
 8007a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 0304 	bic.w	r3, r3, #4
 8007a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <TIM_OC1_SetConfig+0x10c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00f      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <TIM_OC1_SetConfig+0x110>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00b      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <TIM_OC1_SetConfig+0x114>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d007      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <TIM_OC1_SetConfig+0x118>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <TIM_OC1_SetConfig+0xc2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <TIM_OC1_SetConfig+0x11c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d111      	bne.n	8007a86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f023 0210 	bic.w	r2, r3, #16
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <TIM_OC2_SetConfig+0x100>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC2_SetConfig+0x6c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <TIM_OC2_SetConfig+0x104>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	; (8007bc0 <TIM_OC2_SetConfig+0x100>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00f      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a1c      	ldr	r2, [pc, #112]	; (8007bc4 <TIM_OC2_SetConfig+0x104>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <TIM_OC2_SetConfig+0x108>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d007      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <TIM_OC2_SetConfig+0x10c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC2_SetConfig+0xb0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <TIM_OC2_SetConfig+0x110>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d113      	bne.n	8007b98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <TIM_OC3_SetConfig+0xfc>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_OC3_SetConfig+0x6a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <TIM_OC3_SetConfig+0x100>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d10d      	bne.n	8007c5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c58:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	; (8007cd0 <TIM_OC3_SetConfig+0xfc>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00f      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1b      	ldr	r2, [pc, #108]	; (8007cd4 <TIM_OC3_SetConfig+0x100>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1a      	ldr	r2, [pc, #104]	; (8007cd8 <TIM_OC3_SetConfig+0x104>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <TIM_OC3_SetConfig+0x108>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC3_SetConfig+0xae>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <TIM_OC3_SetConfig+0x10c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d113      	bne.n	8007caa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	621a      	str	r2, [r3, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40013400 	.word	0x40013400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800

08007ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a18      	ldr	r2, [pc, #96]	; (8007da4 <TIM_OC4_SetConfig+0xc0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00f      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <TIM_OC4_SetConfig+0xc4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a16      	ldr	r2, [pc, #88]	; (8007dac <TIM_OC4_SetConfig+0xc8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d007      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a15      	ldr	r2, [pc, #84]	; (8007db0 <TIM_OC4_SetConfig+0xcc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_OC4_SetConfig+0x84>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a14      	ldr	r2, [pc, #80]	; (8007db4 <TIM_OC4_SetConfig+0xd0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d109      	bne.n	8007d7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	019b      	lsls	r3, r3, #6
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	40012c00 	.word	0x40012c00
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40014000 	.word	0x40014000
 8007db0:	40014400 	.word	0x40014400
 8007db4:	40014800 	.word	0x40014800

08007db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007dfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	041b      	lsls	r3, r3, #16
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a17      	ldr	r2, [pc, #92]	; (8007e6c <TIM_OC5_SetConfig+0xb4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00f      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <TIM_OC5_SetConfig+0xb8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00b      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <TIM_OC5_SetConfig+0xbc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a14      	ldr	r2, [pc, #80]	; (8007e78 <TIM_OC5_SetConfig+0xc0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_OC5_SetConfig+0x7a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <TIM_OC5_SetConfig+0xc4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d109      	bne.n	8007e46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	621a      	str	r2, [r3, #32]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40013400 	.word	0x40013400
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800

08007e80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	021b      	lsls	r3, r3, #8
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	051b      	lsls	r3, r3, #20
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <TIM_OC6_SetConfig+0xb8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00f      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <TIM_OC6_SetConfig+0xbc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00b      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a16      	ldr	r2, [pc, #88]	; (8007f40 <TIM_OC6_SetConfig+0xc0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d007      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a15      	ldr	r2, [pc, #84]	; (8007f44 <TIM_OC6_SetConfig+0xc4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d003      	beq.n	8007efc <TIM_OC6_SetConfig+0x7c>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <TIM_OC6_SetConfig+0xc8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d109      	bne.n	8007f10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	029b      	lsls	r3, r3, #10
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	621a      	str	r2, [r3, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40013400 	.word	0x40013400
 8007f40:	40014000 	.word	0x40014000
 8007f44:	40014400 	.word	0x40014400
 8007f48:	40014800 	.word	0x40014800

08007f4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f023 0201 	bic.w	r2, r3, #1
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a24      	ldr	r2, [pc, #144]	; (8008008 <TIM_TI1_SetConfig+0xbc>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <TIM_TI1_SetConfig+0x56>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f80:	d00f      	beq.n	8007fa2 <TIM_TI1_SetConfig+0x56>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4a21      	ldr	r2, [pc, #132]	; (800800c <TIM_TI1_SetConfig+0xc0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00b      	beq.n	8007fa2 <TIM_TI1_SetConfig+0x56>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4a20      	ldr	r2, [pc, #128]	; (8008010 <TIM_TI1_SetConfig+0xc4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_TI1_SetConfig+0x56>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4a1f      	ldr	r2, [pc, #124]	; (8008014 <TIM_TI1_SetConfig+0xc8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_TI1_SetConfig+0x56>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4a1e      	ldr	r2, [pc, #120]	; (8008018 <TIM_TI1_SetConfig+0xcc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d101      	bne.n	8007fa6 <TIM_TI1_SetConfig+0x5a>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <TIM_TI1_SetConfig+0x5c>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e003      	b.n	8007fc6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f043 0301 	orr.w	r3, r3, #1
 8007fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f023 030a 	bic.w	r3, r3, #10
 8007fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f003 030a 	and.w	r3, r3, #10
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	621a      	str	r2, [r3, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40012c00 	.word	0x40012c00
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40013400 	.word	0x40013400
 8008018:	40014000 	.word	0x40014000

0800801c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0201 	bic.w	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 030a 	bic.w	r3, r3, #10
 8008058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800807a:	b480      	push	{r7}
 800807c:	b087      	sub	sp, #28
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	f023 0210 	bic.w	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	031b      	lsls	r3, r3, #12
 80080be:	b29b      	uxth	r3, r3
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	621a      	str	r2, [r3, #32]
}
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f023 0210 	bic.w	r2, r3, #16
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800811e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	031b      	lsls	r3, r3, #12
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	621a      	str	r2, [r3, #32]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	b2db      	uxtb	r3, r3
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80081a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	621a      	str	r2, [r3, #32]
}
 80081c0:	bf00      	nop
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800820a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	031b      	lsls	r3, r3, #12
 8008210:	b29b      	uxth	r3, r3
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800821e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	031b      	lsls	r3, r3, #12
 8008224:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4313      	orrs	r3, r2
 8008264:	f043 0307 	orr.w	r3, r3, #7
 8008268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	609a      	str	r2, [r3, #8]
}
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	021a      	lsls	r2, r3, #8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	431a      	orrs	r2, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	2201      	movs	r2, #1
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	43db      	mvns	r3, r3
 80082de:	401a      	ands	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1a      	ldr	r2, [r3, #32]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	431a      	orrs	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	621a      	str	r2, [r3, #32]
}
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800831c:	2302      	movs	r3, #2
 800831e:	e063      	b.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a2b      	ldr	r2, [pc, #172]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d004      	beq.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a2a      	ldr	r2, [pc, #168]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d108      	bne.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800835a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d018      	beq.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008392:	d013      	beq.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a18      	ldr	r2, [pc, #96]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00e      	beq.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a17      	ldr	r2, [pc, #92]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d009      	beq.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a12      	ldr	r2, [pc, #72]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d004      	beq.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a13      	ldr	r2, [pc, #76]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d10c      	bne.n	80083d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	40012c00 	.word	0x40012c00
 80083f8:	40013400 	.word	0x40013400
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40014000 	.word	0x40014000

08008408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e040      	b.n	80084d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fb f808 	bl	800347c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2224      	movs	r2, #36	; 0x24
 8008470:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa1a 	bl	80088bc <UART_SetConfig>
 8008488:	4603      	mov	r3, r0
 800848a:	2b01      	cmp	r3, #1
 800848c:	d101      	bne.n	8008492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e022      	b.n	80084d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fc28 	bl	8008cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689a      	ldr	r2, [r3, #8]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0201 	orr.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcaf 	bl	8008e34 <UART_CheckIdleState>
 80084d6:	4603      	mov	r3, r0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	; 0x28
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	4613      	mov	r3, r2
 80084ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	f040 8081 	bne.w	80085fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <HAL_UART_Transmit+0x26>
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e079      	b.n	80085fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_UART_Transmit+0x38>
 8008514:	2302      	movs	r3, #2
 8008516:	e072      	b.n	80085fe <HAL_UART_Transmit+0x11e>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2221      	movs	r2, #33	; 0x21
 800852a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800852c:	f7fb f8ec 	bl	8003708 <HAL_GetTick>
 8008530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854a:	d108      	bne.n	800855e <HAL_UART_Transmit+0x7e>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008554:	2300      	movs	r3, #0
 8008556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	e003      	b.n	8008566 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008566:	e02d      	b.n	80085c4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2200      	movs	r2, #0
 8008570:	2180      	movs	r1, #128	; 0x80
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fca3 	bl	8008ebe <UART_WaitOnFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e03d      	b.n	80085fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008594:	b292      	uxth	r2, r2
 8008596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	3302      	adds	r3, #2
 800859c:	61bb      	str	r3, [r7, #24]
 800859e:	e008      	b.n	80085b2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	b292      	uxth	r2, r2
 80085aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1cb      	bne.n	8008568 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	2140      	movs	r1, #64	; 0x40
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fc6f 	bl	8008ebe <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e009      	b.n	80085fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2220      	movs	r2, #32
 80085ee:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e000      	b.n	80085fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80085fc:	2302      	movs	r3, #2
  }
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	f640 030f 	movw	r3, #2063	; 0x80f
 800862e:	4013      	ands	r3, r2
 8008630:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d113      	bne.n	8008660 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00e      	beq.n	8008660 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d009      	beq.n	8008660 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8114 	beq.w	800887e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
      }
      return;
 800865e:	e10e      	b.n	800887e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 80d6 	beq.w	8008814 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d105      	bne.n	800867e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 80cb 	beq.w	8008814 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00e      	beq.n	80086a6 <HAL_UART_IRQHandler+0x9e>
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869e:	f043 0201 	orr.w	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00e      	beq.n	80086ce <HAL_UART_IRQHandler+0xc6>
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2202      	movs	r2, #2
 80086c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c6:	f043 0204 	orr.w	r2, r3, #4
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00e      	beq.n	80086f6 <HAL_UART_IRQHandler+0xee>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d009      	beq.n	80086f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2204      	movs	r2, #4
 80086e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ee:	f043 0202 	orr.w	r2, r3, #2
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d013      	beq.n	8008728 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	f003 0320 	and.w	r3, r3, #32
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008710:	2b00      	cmp	r3, #0
 8008712:	d009      	beq.n	8008728 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2208      	movs	r2, #8
 800871a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008720:	f043 0208 	orr.w	r2, r3, #8
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00f      	beq.n	8008752 <HAL_UART_IRQHandler+0x14a>
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008744:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800874a:	f043 0220 	orr.w	r2, r3, #32
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8093 	beq.w	8008882 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00c      	beq.n	8008780 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008784:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008790:	2b40      	cmp	r3, #64	; 0x40
 8008792:	d004      	beq.n	800879e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800879a:	2b00      	cmp	r3, #0
 800879c:	d031      	beq.n	8008802 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fc08 	bl	8008fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d123      	bne.n	80087fa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d013      	beq.n	80087f2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ce:	4a30      	ldr	r2, [pc, #192]	; (8008890 <HAL_UART_IRQHandler+0x288>)
 80087d0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fb f8d5 	bl	8003986 <HAL_DMA_Abort_IT>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80087ec:	4610      	mov	r0, r2
 80087ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	e00e      	b.n	8008810 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f858 	bl	80088a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f8:	e00a      	b.n	8008810 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f854 	bl	80088a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008800:	e006      	b.n	8008810 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f850 	bl	80088a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800880e:	e038      	b.n	8008882 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008810:	bf00      	nop
    return;
 8008812:	e036      	b.n	8008882 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00d      	beq.n	800883a <HAL_UART_IRQHandler+0x232>
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fc0d 	bl	8009052 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008838:	e026      	b.n	8008888 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00d      	beq.n	8008860 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b00      	cmp	r3, #0
 800884c:	d008      	beq.n	8008860 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008852:	2b00      	cmp	r3, #0
 8008854:	d017      	beq.n	8008886 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
    }
    return;
 800885e:	e012      	b.n	8008886 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00e      	beq.n	8008888 <HAL_UART_IRQHandler+0x280>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fbd3 	bl	8009020 <UART_EndTransmit_IT>
    return;
 800887a:	bf00      	nop
 800887c:	e004      	b.n	8008888 <HAL_UART_IRQHandler+0x280>
      return;
 800887e:	bf00      	nop
 8008880:	e002      	b.n	8008888 <HAL_UART_IRQHandler+0x280>
    return;
 8008882:	bf00      	nop
 8008884:	e000      	b.n	8008888 <HAL_UART_IRQHandler+0x280>
    return;
 8008886:	bf00      	nop
  }

}
 8008888:	3720      	adds	r7, #32
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	08008ff5 	.word	0x08008ff5

08008894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80088ee:	f023 030c 	bic.w	r3, r3, #12
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	6939      	ldr	r1, [r7, #16]
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	430a      	orrs	r2, r1
 8008934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4aa9      	ldr	r2, [pc, #676]	; (8008be0 <UART_SetConfig+0x324>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d121      	bne.n	8008984 <UART_SetConfig+0xc8>
 8008940:	4ba8      	ldr	r3, [pc, #672]	; (8008be4 <UART_SetConfig+0x328>)
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	2b03      	cmp	r3, #3
 800894a:	d817      	bhi.n	800897c <UART_SetConfig+0xc0>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x98>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008965 	.word	0x08008965
 8008958:	08008971 	.word	0x08008971
 800895c:	08008977 	.word	0x08008977
 8008960:	0800896b 	.word	0x0800896b
 8008964:	2301      	movs	r3, #1
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e0b2      	b.n	8008ad0 <UART_SetConfig+0x214>
 800896a:	2302      	movs	r3, #2
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	e0af      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008970:	2304      	movs	r3, #4
 8008972:	77fb      	strb	r3, [r7, #31]
 8008974:	e0ac      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008976:	2308      	movs	r3, #8
 8008978:	77fb      	strb	r3, [r7, #31]
 800897a:	e0a9      	b.n	8008ad0 <UART_SetConfig+0x214>
 800897c:	2310      	movs	r3, #16
 800897e:	77fb      	strb	r3, [r7, #31]
 8008980:	bf00      	nop
 8008982:	e0a5      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a97      	ldr	r2, [pc, #604]	; (8008be8 <UART_SetConfig+0x32c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d123      	bne.n	80089d6 <UART_SetConfig+0x11a>
 800898e:	4b95      	ldr	r3, [pc, #596]	; (8008be4 <UART_SetConfig+0x328>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899a:	d012      	beq.n	80089c2 <UART_SetConfig+0x106>
 800899c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a0:	d802      	bhi.n	80089a8 <UART_SetConfig+0xec>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <UART_SetConfig+0xfa>
 80089a6:	e012      	b.n	80089ce <UART_SetConfig+0x112>
 80089a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ac:	d00c      	beq.n	80089c8 <UART_SetConfig+0x10c>
 80089ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089b2:	d003      	beq.n	80089bc <UART_SetConfig+0x100>
 80089b4:	e00b      	b.n	80089ce <UART_SetConfig+0x112>
 80089b6:	2300      	movs	r3, #0
 80089b8:	77fb      	strb	r3, [r7, #31]
 80089ba:	e089      	b.n	8008ad0 <UART_SetConfig+0x214>
 80089bc:	2302      	movs	r3, #2
 80089be:	77fb      	strb	r3, [r7, #31]
 80089c0:	e086      	b.n	8008ad0 <UART_SetConfig+0x214>
 80089c2:	2304      	movs	r3, #4
 80089c4:	77fb      	strb	r3, [r7, #31]
 80089c6:	e083      	b.n	8008ad0 <UART_SetConfig+0x214>
 80089c8:	2308      	movs	r3, #8
 80089ca:	77fb      	strb	r3, [r7, #31]
 80089cc:	e080      	b.n	8008ad0 <UART_SetConfig+0x214>
 80089ce:	2310      	movs	r3, #16
 80089d0:	77fb      	strb	r3, [r7, #31]
 80089d2:	bf00      	nop
 80089d4:	e07c      	b.n	8008ad0 <UART_SetConfig+0x214>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a84      	ldr	r2, [pc, #528]	; (8008bec <UART_SetConfig+0x330>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d123      	bne.n	8008a28 <UART_SetConfig+0x16c>
 80089e0:	4b80      	ldr	r3, [pc, #512]	; (8008be4 <UART_SetConfig+0x328>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80089e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089ec:	d012      	beq.n	8008a14 <UART_SetConfig+0x158>
 80089ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089f2:	d802      	bhi.n	80089fa <UART_SetConfig+0x13e>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <UART_SetConfig+0x14c>
 80089f8:	e012      	b.n	8008a20 <UART_SetConfig+0x164>
 80089fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089fe:	d00c      	beq.n	8008a1a <UART_SetConfig+0x15e>
 8008a00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a04:	d003      	beq.n	8008a0e <UART_SetConfig+0x152>
 8008a06:	e00b      	b.n	8008a20 <UART_SetConfig+0x164>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	e060      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	77fb      	strb	r3, [r7, #31]
 8008a12:	e05d      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a14:	2304      	movs	r3, #4
 8008a16:	77fb      	strb	r3, [r7, #31]
 8008a18:	e05a      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	77fb      	strb	r3, [r7, #31]
 8008a1e:	e057      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a20:	2310      	movs	r3, #16
 8008a22:	77fb      	strb	r3, [r7, #31]
 8008a24:	bf00      	nop
 8008a26:	e053      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a70      	ldr	r2, [pc, #448]	; (8008bf0 <UART_SetConfig+0x334>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d123      	bne.n	8008a7a <UART_SetConfig+0x1be>
 8008a32:	4b6c      	ldr	r3, [pc, #432]	; (8008be4 <UART_SetConfig+0x328>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a3e:	d012      	beq.n	8008a66 <UART_SetConfig+0x1aa>
 8008a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a44:	d802      	bhi.n	8008a4c <UART_SetConfig+0x190>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <UART_SetConfig+0x19e>
 8008a4a:	e012      	b.n	8008a72 <UART_SetConfig+0x1b6>
 8008a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a50:	d00c      	beq.n	8008a6c <UART_SetConfig+0x1b0>
 8008a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a56:	d003      	beq.n	8008a60 <UART_SetConfig+0x1a4>
 8008a58:	e00b      	b.n	8008a72 <UART_SetConfig+0x1b6>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	77fb      	strb	r3, [r7, #31]
 8008a5e:	e037      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a60:	2302      	movs	r3, #2
 8008a62:	77fb      	strb	r3, [r7, #31]
 8008a64:	e034      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a66:	2304      	movs	r3, #4
 8008a68:	77fb      	strb	r3, [r7, #31]
 8008a6a:	e031      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a6c:	2308      	movs	r3, #8
 8008a6e:	77fb      	strb	r3, [r7, #31]
 8008a70:	e02e      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a72:	2310      	movs	r3, #16
 8008a74:	77fb      	strb	r3, [r7, #31]
 8008a76:	bf00      	nop
 8008a78:	e02a      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a5d      	ldr	r2, [pc, #372]	; (8008bf4 <UART_SetConfig+0x338>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d123      	bne.n	8008acc <UART_SetConfig+0x210>
 8008a84:	4b57      	ldr	r3, [pc, #348]	; (8008be4 <UART_SetConfig+0x328>)
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a90:	d012      	beq.n	8008ab8 <UART_SetConfig+0x1fc>
 8008a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a96:	d802      	bhi.n	8008a9e <UART_SetConfig+0x1e2>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d007      	beq.n	8008aac <UART_SetConfig+0x1f0>
 8008a9c:	e012      	b.n	8008ac4 <UART_SetConfig+0x208>
 8008a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa2:	d00c      	beq.n	8008abe <UART_SetConfig+0x202>
 8008aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008aa8:	d003      	beq.n	8008ab2 <UART_SetConfig+0x1f6>
 8008aaa:	e00b      	b.n	8008ac4 <UART_SetConfig+0x208>
 8008aac:	2300      	movs	r3, #0
 8008aae:	77fb      	strb	r3, [r7, #31]
 8008ab0:	e00e      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	77fb      	strb	r3, [r7, #31]
 8008ab6:	e00b      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e008      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008abe:	2308      	movs	r3, #8
 8008ac0:	77fb      	strb	r3, [r7, #31]
 8008ac2:	e005      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008ac4:	2310      	movs	r3, #16
 8008ac6:	77fb      	strb	r3, [r7, #31]
 8008ac8:	bf00      	nop
 8008aca:	e001      	b.n	8008ad0 <UART_SetConfig+0x214>
 8008acc:	2310      	movs	r3, #16
 8008ace:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad8:	f040 808e 	bne.w	8008bf8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008adc:	7ffb      	ldrb	r3, [r7, #31]
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d85e      	bhi.n	8008ba0 <UART_SetConfig+0x2e4>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <UART_SetConfig+0x22c>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b2d 	.word	0x08008b2d
 8008af0:	08008b4d 	.word	0x08008b4d
 8008af4:	08008ba1 	.word	0x08008ba1
 8008af8:	08008b69 	.word	0x08008b69
 8008afc:	08008ba1 	.word	0x08008ba1
 8008b00:	08008ba1 	.word	0x08008ba1
 8008b04:	08008ba1 	.word	0x08008ba1
 8008b08:	08008b89 	.word	0x08008b89
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b0c:	f7fd ff08 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8008b10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	005a      	lsls	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	441a      	add	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	61bb      	str	r3, [r7, #24]
        break;
 8008b2a:	e03c      	b.n	8008ba6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b2c:	f7fd ff1a 	bl	8006964 <HAL_RCC_GetPCLK2Freq>
 8008b30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	005a      	lsls	r2, r3, #1
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	085b      	lsrs	r3, r3, #1
 8008b3c:	441a      	add	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	61bb      	str	r3, [r7, #24]
        break;
 8008b4a:	e02c      	b.n	8008ba6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008b56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6852      	ldr	r2, [r2, #4]
 8008b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	61bb      	str	r3, [r7, #24]
        break;
 8008b66:	e01e      	b.n	8008ba6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b68:	f7fd fe64 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 8008b6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	005a      	lsls	r2, r3, #1
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	441a      	add	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	61bb      	str	r3, [r7, #24]
        break;
 8008b86:	e00e      	b.n	8008ba6 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	61bb      	str	r3, [r7, #24]
        break;
 8008b9e:	e002      	b.n	8008ba6 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8008ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b0f      	cmp	r3, #15
 8008baa:	d916      	bls.n	8008bda <UART_SetConfig+0x31e>
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb2:	d212      	bcs.n	8008bda <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f023 030f 	bic.w	r3, r3, #15
 8008bbc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	897b      	ldrh	r3, [r7, #10]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	897a      	ldrh	r2, [r7, #10]
 8008bd6:	60da      	str	r2, [r3, #12]
 8008bd8:	e07e      	b.n	8008cd8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	75fb      	strb	r3, [r7, #23]
 8008bde:	e07b      	b.n	8008cd8 <UART_SetConfig+0x41c>
 8008be0:	40013800 	.word	0x40013800
 8008be4:	40021000 	.word	0x40021000
 8008be8:	40004400 	.word	0x40004400
 8008bec:	40004800 	.word	0x40004800
 8008bf0:	40004c00 	.word	0x40004c00
 8008bf4:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008bf8:	7ffb      	ldrb	r3, [r7, #31]
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	d85b      	bhi.n	8008cb6 <UART_SetConfig+0x3fa>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0x348>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c47 	.word	0x08008c47
 8008c0c:	08008c65 	.word	0x08008c65
 8008c10:	08008cb7 	.word	0x08008cb7
 8008c14:	08008c81 	.word	0x08008c81
 8008c18:	08008cb7 	.word	0x08008cb7
 8008c1c:	08008cb7 	.word	0x08008cb7
 8008c20:	08008cb7 	.word	0x08008cb7
 8008c24:	08008c9f 	.word	0x08008c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c28:	f7fd fe7a 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8008c2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	085a      	lsrs	r2, r3, #1
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	441a      	add	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	61bb      	str	r3, [r7, #24]
        break;
 8008c44:	e03a      	b.n	8008cbc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c46:	f7fd fe8d 	bl	8006964 <HAL_RCC_GetPCLK2Freq>
 8008c4a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	085a      	lsrs	r2, r3, #1
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	61bb      	str	r3, [r7, #24]
        break;
 8008c62:	e02b      	b.n	8008cbc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	085b      	lsrs	r3, r3, #1
 8008c6a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8008c6e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6852      	ldr	r2, [r2, #4]
 8008c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	61bb      	str	r3, [r7, #24]
        break;
 8008c7e:	e01d      	b.n	8008cbc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c80:	f7fd fdd8 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 8008c84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	085a      	lsrs	r2, r3, #1
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	61bb      	str	r3, [r7, #24]
        break;
 8008c9c:	e00e      	b.n	8008cbc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	61bb      	str	r3, [r7, #24]
        break;
 8008cb4:	e002      	b.n	8008cbc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
        break;
 8008cba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d908      	bls.n	8008cd4 <UART_SetConfig+0x418>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc8:	d204      	bcs.n	8008cd4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	60da      	str	r2, [r3, #12]
 8008cd2:	e001      	b.n	8008cd8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop

08008cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00a      	beq.n	8008d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	f003 0310 	and.w	r3, r3, #16
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01a      	beq.n	8008e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dee:	d10a      	bne.n	8008e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008e42:	f7fa fc61 	bl	8003708 <HAL_GetTick>
 8008e46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d10e      	bne.n	8008e74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f82a 	bl	8008ebe <UART_WaitOnFlagUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e020      	b.n	8008eb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0304 	and.w	r3, r3, #4
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d10e      	bne.n	8008ea0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f814 	bl	8008ebe <UART_WaitOnFlagUntilTimeout>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e00a      	b.n	8008eb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ece:	e05d      	b.n	8008f8c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d059      	beq.n	8008f8c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ed8:	f7fa fc16 	bl	8003708 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d302      	bcc.n	8008eee <UART_WaitOnFlagUntilTimeout+0x30>
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11b      	bne.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008efc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0201 	bic.w	r2, r2, #1
 8008f0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2220      	movs	r2, #32
 8008f12:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e042      	b.n	8008fac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d02b      	beq.n	8008f8c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f42:	d123      	bne.n	8008f8c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f4c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0201 	bic.w	r2, r2, #1
 8008f6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2220      	movs	r2, #32
 8008f78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e00f      	b.n	8008fac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69da      	ldr	r2, [r3, #28]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4013      	ands	r3, r2
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2301      	moveq	r3, #1
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d092      	beq.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0201 	bic.w	r2, r2, #1
 8008fda:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff fc48 	bl	80088a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009036:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2220      	movs	r2, #32
 800903c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fc25 	bl	8008894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <__libc_init_array>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	4e0d      	ldr	r6, [pc, #52]	; (80090a0 <__libc_init_array+0x38>)
 800906c:	4c0d      	ldr	r4, [pc, #52]	; (80090a4 <__libc_init_array+0x3c>)
 800906e:	1ba4      	subs	r4, r4, r6
 8009070:	10a4      	asrs	r4, r4, #2
 8009072:	2500      	movs	r5, #0
 8009074:	42a5      	cmp	r5, r4
 8009076:	d109      	bne.n	800908c <__libc_init_array+0x24>
 8009078:	4e0b      	ldr	r6, [pc, #44]	; (80090a8 <__libc_init_array+0x40>)
 800907a:	4c0c      	ldr	r4, [pc, #48]	; (80090ac <__libc_init_array+0x44>)
 800907c:	f000 f82c 	bl	80090d8 <_init>
 8009080:	1ba4      	subs	r4, r4, r6
 8009082:	10a4      	asrs	r4, r4, #2
 8009084:	2500      	movs	r5, #0
 8009086:	42a5      	cmp	r5, r4
 8009088:	d105      	bne.n	8009096 <__libc_init_array+0x2e>
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009090:	4798      	blx	r3
 8009092:	3501      	adds	r5, #1
 8009094:	e7ee      	b.n	8009074 <__libc_init_array+0xc>
 8009096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800909a:	4798      	blx	r3
 800909c:	3501      	adds	r5, #1
 800909e:	e7f2      	b.n	8009086 <__libc_init_array+0x1e>
 80090a0:	0800978c 	.word	0x0800978c
 80090a4:	0800978c 	.word	0x0800978c
 80090a8:	0800978c 	.word	0x0800978c
 80090ac:	08009790 	.word	0x08009790

080090b0 <memcpy>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	1e43      	subs	r3, r0, #1
 80090b4:	440a      	add	r2, r1
 80090b6:	4291      	cmp	r1, r2
 80090b8:	d100      	bne.n	80090bc <memcpy+0xc>
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c4:	e7f7      	b.n	80090b6 <memcpy+0x6>

080090c6 <memset>:
 80090c6:	4402      	add	r2, r0
 80090c8:	4603      	mov	r3, r0
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d100      	bne.n	80090d0 <memset+0xa>
 80090ce:	4770      	bx	lr
 80090d0:	f803 1b01 	strb.w	r1, [r3], #1
 80090d4:	e7f9      	b.n	80090ca <memset+0x4>
	...

080090d8 <_init>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	bf00      	nop
 80090dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090de:	bc08      	pop	{r3}
 80090e0:	469e      	mov	lr, r3
 80090e2:	4770      	bx	lr

080090e4 <_fini>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr
